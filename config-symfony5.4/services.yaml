# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            string $projectDir: '%kernel.project_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/{Command,Controller}'
    App\Domain\:
        resource: '../src/Domain/{Services}'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Domain\WsServer\WsServer:

    App\Domain\API\APIHelper:

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\Domain\WsServer\Plugins\PluginHelper:
        arguments:
            $clientConnectionResourceManager: '@App\Domain\WsServer\WsServer'

    App\Entity\ServerManager\Listeners\DatabaseFlushListener:
        tags:
            - { name: 'doctrine.event_listener', event: 'onFlush' }

    App\Entity\ServerManager\Listeners\GameListListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'prePersist', entity: 'App\Entity\ServerManager\GameList' }

    App\Entity\ServerManager\Listeners\GameConfigVersionListener:
        arguments:
            $kernel: '@Symfony\Component\HttpKernel\KernelInterface'
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'postLoad', entity: 'App\Entity\ServerManager\GameConfigVersion' }

    App\Entity\ServerManager\Listeners\GameGeoServerListener:
        arguments:
            $client: '@Symfony\Contracts\HttpClient\HttpClientInterface'
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'postLoad', entity: 'App\Entity\ServerManager\GameGeoServer' }
            - { name: 'doctrine.orm.entity_listener', event: 'prePersist', entity: 'App\Entity\ServerManager\GameGeoServer' }

    App\Logger\GameSessionLogger:
        arguments:
            $kernelLogsDir: '%kernel.logs_dir%'
            $kernelProjectDir: '%kernel.project_dir%'

    App\Repository\ServerManager\GameListRepository:
        factory: ['@doctrine.orm.msp_server_manager_entity_manager', getRepository]
        arguments:
            - App\Entity\ServerManager\GameList

    App\MessageHandler\GameListSessionCreationHandler:
        arguments:
            $mspServerManagerEntityManager: '@Doctrine\ORM\EntityManagerInterface'
            $gameListRepository: '@App\Repository\ServerManager\GameListRepository'
            $kernel: '@Symfony\Component\HttpKernel\KernelInterface'
            $gameSessionChannelLogger: '@monolog.logger.game_session_channel'
            $client: '@Symfony\Contracts\HttpClient\HttpClientInterface'

    app.menu_builder:
        class: App\Menu\Builder
        arguments: [ "@knp_menu.factory" ]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: mainMenu }
            - { name: knp_menu.menu_builder, method: createSubMenu, alias: subMenu }

    App\Security\MSPAuth2Authenticator:

    ServerManager\ServerManager:

    App\EventSubscriber\StoreUserUponLogin:
        tags:
            - 'kernel.event_subscriber'

when@dev:
    services:
        # make classes in src/DataFixtures available to be used as services
        # and have a tag that allows actions to type-hint services
        App\DataFixtures\:
            resource: '../fixtures/'
            tags:
                - 'doctrine.fixture.orm'
                - 'kernel.event_subscriber'

        App\DataCollector\MSPDataCollector:
            tags:
                -
                    name: data_collector
                    id: 'App\DataCollector\MSPDataCollector'
                    template: 'data_collector/msp.html.twig'
                - 'controller.service_arguments'

when@test:
    services:
        # make classes in src/DataFixtures available to be used as services
        # and have a tag that allows actions to type-hint services
        App\DataFixtures\:
            resource: '../fixtures/'
            tags:
                - 'doctrine.fixture.orm'
                - 'kernel.event_subscriber'
