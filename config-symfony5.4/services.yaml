# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.clients_url: 'https://community.mspchallenge.info/wiki/Download'
    app.guraas_game_id: '00000000-0000-0000-0000-000000000000'
    app.guraas_analytics_version: '0.1'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            string $projectDir: '%kernel.project_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/{Command,Controller}'
    App\Domain\:
        resource: '../src/Domain/{Services}'

    App\MessageHandler\Analytics\AnalyticsMessageHandler:
        arguments:
            $guraasGameId: '%app.guraas_game_id%'
            $guraasAnalyticsVersion: '%app.guraas_analytics_version%'
            $logger: '@monolog.logger.analytics'
        tags:
            - { name: messenger.message_handler, handles: App\Message\Analytics\SessionCreatedMessage }
            - { name: messenger.message_handler, handles: App\Message\Analytics\UserLogOnOffSessionMessage }

    App\Domain\Services\SymfonyToLegacyHelper:
        arguments:
            $analyticsLogger: '@monolog.logger.analytics'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Domain\WsServer\WsServer:

    App\Domain\API\APIHelper:

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\EventListener\AttachRefreshTokenOnSuccessListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success }

    App\EventListener\CustomiseResponseOnFailureListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure }

    App\EventListener\AddUserIdToTokens:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created }

    App\EventListener\AccessTokenAuthenticatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_authenticated }

    App\Domain\WsServer\Plugins\PluginHelper:
        arguments:
            $clientConnectionResourceManager: '@App\Domain\WsServer\WsServer'

    App\VersionsProvider:
        public: true
        tags:
            - { name: shivas_versioning.provider, alias: versions_provider, priority: 200 }

    ServerManager\ServerManager:

when@dev:
    parameters:
        app.guraas_game_id: '3318cf30-f78d-4284-b530-a329005c248a'

    services:
        # make classes in src/DataFixtures available to be used as services
        # and have a tag that allows actions to type-hint services
        App\DataFixtures\:
            resource: '../fixtures/'
            tags:
                - 'doctrine.fixture.orm'
                - 'kernel.event_subscriber'

        App\DataCollector\MSPDataCollector:
            tags:
                -
                    name: data_collector
                    id: 'App\DataCollector\MSPDataCollector'
                    template: 'data_collector/msp.html.twig'
                - 'controller.service_arguments'
