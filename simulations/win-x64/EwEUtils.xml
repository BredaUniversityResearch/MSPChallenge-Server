<?xml version="1.0"?>
<doc>
<assembly>
<name>
EwEUtils
</name>
</assembly>
<members>
<member name="T:EwEUtils.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:EwEUtils.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:EwEUtils.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:EwEUtils.My.Resources.Resources.SEP_AND">
<summary>
  Looks up a localized string similar to and.
</summary>
</member>
<member name="P:EwEUtils.My.Resources.Resources.SEP_OR">
<summary>
  Looks up a localized string similar to or.
</summary>
</member>
<member name="P:EwEUtils.My.Resources.Resources.VERSION_ANCIENT">
<summary>
  Looks up a localized string similar to Ecopath 5 or older.
</summary>
</member>
<member name="P:EwEUtils.My.Resources.Resources.VERSION_NO">
<summary>
  Looks up a localized string similar to EwE version {0}.
</summary>
</member>
<member name="P:EwEUtils.My.Resources.Resources.VERSION_PREVIOUS">
<summary>
  Looks up a localized string similar to a previous version of EwE 6.
</summary>
</member>
<member name="T:EwEUtils.Core.ICommand">
 <summary>
 A generic command to centralized trigger executions in EwE.
 </summary>
</member>
<member name="T:EwEUtils.Core.IConfigurable">
 ---------------------------------------------------------------------------
 <summary>
 Interface for adding items that can be configured with a visual interface
 throughout the EwE application.
 </summary>
 ---------------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IConfigurable.IsConfigured">
 -----------------------------------------------------------------------
 <summary>
 Returns whether an item has been configured.
 </summary>
 <returns>True if an item has been configured.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IConfigurable.GetConfigUI">
 -----------------------------------------------------------------------
 <summary>
 Returns the windows control though which the item can be configured.
 </summary>
 <returns>The windows control though which the item can be configured.</returns>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.IEData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Economic data.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.IEconomicData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Economic data.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IEconomicData.Total">
 <summary>Get total economic values.</summary>
</member>
<member name="P:EwEUtils.Core.IEconomicData.Subtotal(System.Int32)">
 <summary>Get a subtotal block.</summary>
</member>
<member name="P:EwEUtils.Core.IEconomicData.NumSubtotals">
 <summary>Get the number of subtotal blocks.</summary>
</member>
<member name="P:EwEUtils.Core.IEconomicData.SubtotalCounter">
 <summary>Get the core counter that represents the grouping of subtotals.</summary>
</member>
<member name="T:EwEUtils.Core.IEcospaceImportExport">
 -----------------------------------------------------------------------
 <summary>
 Interface for directly importing and exporting spatial data into Ecospace
 without the intervention of fancy spatial engines.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IEcospaceImportExport.Value(System.Int32,System.Int32,System.String)">
 -------------------------------------------------------------------
 <summary>
 Get/set a grid value.
 </summary>
 <param name="iRow">One-based row index to access a value for.</param>
 <param name="iCol">One-based column index to access a value for.</param>
 <param name="strField">Optional field to access a value for.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IEcospaceImportExport.ToRaster(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns data in the form of a <see cref="T:EwEUtils.SpatialData.ISpatialRaster"/>.
 </summary>
 <param name="strField">Optional field name for filtering data if 
 imported data is multi-dimensional.</param>
 <returns>A raster.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.IEcospaceResultsWriter">
 <summary>
 Interface for writing Ecospace time step results to file
 </summary>
</member>
<member name="M:EwEUtils.Core.IEcospaceResultsWriter.WriteResults(System.Object)">
 <summary>
 Save time step data to file.
 </summary>
 <param name="SpaceTimeStepResults">cEcospaceTimestep as object containing the data to save.</param>
</member>
<member name="T:EwEUtils.Core.IExternalDataSource">
 ===========================================================================
 <summary>
 Interface for implementing external data sources.
 </summary>
 ===========================================================================
</member>
<member name="M:EwEUtils.Core.IExternalDataSource.IsDataAvailable(EwEUtils.Core.IRunType)">
 -----------------------------------------------------------------------
 <summary>
 States whether a plug-in capable of delivering external data is available.
 </summary>
 <param name="runtype">The core run type to check availability for.</param>
 <returns>True if available.</returns>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IExternalDataSource.EnableData(EwEUtils.Core.IRunType)">
 -----------------------------------------------------------------------
 <summary>
 Get/set whether data delivering plug-ins are supposed to be enabled or
 disabled for a certain core run type.
 </summary>
 <param name="runtype">The core run type to check availability for.</param>
 <returns>True if available.</returns>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.IFeedbackMessage">
 -----------------------------------------------------------------------
 <summary>
 Interface for requesting user feedback via the EwE messaging system.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IFeedbackMessage.Reply">
 <summary>
 Get or set the reply to this message.
 </summary>
</member>
<member name="P:EwEUtils.Core.IFeedbackMessage.ReplyStyle">
 <summary>
 Get or set the reply style to this message.
 </summary>
</member>
<member name="T:EwEUtils.Core.ILPSolver">
 -----------------------------------------------------------------------
 <summary>
 Template for linear programming engines.
 </summary>
 <remarks>
 <para>
 The methods in this interface are based on the Microsoft Solver Foundation
 API (http://msdn.microsoft.com/en-us/library/ff713957%28v=vs.93%29.aspx).
 </para>
 <para>
 MSF is not referenced in the project because of it's distribution model.
 Via this interface any LP engine can be connected to EwE.
 </para>
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.AddVariable(System.Object,System.Int32@)">
 -------------------------------------------------------------------
 <summary>
 Add a variable to the LP solver.
 </summary>
 <param name="key">Object to identify the variable. Not used in 
 computations, just added for interface compliance.</param>
 <param name="iVar">Key that the LP solver assigns to the variable.
 Note that this key is not an array index; all rows and variables
 share an incrementing ID which is used in <see cref="M:EwEUtils.Core.ILPSolver.GetValue(System.Int32)"/>
 to get values for rows and variables.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.AddRow(System.Object,System.Int32@)">
 -------------------------------------------------------------------
 <summary>
 Add a row to the LP solver.
 </summary>
 <param name="key">Object to identify the row. Not used in 
 computations, just added for interface compliance.</param>
 <param name="iRow">Key that the LP solver assigns to the row.
 Note that this key is not an array index; all rows and variables
 share an incrementing ID which is used in <see cref="M:EwEUtils.Core.ILPSolver.GetValue(System.Int32)"/>
 to get values for rows and variables.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.SetBounds(System.Int32,System.Double,System.Double)">
 -------------------------------------------------------------------
 <summary>
 Set the bounds for a variable.
 </summary>
 <param name="iVar">Variable to set the bounds for.</param>
 <param name="dMin">Lower bound for the variable, or <see cref="T:System.Double"/> 
 if no lower bound applies.</param>
 <param name="dMax">Upper bound for the variable, or <see cref="T:System.Double"/> 
 if no upper bound applies.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.SetCoefficient(System.Int32,System.Int32,System.Double)">
 -------------------------------------------------------------------
 <summary>
 Set a coefficient in the LP solver matrix.
 </summary>
 <param name="iRow">Row key to set the coefficient for.</param>
 <param name="iVar">Variable key to set the coefficient for.</param>
 <param name="dVal">Coefficient to set for row and variable.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.AddGoal(System.Int32,System.Int32,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Add an optimization goal to the LP solver.
 </summary>
 <param name="iRow">Key of the row that defines the goal.</param>
 <param name="iPriority">Goal priority.</param>
 <param name="bMinimize">Flag, stating whether the solver should
 minimize (True) or maximize (False) the goals.</param>
 <remarks>Note that LP engines may support only a single goal, and 
 may not accept priorities.</remarks>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.Solve(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Run the LP solver.
 </summary>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.GetValue(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Extract the optimized value for a row or a variable.
 </summary>
 <param name="iItem">The key to a row or variable to obtain the 
 optimized value for.</param>
 <returns>The computed optimized value for the row or variable.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ILPSolver.IsSupported">
 -------------------------------------------------------------------
 <summary>
 Returns whether this solver is supported by the operating system.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.IMessage">
 -----------------------------------------------------------------------
 <summary>
 Interface for broadcasting messages via the EwE messaging system.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IMessage.Message">
 <summary>
 Get/set the text of the message.
 </summary>
</member>
<member name="P:EwEUtils.Core.IMessage.Type">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eMessageType">event type</see> of the message.
 </summary>
</member>
<member name="P:EwEUtils.Core.IMessage.Source">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eCoreComponentType">source witin EwE</see> that
 the message originates from.
 </summary>
</member>
<member name="P:EwEUtils.Core.IMessage.Importance">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eMessageImportance">importance</see> of the message.
 </summary>
</member>
<member name="P:EwEUtils.Core.IMessage.DataType">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eDataTypes">core objects</see> that the message describes.
 </summary>
</member>
<member name="P:EwEUtils.Core.IMessage.Suppressable">
 <summary>
 Get/set whether an user interface may suppress repeated instances of a message.
 </summary>
</member>
<member name="P:EwEUtils.Core.IMessage.Suppressed">
 <summary>
 Get/set whether a message was suppressed.
 </summary>
</member>
<member name="T:EwEUtils.Core.IMonteCarloResultsWriter">
 <summary>
 Interface for writing Monte Carlo results to file
 </summary>
</member>
<member name="T:EwEUtils.Core.INetworkAnalysisData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Network Analysis data.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.INetworkAnalysisData.LIndex">
 <summary>L-index per group</summary>
</member>
<member name="T:EwEUtils.Core.IResultsWriter">
 <summary>
 Interface for writing Ecospace time step results to file
 </summary>
</member>
<member name="M:EwEUtils.Core.IResultsWriter.Init(System.Object)">
 <summary>
 Inititialize a writer.
 </summary>
 <param name="theCore">The core to initialize with.</param>
</member>
<member name="M:EwEUtils.Core.IResultsWriter.StartWrite">
 <summary>
 Start writing.
 </summary>
</member>
<member name="M:EwEUtils.Core.IResultsWriter.EndWrite">
 <summary>
 End writing.
 </summary>
</member>
<member name="P:EwEUtils.Core.IResultsWriter.DisplayName">
 <summary>
 Return a human-legible name of the data that this writer produces.
 </summary>
</member>
<member name="P:EwEUtils.Core.IResultsWriter.Enabled">
 <summary>
 Get/set whether this writer is allowed to write outputs.
 </summary>
</member>
<member name="T:EwEUtils.Core.IRunType">
 -----------------------------------------------------------------------
 <summary>
 Template for defining the type of run/computation that exchanged data
 derives from.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IShapeFunction.Init(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Initialize to a given shape.
 </summary>
 <param name="shape">The shape to init to.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IShapeFunction.Defaults">
 -----------------------------------------------------------------------
 <summary>
 Set a shape function parameters to their default values.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IShapeFunction.nParameters">
 -----------------------------------------------------------------------
 <summary>
 Get the number of parameters needed to configure a shape function.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IShapeFunction.ParamName(System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Get the human legible name of a parameter of a shape function.
 </summary>
 <param name="iParam">The index of the parameters [1,<see cref="P:EwEUtils.Core.IShapeFunction.nParameters"/>]
 to obtain the human legible name for.</param>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IShapeFunction.ParamValue(System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Get/set the value of a parameter of the shape function.
 </summary>
 <param name="iParam">The index of the parameters [1,<see cref="P:EwEUtils.Core.IShapeFunction.nParameters"/>]
 to access the value for.</param>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IShapeFunction.ParamUnit(System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Get the human legible unit for a parameter of a shape function.
 </summary>
 <param name="iParam">The index of the parameters [1,<see cref="P:EwEUtils.Core.IShapeFunction.nParameters"/>]
 to obtain the human legible unit for.</param>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IShapeFunction.ParamStatus(System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Get the order a parameter needs to appear in the UI. Any UI should honour
 this flag sorting parameters from low to high order.
 </summary>
 <param name="iParam">The index of the parameters [1,<see cref="P:EwEUtils.Core.IShapeFunction.nParameters"/>]
 to obtain order for.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IShapeFunction.Shape(System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Returns the actual function data points, as computed from the <see cref="P:EwEUtils.Core.IShapeFunction.ParamValue(System.Int32)">parameters values</see>.
 </summary>
 <param name="nPoints">The number of points to calculate the shape for.</param>
 <returns>An array of points.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IShapeFunction.IsCompatible(EwEUtils.Core.eDataTypes)">
 -------------------------------------------------------------------
 <summary>
 Return whether a shape function is relevant for a given <see cref="T:EwEUtils.Core.eDataTypes">data type</see>.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.IShapeFunction.Apply(System.Object)">
 -------------------------------------------------------------------
 <summary>
 Update a shape from the shape function.
 </summary>
 <param name="shape"></param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IShapeFunction.ShapeFunctionType">
 -------------------------------------------------------------------
 <summary>
 Return a (hopefully) unique identifier for a particular shape function,
 regardless if this function is built-in to EwE or is provided by a plug-in.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.IShapeFunction.IsDistribution">
 -------------------------------------------------------------------
 <summary>
 Returns whether the shape function is a true distribution, with fixed
 min and max values.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.ISummarizable">
 ---------------------------------------------------------------------------
 <summary>
 Interface for adding items that can summarize their configuration into a 
 string for computing model validation checksums.
 </summary>
 ---------------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.ISummarizable.Summary">
 -----------------------------------------------------------------------
 <summary>
 Summarizes the unique content of an object that allows computation of a 
 checksum over this object.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.ITaxonDetailsData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Taxonomy details data.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.EcologyType">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eEcologyTypes"/> for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.OrganismType">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eOrganismTypes"/> for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.IUCNConservationStatus">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eIUCNConservationStatusTypes"/> for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.ExploitationStatus">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eExploitationTypes"/> for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.OccurrenceStatus">
 <summary>
 Get/set the <see cref="T:EwEUtils.Core.eOccurrenceStatusTypes"/> for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.MeanWeight">
 <summary>
 Get/set the mean weight for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.MeanLifespan">
 <summary>
 Get/set the mean life span for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.MeanLength">
 <summary>
 Get/set the mean length for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.MaxLength">
 <summary>
 Get/set the max length for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.VulnerabilityIndex">
 <summary>
 Get/set the vulnerability index for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.Winf">
 <summary>
 Get/set the asymptotic weight for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.vbgfK">
 <summary>
 Get/set the asymptotic weight for a taxon.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonDetailsData.LastUpdated">
 <summary>Julian date when record was last updated.</summary>
</member>
<member name="T:EwEUtils.Core.ITaxonSearchCapabilities">
 -----------------------------------------------------------------------
 <summary>
 Template for reporting taxonomic search capabilities
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.ITaxonSearchCapabilities.TaxonSearchCapabilities">
 <summary>
 Returns a bitwise pattern of <see cref="T:EwEUtils.Core.eTaxonClassificationType"/> enumerated
 values stating which taxonomic classification fields can be searched.
 </summary>
 <returns>A bitwise pattern of <see cref="T:EwEUtils.Core.eTaxonClassificationType"/> enumerated
 values stating which taxonomic classification fields can be searched.</returns>
</member>
<member name="M:EwEUtils.Core.ITaxonSearchCapabilities.HasSpatialSearchCapabilities">
 <summary>
 Returns whether the taxonomic search engine can search by spatial bounding box.
 </summary>
 <returns>True if the taxonomic search engine can search by spatial bounding box</returns>
</member>
<member name="M:EwEUtils.Core.ITaxonSearchCapabilities.HasDepthRangeSearchCapabilities">
 <summary>
 Returns whether the taxonomic search engine can search by depth range.
 </summary>
 <returns>True if the taxonomic search engine can search by depth range.</returns>
</member>
<member name="T:EwEUtils.Core.ITaxonSearchData">
 -----------------------------------------------------------------------
 <summary>
 Template for searching Taxonomy data from external data sources.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Source">
 <summary>Data source that a taxon was obtained for.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.SourceKey">
 <summary>Key to update this taxonomy from the source.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.SearchFields">
 <summary>Bitwise flag pattern indicating which fields to search, and
 which fields have been searched.
 </summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Class">
 <summary>Class name of a taxon.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Order">
 <summary>Order name of a taxon.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Family">
 <summary>Family name of a taxon.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Genus">
 <summary>Genus name of a taxon.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Species">
 <summary>Species name of a taxon.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Common">
 <summary>Common name of a taxon.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.Phylum">
 <summary>Phylum of a taxon.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeFAO">
 <summary>FAO taxon code (http://www.fao.org/fishery/collection/asfis/en).</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeFishBase">
 <summary>FishBase SpecCode.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeSeaLifeBase">
 <summary>Sea Life Base SpecCode.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeSAUP">
 <summary>Sea Around Us project Taxon ID</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeLSID">
 <summary>Taxonomy Databases Working Group Life Catalogue ID (http://lsid.tdwg.org/)</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeAquaMaps">
 <summary>AquaMaps SpeciesID.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeAphia">
 <summary>WoRMS AphiaID.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.CodeOBIS">
 <summary>OBIS taxonomy number.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.North">
 <summary>Northern limit of the bounding box where this taxon occurs.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.South">
 <summary>Southern limit of the bounding box where this taxon occurs.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.East">
 <summary>Eastern limit of the bounding box where this taxon occurs.</summary>
</member>
<member name="P:EwEUtils.Core.ITaxonSearchData.West">
 <summary>Western limit of the bounding box where this taxon occurs.</summary>
</member>
<member name="T:EwEUtils.Core.eCoreExecutionState">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type identifying known core states.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.Idle">
 <summary>The core is initialized and ready for use</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcopathLoaded">
 <summary>Ecopath model data has been loaded</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcopathInitialized">
 <summary>Ecopath model data has been initialized</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcopathRunning">
 <summary>Ecopath scenario is ready to run</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcopathCompleted">
 <summary>Ecopath model run is completed</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.PSDCompleted">
 <summary>Ecopath PSD model run is completed</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcotracerLoaded">
 <summary>Ecotracer scenario data has been loaded</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcosimLoaded">
 <summary>Ecosim scenario data has been loaded</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcosimInitialized">
 <summary>Ecosim scenario has been initialized</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcosimRunning">
 <summary>Ecosim scenario is running</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcosimCompleted">
 <summary>Ecosim scenario run is completed</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceLoaded">
 <summary>Ecospace scenario data has been loaded</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceInitialized">
 <summary>Ecospace scenario has been initialized</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceRunning">
 <summary>Ecospace scenario is running</summary>
</member>
<member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceCompleted">
 <summary>Ecospace scenario run is completed</summary>
</member>
<member name="T:EwEUtils.Core.eVarNameFlags">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type used for exposing variables a.k.a. parameters provided by
 the Core models.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NotSet">
 <summary>Variable name is not specified</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PBInput">
 <summary>Production over Biomass (ratio)</summary>
 <remarks>Also referred to as Mortality or Z.</remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PBOutput">
 <summary>Production over Biomass (computed)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EEInput">
 <summary>Ecotrophic Efficiency</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EEOutput">
 <summary>Ecotrophic Efficiency (computed)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.QBInput">
 <summary>Consumption over Biomass</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.QBOutput">
 <summary>Consumption over Biomass (computed)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GEInput">
 <summary>Gross efficiency (P/Q)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GEOutput">
 <summary>Gross efficiency (P/Q, computed)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Name">
 <summary>Generic item names</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Index">
 <summary>Numerical position of an item in a list</summary>
 <remarks>This value has replaced former EwE5 indices such as iGroup.</remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Area">
 <summary>Model area</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.HabitatArea">
 <summary>Habitat area fraction</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Biomass">
 <summary>Biomass</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BiomassAreaInput">
 <summary><see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">Biomass</see> per <see cref="F:EwEUtils.Core.eVarNameFlags.HabitatArea">Area</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BiomassAreaOutput">
 <summary><see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">Biomass</see> per <see cref="F:EwEUtils.Core.eVarNameFlags.HabitatArea">Area</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BioAccumInput">
 <summary>Net. biomass accumulation as entered by the user</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BioAccumRatePerYear">
 <summary>Biomass accumulation rate per year</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BioAccumOutput">
 <summary>Net. biomass accumulation</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GS">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DetImp">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TTLX">
 <summary>Trophic Level</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Immig">
 <summary>Immigration</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Emig">
 <summary>Net. Emigration</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EmigRate">
 <summary>Emigration rate</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BioAccumRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DietComp">
 <summary>Diet composition</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ImpDiet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DetritusFate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FixedCost">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EffortCost">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SailCost">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EPower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PcapBase">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CapDepreciate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CapBaseGrowth">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MortCoPB">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MortCoFishRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MortCoPredMort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MortCoBioAcumRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MortCoNetMig">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MortCoOtherMort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FishMortTotMort">
 <summary>[Fishing Mort] / [Total mort]</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NatMortPerTotMort">
 <summary>1- FishMortTotMort</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Consumption">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ImportedConsumption">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PredMort">
 <summary>Predation mortality</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Landings">
 <summary>Fisheries landings</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Discards">
 <summary>Fisheries discards</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NominalEffort">
 <summary>Fisheries nominal effort</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.OffVesselPrice">
 <summary>Fisheries value of catches at landing</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NonMarketValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DiscardFate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalConsumption">
 <summary>Sum of all consumption</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalExports">
 <summary>Sum of all exports</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalRespFlow">
 <summary>Sum of all respiratory flows</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalFlowDetritus">
 <summary>Sum of all flows into detritus</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalThroughput">
 <summary>Total system throughput</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalProduction">
 <summary>Sum of all production</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsMeanTrophicLevelCatch">
 <summary>Mean trophic level of the catch</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsGrossEfficiency">
 <summary>Gross efficiency (catch/net p.p.)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalNetPP">
 <summary>Calculated total net primary production</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalPResp">
 <summary>Total primary production/total respiration</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsNetSystemProduction">
 <summary>Net system production</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalPB">
 <summary>Total primary production/total biomass</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalBT">
 <summary>Total biomass/total throughput</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalBNonDet">
 <summary>Total biomass (excluding detritus)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalCatch">
 <summary>Total catches</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsConnectanceIndex">
 <summary>Connectance Index</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsOmnivIndex">
 <summary>System Omnivory Index</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalMarketValue">
 <summary>Total market value</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalShadowValue">
 <summary>Total shadow value</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalValue">
 <summary>Total value</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalFixedCost">
 <summary>Total fixed cost</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalVarCost">
 <summary>Total variable cost</summary>
 <remarks>This variable may exist under a different name.</remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalCost">
 <summary>Total cost</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsProfit">
 <summary>Profit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsPedigree">
 <summary>Pedigree index</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsMeasureOfFit">
 <summary>Measure of pedigree fit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsDiversity">
 <summary>Selected diversity indicator</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MaxRelPB">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MaxRelFeedingTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FeedingTimeAdjRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.OtherMortFeedingTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PredEffectFeedingTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DenDepCatchability">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.QBMaxQBio">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SwitchingPower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.VulMult">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MedFunctNumber">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StepSize">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Discount">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EquilibriumStepSize">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EquilMaxFishingRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NumStepAvg">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NutBaseFreeProp">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NutForceFunctionNumber">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NutPBMax">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SystemRecovery">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NudgeChecked">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UseVarPQ">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BiomassOn">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcoSimNYears">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MaxEffort">
 <summary>Maximum effort of a fleet</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.QuotaType">
 <summary>Quota type imposed on a fleet</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.QuotaShare">
 <summary>Quota set for a gear/group combination</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DiscardMortality">
 <summary>Proportion of discards that dies</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBBase">
 <summary>BBase for target fishing mortality policy. Upper biomass boundary</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBLim">
 <summary>BLimit for target fishing mortality policy. Lower biomass boundary</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFmax">
 <summary>Mortality/Fmsy for target fishing mortality policy</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFmin">
 <summary>Mortality when biomass at or below BLim(lower boundry)</summary>
 <remarks>Added for MSEBatch command file.</remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSELowerLPEffort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEUpperLPEffort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ForagingTimeLowerLimit">
 <summary>
 Foraging time adjustment cannot drop below 0.1 as was the case
 in EwE all the way up to release 6.4. In later versions of EwE
 the foraging time adjustment was allowed to drop lower.
</summary>
 <comment>
 VC: Arrow lake model, big increase in prey, top predator foraging 
 time can't go below 0.1, so changed bount to 0.01 
 </comment>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ConSimOnEcoSim">
 <summary>Contaminant tracing on/off for Ecosim</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ConSimOnEcoSpace">
 <summary>Contaminant tracing on/off for Ecospace</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PredictEffort">
 <summary>Predict Ecosim Fishing Effort</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimSumStart">
 <summary>Start of summary time period in years</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimSumEnd">
 <summary>end of summary time period in years</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimSumNTimeSteps">
 <summary>number of time steps to summarize ecosim data over</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DBID">
 <summary>Database ID</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PP">
 <summary>Percentage of primary production</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Description">
 <summary>Generic description</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NumDigits">
 <summary>Number of digits to display</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GroupDigits">
 <summary>Group display digits</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitTime">
 <summary>Unit enumerated value for text-based values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitTimeCustomText">
 <summary>Unit text for time-based values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitArea">
 <summary>Unit enumerated value for area-based values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitAreaCustomText">
 <summary>Unit text for area-based values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitCurrency">
 <summary>Unit enumerated value for currency-based values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitCurrencyCustomText">
 <summary>Unit text for currency-based values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitMonetary">
 <summary>Unit enumerated value for monetary values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitMapRef">
 <summary>Unit value for georeferencing</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UnitEnvDriver">
 <summary>Unit value for environmental drivers</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Author">
 <summary>Author of an EwE component</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Contact">
 <summary>Contact info of an EwE component</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LastSaved">
 <summary>Julian day an EwE component was last saved</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NetMigration">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FlowToDet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NetEfficiency">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.OmnivoryIndex">
 <summary>Per-group omnivory index</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Respiration">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Assimilation">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.RespAssim">
 <summary>Resp / Assim</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ProdResp">
 <summary>Prod / Resp</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.RespBiom">
 <summary>Resp / Biomass</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SearchRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Hlap">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Plap">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Color">
 <summary>Colour value to represent an exposed core I/O object</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Alpha">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.RecPowerSplit">
 <summary>Recruitment power</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BABsplit">
 <summary>Relative biomass accumulation rate (ratio)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.WmatWinf">
 <summary>Weight at maturity over weight at infancy (ratio)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.HatchCode">
 <summary>Forcing function number for hathery stocking (scalar)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FixedFecundity">
 <summary>Stanza use fixed fecundity</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EggAtSpawn">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LeadingBiomass">
 <summary>Stanza parameter; used to indicate the group that leads 
 <see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">biomass</see> in a multi-stanza
 configuration</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LeadingCB">
 <summary>Stanza parameter; used to indicate the group that leads 
 <see cref="F:EwEUtils.Core.eVarNameFlags.QBInput">QB</see> in a multi-stanza
 configuration</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.RecruitmentStanza">
 <summary>Stanza parameter; used to indicate the stanza that leads recruitment.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SpawnProp">
 <summary>Stanza parameter; used to indicate which proporation of a life stage is allowed to spawn.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Bat">
 <summary>BaB * Bio</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StartAge">
 <summary>Start age of a group in a stanza configuration (in months)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PacketsMultiplier">
 <summary>A multiplier to change the number of packets for the IBM model</summary>
 <remarks>..but what about Dell? Acer? Toshiba? This is simply not fair!</remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.VulnerabilityCap">
 <summary>Vulnerability cap in the Fit to Time series routine</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.InRow">
 <summary>Number of rows in the Ecospace basemap</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.InCol">
 <summary>Number of columns in the Ecospace basemap</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.nCells">
 <summary>Number of modeled cells</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CellLength">
 <summary>Length of a cell (km)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CellSize">
 <summary>Size of a cell (in map units)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Latitude">
 <summary>Latitude of spatial data</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Longitude">
 <summary>Longitude of spatial data</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EffectivePower">
 <summary>Relative catchability per fleet/gear type (multiplier)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MVel">
 <summary>Base dispersal</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.RelMoveBad">
 <summary>Relative dispersal in bad habitat</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.RelVulBad">
 <summary>Relative vulnerability in bad habitat</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.KMoveFitness">
 <summary>Movement rates relative to fitness</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFTarget">
 <summary>  Target f for effort distribution penalty </summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IsAdvected">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IsMigratory">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PreferredHabitat">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.HabitatFishery">
 <summary>A habitat that a given fleet is allowed to fish in</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAFishery">
 <summary>A MPA that a given fleet is allowed to fish in</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAMonth">
 <summary>Which months of the year a MPA is open for fishing</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerDepth">
 <summary>Ecospace cell depth assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerHabitat">
 <summary>Ecospace cell habitat assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerHabitatCapacityInput">
 <summary>Ecospace cell habitat capacity (entered)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerHabitatCapacity">
 <summary>Ecospace cell habitat capacity (computed)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerMPA">
 <summary>Ecospace cell MPA assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerRelPP">
 <summary>Ecospace cell relative primary production</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerContaminantRelativeDistribution">
 <summary>Ecospace cell contaminant concentrations weight</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerContaminantForcingAbsolute">
 <summary>Ecospace cell absolute contaminant contenctrations</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerRegion">
 <summary>Ecospace cell region assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerMigration">
 <summary>Ecospace cell migration assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerAdvection">
 <summary>Ecospace cell advection assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerWind">
 <summary>Ecospace wind layer</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerUpwelling">
 <summary>Ecospace upwelling layer</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerImportance">
 <summary>Ecospace MPA importance</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerDriver">
 <summary>Ecospace external driver layer</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerPort">
 <summary>Ecospace cell port assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerSail">
 <summary>Ecospace sailing cost</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerBiomassForcing">
 <summary>Ecospace absolute biomass forcing</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerBiomassRelativeForcing">
 <summary>Ecospace relative biomass forcing</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerIBMAge1Forcing">
 <summary>Number of age 1 individuals for a stanza group. Used to force recruitment numbers of a mulit-stanza group by the IBM Model ONLY.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerAdvectionForcing">
 <summary>Ecospace advection forcing, directly through the Xvel and Yvel fields</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ImportanceWeight">
 <summary>Ecospace/MPA importance weight of the weight layer</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.HabAreaProportion">
 <summary>Proportion of total habitat area by Habitat type</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerExclusion">
 <summary>Ecospace excluded cells layer</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerCellArea">
 <summary>Ecospace cell area layer</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerEffortZone">
 <summary>Ecospace effort zones layer</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SEmult">
 <summary>Total Effort multiplier</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.AdjustSpace">
 <summary>
 Ecospace: Habitat-adjusted biomass = True. Ecopath base biomass = False
</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FleetEffortConversion">
 <summary>Conversion factor for fishing effort</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FitResponseType">
 <summary></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapBiomass">
 <summary>Biomass map as computed by Ecospace.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapCatch">
 <summary>Catch map as computed by Ecospace.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapSumEffort">
 <summary>Sum of effort map as computed by Ecospace.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapEffort">
 <summary>Effort map as computed by Ecospace.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapShannonDiversity">
 <summary>Shannon Diversity indicator map as computed by Ecospace.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapKemptonsQ">
 <summary>KemptonsQ indicator map as computed by Ecospace.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupBiomassStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupBiomassEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupCatchStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupCatchEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupValueStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupValueEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetCatchStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetCatchEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetValueStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetValueEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetCostStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetCostEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetEffortES">
 <summary>Ecospace [Effort End] / [Effort Start]</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetCatch">
 <summary>Ecospace Catch by Fleet Time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetValue">
 <summary>Ecospace Value by Fleet Time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomassStart">
 <summary>Biomass of a group in a region for the start summary period</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomassEnd">
 <summary>Biomass of a group in a region for the end summary period</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionCatchStart">
 <summary>Biomass of catch in a region for the start summary period</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionCatchEnd">
 <summary>Biomass of catch in a region for the end summary period</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionFleetGroupCatch">
 <summary>Biomass of catch in a region by fleet, group, and time step</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionFleetGroupCatchYear">
 <summary>Biomass of catch in a region by fleet, group, and year</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSummaryTimeStart">
 <summary>Time in Years of the Start summary time period</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSummaryTimeEnd">
 <summary>Time in Years of the End summary time period</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceNumberSummaryTimeSteps">
 <summary>Number of time steps in the summary periods</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceBiomassOverTime">
 <summary>Ecospace output biomass averaged over all the cells for each timestep</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRelativeBiomassOverTime">
 <summary>Ecospace [computed biomass] / [base biomass] averaged over all the cells for each timestep</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupCatchOverTime">
 <summary>Ecospace Catch over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupValueOverTime">
 <summary>Ecospace Value over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomass">
 <summary>Ecospace Biomass by region over time averaged over all the cells in a region for each timestep.
 <seealso cref="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomassYear"/></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomassYear">
 <summary>Ecospace Biomass by region over time averaged over all the cells in a region, per year.
 <seealso cref="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomass"/></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetProfit">
 <summary>Ecospace yearly average profit by fleet</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetJobs">
 <summary>Ecospace yearly average jobs [value of catch] * [jobs]</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StanzaNumberAtAge">
 <summary>Number of fish in a monthly stanza age group</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StanzaWeightAtAge">
 <summary>Weight of individual fish in a monthly stanza age group</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StanzaBiomassAtAge">
 <summary>Biomass in a monthly stanza age group [StanzaNumberAtAge]*[StanzaWeightAtAge]</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StanzaGroup">
 <summary>Index to the Ecopath Groups in the Stanza Group</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StanzaBiomass">
 <summary>Biomass for this a stanza iStanzaGroup</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StanzaCB">
 <summary>Consumption/Biomass for this a stanza iStanzaGroup Ecopath QB</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.StanzaMortaility">
 <summary>Mortality for this a stanza iStanzaGroup Ecopath PB</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.nGridSolverThreads">
 <summary>Number of threads to run Dispersal or IBM Growth on.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.nIBMMovementThreads">
 <summary>Number of threads to run the IBM Movement on.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.nSpaceThreads">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.nEffortDistThreads">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSaveThreadingLog">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UseIBM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UseNewMultiStanza">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UseExact">
 <summary>Flag stating whether to use exact calculations or iterations for Ecospace migratory species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TotalTime">
 <summary>Ecospace run time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NumTimeStepsPerYear">
 <summary>Number of time steps per year</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Tolerance">
 <summary>Ecospace Tolerance</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SOR">
 <summary>Ecospace successive over-relaxation</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MaxIterations">
 <summary>Ecospace maximum number of iterations</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceCapCalType">
 <summary>How capacity is calculated in Ecospace</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceUseCoreOutputDir">
 <summary>Use the default Ecospace output directory structure as defined by the core</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.UseEffortDistThreshold">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EffortDistThreshold">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceIBMMovePacketOnStanza">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapOutputDir">
 <summary>User-defined output directory for Ecospace Map output</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceAreaOutputDir">
 <summary>User-defined output directory for Ecospace Area Averaged outputs</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceAutosaveFirstTimeStep">
 <summary>First time step to autosave Ecospace output for.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceAutosaveSelectedGroupsFleetsOnly">
 <summary>Autosave Ecospace visible groups only. This flag is only meaningful in conjunction with the EwE user interface</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceAutosaveAnnualOutput">
 <summary>Autosave Ecospace annual output only</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceUseEcosimBiomassForcing">
 <summary>Can Ecospace use Ecosim biomass forcing time series</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceIsEcosimBiomassForcingLoaded">
 <summary>Maintenance flag, used by Ecospace, to tell if there is Ecosim biomass forcing time series loaded. 
 This does not tell Ecospace to use the time series just that it is available to be used.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceUseEcosimDiscardForcing">
 <summary>Can Ecospace use Ecosim discards forcing time series</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceIsEcosimDiscardForcingLoaded">
 <summary>Maintenance flag, used by Ecospace, to tell if there is Ecosim biomass forcing time series loaded. 
 This does not tell Ecospace to use the time series just that it is available to be used.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceMapDiscards">
 <summary>Ecospace Discards Map</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimBiomass">
 <summary>Ecosim absolute biomass over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimBiomassRel">
 <summary>Ecosim relative biomass over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimYield">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimYieldRel">
 <summary>[catch(t)]/[catch(0)]</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimCatchGroupGear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimValueGroup">
 <summary>Ecosim value by group over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimValueGroupRel">
 <summary>Ecosim relative value by group, time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimValueGroupFleet">
 <summary>Ecosim value by group fleet over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFishingMortGroupGear">
 <summary>Fishing mortality by group fleet</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimTotalMort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimConsumpBiomass">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFeedingTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimPredMort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFishMort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimProdConsump">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimAvgWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimAvgPrey">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimAvgPred">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimMortVPred">
 <summary>[predation mortality]/[total mortality]</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimMortVFishing">
 <summary>[fishing mortality]/[total mortality]</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimMortVPredPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimMortVFishingPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimEcoSystemStruct">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimIsCatchAggregated">
 <summary>Is the catch for this group aggregated across all the fleets</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathWeight">
 <summary>Ecopath ouput data over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathNumber">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathBiomass">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LorenzenMortality">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PSD">
 <summary>Particle size distribution</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimPredConsumpTime">
 <summary>Consumption by Pred of this Prey over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimPredRateTime">
 <summary>Consumption Rate by Pred of this Prey over time (consumpt(prey,pred)/b(prey)) over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimElectivityTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimPreyPercentageTime">
 <summary>Percentage of a group this group consumes over time</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IsPred">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IsPrey">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimGroupBiomassStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimGroupBiomassEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimGroupCatchStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimGroupCatchEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimGroupMaxMort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimGroupValueStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimGroupValueEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetCatchStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetCatchEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetValueStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetValueEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetCostStart">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetCostEnd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetEffort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetJobs">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetProfit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetValueTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimFleetCatchTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSS">
 <summary>Sum of squares fit of Ecospace predicted values to all reference data across all groups</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSSGroup">
 <summary>Sum of squares fit of Ecospace predicted values by group</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSSCalculated">
 <summary>
 Has SS been calculated. Is there Ecospace Timeseries data loaded.
 </summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimSS">
 <summary>Sum of squares fit of Ecosim predicted values to all reference data across all the groups and data</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimSSGroup">
 <summary>Sum of squares fit of Ecosim predicted values to reference data by group</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcDietMult">
 <summary>Monte Carlo diet multiplier</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.AdditivePredMortProp">
 <summary>Additive predation mortality proportion. Good luck pronouncing that.</summary>
 <remarks>Added 26 Nov 2019, CW, JB, VC and JS</remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcB">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">B</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcPB">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.PBInput">PB</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcQB">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.QBInput">QB</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBA">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.BioAccumInput">BA</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcEE">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.EEInput">EE</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcVU">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.VulMult">Vulnerability</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcDC">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.DietComp">DC</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcDiscards">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.Discards">Discards</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcLandings">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.Landings">Landings</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBaBi">
 <summary>Monte Carlo sampled <see cref="F:EwEUtils.Core.eVarNameFlags.BioAccumRate">BA rate</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">B</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcPBbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.PBInput">PB</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcQBbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.QBInput">QB</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBAbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.BioAccumInput">BA</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcEEbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.EEInput">EE</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcVUbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.VulMult">Vulnerability</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcDCbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.DietComp">DC</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcDiscardsbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.Discards">Discards</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcLandingsbf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.Landings">Landings</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBaBibf">
 <summary>Monte Carlo best fitting <see cref="F:EwEUtils.Core.eVarNameFlags.BioAccumRate">BA rate</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBLower">
 <summary>Monte Carlo <see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">B</see> lower sample limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcPBLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcQBLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBALower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcEELower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcVULower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBaBiLower">
 <summary>Monte Carlo biomass accum rate upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBUpper">
 <summary>Monte Carlo B upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcPBUpper">
 <summary>Monte Carlo P over B upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcQBUpper">
 <summary>Monte Carlo Q over B upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBAUpper">
 <summary>Monte Carlo Bimass accummulation upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcEEUpper">
 <summary>Monte Carlo EE upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcVUUpper">
 <summary>Monte Carlo vulnerabilities upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcDiscardsUpper">
 <summary>Monte Carlo discards upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcLandingsUpper">
 <summary>Monte Carlo landings upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBaBiUpper">
 <summary>Monte Carlo biomass accum rate upper limit</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBcv">
 <summary>Monte Carlo biomass cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcPBcv">
 <summary>Monte Carlo P over B cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcQBcv">
 <summary>Monte Carlo Q over B cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBAcv">
 <summary>Monte Carlo biomass accummulation cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcEEcv">
 <summary>Monte Carlo EE cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcVUcv">
 <summary>Monte Carlo vulnerabilities cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcDiscardscv">
 <summary>Monte Carlo discards cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcLandingscv">
 <summary>Monte Carlo landings cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.mcBaBicv">
 <summary>Monte Carlo biomass accummulation rate cv</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BarrierAvoidanceWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.InMigAreaMoveWeight">
 <summary>
 Migration in area movement weight.
 </summary>
 <remarks>Movement weight for preferred direction within a migartion area. </remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SearchBlock">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SearchDiscountRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SearchGenDiscRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SearchBaseYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SearchFishingMortalityPenalty">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSValueComponentType">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSGroupStrucRelWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSFleetJobCatchValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSFleetTargetProfit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSNRuns">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSGroupMandRelBiom">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSMaxNumEval">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSMaxEffChange">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSInitOption">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSSearchOption">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSOptimizeApproach">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSOptimizeOptions">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSEconomicWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSSocialWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSMandatedRebuildingWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSEcoSystemWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSBiomassDiversityWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSMaxPortUtil">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SearchPrevCostEarning">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSIncludeComp">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSBatchRun">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSUseEcospace">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSFishingLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSPredictionVariance">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSExistenceValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FPSUseEconomicPlugin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSVulnerabilitySearch">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSAnomalySearch">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSCatchAnomaly">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSCatchAnomalySearchShapeNumber">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSFirstYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSLastYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSNumSplinePoints">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSAppliedWeights">
 <summary>Weights of applied TS in search algorithm</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSVulnerabilityVariance">
 <summary>Variance of Vulnerability</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSPPVariance">
 <summary>Variance of Primary Production</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSNAICData">
 <summary>Number of data points for AIC</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.F2TSUseDefaultV">
 <summary>Use default V's instead of currect V's</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CZero">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CInflow">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.COutflow">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CPhysicalDecayRate">
 <summary>Physical contaminant decay rate</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ConForceNumber">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CImmig">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CEnvironment">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CBEnvironment">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CAssimilationProp">
 <summary>Proportion of contaminant excreted</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CMetablismRate">
 <summary>Contaminant excretion or metabolism rate</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Concentration">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ConcBio">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CSum">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ConMaxTimeSteps">
 <summary>
 Max number of sub time steps for the contaminant tracer model
 </summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptEconomicValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptSocialValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptMandatedValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptEcologicalValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptBiomassDiversityValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptBestRow">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptBestCol">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptCurRow">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptCurCol">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptBoundaryWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptSearchType">
 <summary>Type of MPA optimization search to conduct.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptStepSize">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptIterations">
 <summary>The number of MPA optimization iterations.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptMaxArea">
 <summary>The number of MPA optimization iterations.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptMinArea">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.iMPAOptToUse">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAUseCellWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptUseRegions">
 <summary>Close equal proportions of regions in the MPA optimization random search.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptStartYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptEndYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptPercentageClosed">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptTotalValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MPAOptAreaBoundary">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerMPASeed">
 <summary>Ecospace cell MPA seed assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerMPASeedCurrent">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerMPASeedBest">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LayerMPARandom">
 <summary>Ecospace cell MPA Random assignments</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioCV">
 <summary>MSE coefficient of variation for biomass</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetCV">
 <summary>MSE coefficient of variation for fishing fleets</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEQIncrease">
 <summary>MSE increase in catchability by group per year (multiplier)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetWeight">
 <summary>MSE importance weight in assuming impact of fleet on a group (multiplier)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSELowerRisk">
 <summary>Lower biomass bounds for risk analysis</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEUpperRisk">
 <summary>Upper biomass bounds for risk analysis</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSELowerRiskPercent">
 <summary>Number of trial that exceeded the lower biomass bounds for risk analysis</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEUpperRiskPercent">
 <summary>Number of trial that exceeded the upper biomass bounds for risk analysis</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEconomicValue">
 <summary>Sum of all economic values for the current MSE output object (results)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEmployValue">
 <summary>Sum of employment values for the current MSE output object (results)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEcologicalValue">
 <summary>Sum of biomass for the current MSE output object (results)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEWeightedTotalValue">
 <summary>Weighted sum of all mean values</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEMeanEconomicValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEMeanEmployValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEMeanMandatedValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEMeanEcologicalValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBestTotalValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETrialNumber">
 <summary>Trial number for the current MSE output object (results)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEAssessMethod">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEForcastGain">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEAssessPower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSENTrials">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEUseEconomicPlugin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.RHalfB0Ratio">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFixedF">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERecruitmentCV">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETAC">
 <summary>Total allowable catch</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEMaxEffort">
 <summary>Max Effort for the MSE</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSELPSolution">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomass">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSECatchByGroup">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSECatchByFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEValueByFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffort">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEPredictEffort">
 <summary>True = Use predicted Effort False = user input Effort</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFixedEscapement">
 <summary>Biomass by group</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEStop">
 <summary>Stop the current MSE run</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortSource">
 <summary>Effort type the MSE is to use</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERegulatoryMode">
 <summary>Regulatory type to be used y MSE</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefBioLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefBioUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefBioEstLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefBioEstUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefGroupCatchLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefGroupCatchUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefFleetCatchLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefFleetCatchUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefFleetEffortLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSERefFleetEffortUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassHistogram">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassMeanValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassMin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassMax">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassCV">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassSdt">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassBins">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassBinWidths">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassAboveLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassBelowLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassAboveLimitPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassBelowLimitPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBiomassCVPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchHistogram">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchMeanValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchMin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchMax">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchCV">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchStd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchBins">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchBinWidths">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchAboveLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEGroupCatchBelowLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueHistogram">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueMeanValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueMin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueMax">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueCV">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueStd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueBins">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueBinWidths">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueAboveLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetValueBelowLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortHistogram">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortMeanValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortMin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortMax">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortCV">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortStd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortBins">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortBinWidths">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortAboveLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortBelowLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstHistogram">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstMeanValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstMin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstMax">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstCV">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstStd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstBins">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstBinWidths">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstAboveLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBioEstBelowLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatHistogram">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatMeanValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatMin">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatMax">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatCV">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatStd">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatBins">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatBinWidths">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatAboveLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEFStatBelowLimit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEStartYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEResultsStartYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEResultsEndYear">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYRunSilent">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYEvalValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYStartTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYEvaluateFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMNIteration">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMBLimLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMBLimUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMBLimValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMBBaseLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMBBaseUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMBBaseValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMFOptLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMFOptUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSETFMFOptValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchTACNIteration">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchTACLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchTACUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchTACValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchTACManaged">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchFNIteration">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchFLower">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchFUpper">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchFValues">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchFManaged">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchOutputBiomass">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchOutputConBio">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchOutputFeedingTime">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchOutputPredRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchOutputCatch">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchOutputFishingMortRate">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchOuputDir">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchGroupRunType">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchTFMManaged">
 <summary>
 Type of calculation to use when setting MSE Batch iterations values % or +- Value 
 Boolean is this group managed using the TFM
</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSEBatchIterCalcType">
 <summary>
 Type of calculation to use when setting MSE Batch iterations values % or +- Value 
</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.VariableName">
 <summary>Pedigree variable</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IndexValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ConfidenceInterval">
 <summary>Pedigree confidence</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Pedigree">
 <summary>Assigned pedigree</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameModel">
 <summary>Game server loaded model</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameState">
 <summary>Game server run state</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameModeratorState">
 <summary>Game client moderator state</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameViewVisibleItems">
 <summary>Items the client is allowed to show</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameViewAvailableItems">
 <summary>Items the client can request from the server</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameDataLimits">
 <summary>Limits imposed on variables</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetFishingRates">
 <summary>User entered fishing rate modifiers/shapes for fleets</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameGroupFishingMortRates">
 <summary>User entered mortality/fishing rate modifiers/shapes for groups</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameViewTrafficLights">
 <summary>Traffic lights the client can request from the server</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameAvailableRunData">
 <summary>Type of data available during a simulation (TimeStep or Progress)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameSimulationTimeStep">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameBiomass">
 <summary>Game absolute biomass</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassRel">
 <summary>Game generic relative biomass over time (no specific source)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassFishRegulation">
 <summary>Game biomass with Fishing regulation</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassFishRegulationPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassByRegion">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameCatchRegionFleetGroup">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameGroupValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameGroupFleetValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetProfitSummary">
 <summary>Profit by Fleet</summary>      
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetJobsSummary">
 <summary>Jobs(?) by Fleet</summary>    
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetValue">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetCatch">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetCatchPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetValuePM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameGroupCatch">
 <summary>For Ecosim Yield from Ecosim Plots Biomass * FishTime</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameGroupCatchPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicCost">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicCostPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicCostByFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicCostByFleetPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicProfit">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicProfitByFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicProfitByFleetPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicProfitPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicJobsTotal">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicJobsTotalPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicJobsByFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicJobsByFleetPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicProduction">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicProductionPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicTaxes">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicTaxesPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicTaxesByFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicTaxesByFleetPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicSubsidies">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicSubsidiesPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicSubsidiesByFleet">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEconomicSubsidiesByFleetPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEcoSystemStruct">
 <summary>Eco system structure 1/pb * b(t)</summary>    
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameEcoSystemStructPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetName">
 <summary>Game names added for the Game data because EwE6 uses Name for all names</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameMPAName">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameHabitatName">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetFishingRatesPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceSalinity">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceNutrient">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceTemperature">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForcePrimaryProducer">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceSalinityPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceNutrientPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceTemperaturePM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceSalinityName">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceNutrientName">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForceTemperatureName">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForcePrimaryProducerName">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameForcePrimaryProducerNumber">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassIteration">
 <summary>Game biomass for an interation</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameGroupCatchIteration">
 <summary>Game catch by group for an interation</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetEffortIteration">
 <summary>Game effort by fleet for an interation</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFleetValueIteration">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Game3DVizSettings">
 <summary>Visualization settings for a 3D game environment</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameTLCatchPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameTLPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameFIBPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GameKemptonsQPM">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PSDEnabled">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PSDComputed">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.VBK">
 <summary>Von Bertalanffy growth curvature (VBGF) parameter.</summary>
 <remarks>http://www.fao.org/docrep/w5449e/w5449e05.htm</remarks>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BiomassAvgSzWt">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BiomassSzWt">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.AinLWInput">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.AinLWOutput">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BinLWInput">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BinLWOutput">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LooInput">
 <summary>Length at infinity</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LooOutput">
 <summary>Length at infinity</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.WinfInput">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.WinfOutput">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.t0Input">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.t0Output">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TCatchInput">
 <summary>Age at first capture</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TCatchOutput">
 <summary>Age at first capture</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TmaxInput">
 <summary>Max. age</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TmaxOutput">
 <summary>Max. age</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PSDIncluded">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PSDMortalityType">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PSDFirstWeightClass">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PSDNumWeightClasses">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ClimateType">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.NumPtsMovAvg">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TLCatch">
 <summary>Trophic level of catch</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TL">
 <summary>Trophic level of groups</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.FIB">
 <summary>Fishing in-balance (FIB) index</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.KemptonsQ">
 <summary>Kemptons' Q</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ShannonDiversity">
 <summary>Shannon's diversity index</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.DiversityIndex">
 <summary>User selection of biodiversity indicator</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.BiodiversityIndicator">
 <summary>Value of selected biodiversity indicator</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TotalCatch">
 <summary>Total catch</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathFirstYear">
 <summary>Start year of the Ecopath model</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcopathNumYears">
 <summary>Number of years that the Ecopath model represents</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.South">
 <summary>Southern extent of the EwE model</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.North">
 <summary>Northern extent of the EwE model</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.West">
 <summary>Western extent of the EwE model</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.East">
 <summary>Eastern extent of the EwE model</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IsEcospaceModelCoupled">
 <summary>Is this model coupled to an external model Ecospace model?</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonGroup">
 <summary>Group assigned to a given taxon</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonStanza">
 <summary>Stanza assigned to a given taxon</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonPropBiomass">
 <summary>Taxon biomass proportion</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonPropCatch">
 <summary>Taxon catch proportion</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Phylum">
 <summary>Taxon phylum</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Class">
 <summary>Taxon class</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Order">
 <summary>Taxon order</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Family">
 <summary>Taxon family</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Genus">
 <summary>Taxon genus</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Species">
 <summary>Taxon species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeSAUP">
 <summary>Sea Around Us Project code for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeFB">
 <summary>FishBase code for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeSLB">
 <summary>Sea Life Base code for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeAquaMaps">
 <summary>AquaMaps code for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeAphia">
 <summary>WoRMS code for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeOBIS">
 <summary>OBIS code for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeFAO">
 <summary>FAO code for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeLSID">
 <summary>Life Science indentifier for a species (http://en.wikipedia.org/wiki/LSID)</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Source">
 <summary>URL to the species information</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.SourceKey">
 <summary>Search term for a species</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.LastUpdated">
 <summary>Date that data was last actualized</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.OrganismType">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcologyType">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IUCNConservationStatus">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ExploitationStatus">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.OccurrenceStatus">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonMeanWeight">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonMeanLength">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonMaxLength">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonMeanLifespan">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonWinf">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonvbgfK">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonVulnerabilityIndex">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.TaxonSearchFields">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.GroupTaxa">
 <summary>Taxa assigned to a given group</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Coriolis">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.XVelocity">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.YVelocity">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Estimated">
 <summary>States if a value is estimated by Ewe</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.OtherMortInput">
 <summary>1 - EE</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.IsFished">
 <summary>Helper flag to determine whether a group is fished</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionNumber">
 <summary>No. regions in Ecospace</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYFSelection">
 <summary>Group or fleet index targeted by MSY</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYFSelectionMode">
 <summary><see cref="F:EwEUtils.Core.eVarNameFlags.MSYFSelection"/> interpretation flag, 
 should be one of <see cref="T:EwEUtils.Core.eMSYFSelectionModeType">values</see></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYAssessment">
 <summary>MSY assessment type</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYEquilibriumStepSize">
 <summary>MSY equilibrium step size, as a fractio of 0 to <see cref="F:EwEUtils.Core.eVarNameFlags.MSYMaxFishingRate"/></summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYMaxFishingRate">
 <summary>MSY max F to vary to</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYNumTrialYears">
 <summary>Number of MSY trial years</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.MSYRunLengthMode">
 <summary>Number of MSY trial years</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.AssumeSquareCells">
 <summary>Proj4String</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.ProjectionString">
 <summary>WKT (ESRI) string describing the Ecospace projection</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.Country">
 <summary>Country that a model represents.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosystemType">
 <summary>Type of ecosystem that a model represents (estuary, reef, etc).</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.CodeEcobase">
 <summary>Code of a model in the EcoBase repository.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PublicationDOI">
 <summary>Digital Object Identifier of the publication for this model.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PublicationURI">
 <summary>URI of the publication for this model.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.PublicationReference">
 <summary>Formatted reference to the publication for this model.</summary>
</member>
<member name="F:EwEUtils.Core.eVarNameFlags.EcosimSORWt">
 <summary>Ecosim SOR Weight for groups with fast production.</summary>
</member>
<member name="T:EwEUtils.Core.eDataTypes">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type that indicates a class of data in the EwE core.
</summary>
 <remarks>
 These enums have fixed values since values may be used to identify 
 items in the EwE6 database system.
 </remarks>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eDataTypes.NotSet">
 <summary>
 Data type is not specified.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EwEModel">
 <summary>
 Data belongs to the EwE model.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoPathGroupInput">
 <summary>
 Data belongs to the Ecopath group inputs,
 which are provided to perform a parameter estimation run. 
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoPathGroupOutput">
 <summary>
 Data belongs to the Ecopath group outputs,
 which are produced by a parameter estimation run.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FleetInput">
 <summary>
 Data belongs to the Ecopath fleet inputs,
 which are provided for a parameter estimation run.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoSimScenario">
 <summary>
 Data belongs to an Ecosim scenario.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoSimModelParameter">
 <summary>
 Data belongs to the Ecosim model parameters,
 which instruct how to run an Ecosim scenario.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoSimGroupInput">
 <summary>
 Data belongs to an Ecosim group input.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.Forcing">
 <summary>
 Data belongs to a Time Forcing Function.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EggProd">
 <summary>
 Data belongs to an Egg Production Forcing Function.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.Mediation">
 <summary>
 Data belongs to a Mediation Function.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FishingEffort">
 <summary>
 Data belongs to a Fishing Rate shape.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FishMort">
 <summary>
 Data belongs to a Fishing Mortality shape.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.Stanza">
 <summary>
 Data belongs to an EwE multi-stanza configuration.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoSpaceScenario">
 <summary>
 Data belongs to an Ecospace scenario.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceHabitat">
 <summary>
 Data belongs to an Ecospace habitat.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceGroup">
 <summary>
 Data belongs to an Ecospace group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceFleet">
 <summary>
 Data belongs to an Ecospace fleet.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceMPA">
 <summary>
 Data belongs to an Ecospace MPA.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceModelParameter">
 <summary>
 Data belongs to the Ecospace model parameters,
 which instruct how to run an Ecopace scenario.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceBasemap">
 <summary>
 Data belongs to a cEcospaceModelBasemaps instance.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerImportance">
 <summary>
 Data belongs to an ecospace importance layer instance.
</summary>
 <remarks>The enum value </remarks>
</member>
<member name="F:EwEUtils.Core.eDataTypes.PredPreyInteraction">
 <summary>
 cPredPreyInteraction object
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceTimestepResults">
 <summary>
 Time step results of the currently running Ecospace model
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceGroupOuput">
 <summary>
 Data belongs to Ecospace calculated values for a single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceFleetOuput">
 <summary>
 Data belongs to Ecospace calculated values for a single fleet.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceRegionResults">
 <summary>
 Data belongs to Ecospace calculated values for a single region.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.GroupTimeSeries">
 <summary>
 Data belongs to a time series that applies to groups.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FleetTimeSeries">
 <summary>
 Data belongs to a time series that applies to fleets.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.TimeSeriesDataset">
 <summary>
 Data belongs to a Time Series data set.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MonteCarlo">
 <summary>
 Data belongs to a Ecosim Monte Carlo model parameters.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoSimGroupOutput">
 <summary>
 Data belongs to values calculated by Ecosim for a single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcosimFleetOutput">
 <summary>
 Data belongs to values calculated by Ecosim for a single fleet.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FitToTimeSeries">
 <summary>
 Data belongs to Ecosim Fit To Time Series model parameters.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcotracerScenario">
 <summary>
 Data belongs to an Ecotracer scenario.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcotracerModelParameters">
 <summary>
 Data belongs to Ecotracer model parameters.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcotracerGroupInput">
 <summary>
 Data belongs to an Ecotracer input group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcotracerSimOutput">
 <summary>
 Data belongs to an Ecotracer Ecosim results for a single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcotracerSpaceOutput">
 <summary>
 Data belongs to an Ecotracer Ecospace results for a single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveManager">
 <summary>
 Data belongs to a search objectives manager.
</summary>
 <remarks>
 Search Objectives form the base for the shared search interface 
 ISearchObjective used by Fishing Policy, Ecoseed, MSE and possibly
 other searches. This system is flexible and be extended.
 </remarks>
</member>
<member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveParameters">
 <summary>
 Data belongs to search objectives generic parameters.
</summary>
 <remarks>Don't panic.</remarks>
</member>
<member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveFleetInput">
 <summary>
 Data belongs to search objectives parameters for a single fleet.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveWeights">
 <summary>
 Data belongs to search objective weights.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveGroupInput">
 <summary>
 Data belongs to search objectives parameters for a single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FishingPolicyManager">
 <summary>
 Data belongs to the Fishing Policy search manager.
</summary>
 <remarks>
 Note that the Fishing Policy manager may use the SearchObjectivexxxx data types as well.
 </remarks>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FishingPolicyParameters">
 <summary>
 Data belongs to fishing policy search generic parameters.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.FishingPolicySearchBlocks">
 <summary>
 Data belongs to fishing policy search search blocks settings.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MPAOptManager">
 <summary>
 Data belongs to the MPA optimizations/Ecoseed search manager.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MPAOptOutput">
 <summary>
 Data belongs to the MPA optimizations/Ecoseed results.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MPAOptParameters">
 <summary>
 Data belongs to the MPA optimizations/Ecoseed generic parameters.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEManager">
 <summary>
 Data belons to the Management Strategy Evaluator.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEFleetInput">
 <summary>
 Data belongs to Management Strategy Evaluator parameters for a single fleet.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEGroupInput">
 <summary>
 Data belongs to Management Strategy Evaluator parameters for a single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEOutput">
 <summary>
 Data belongs to Management Strategy Evaluator generic results.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEParameters">
 <summary>
 Data belongs to Management Strategy Evaluator generic parameters.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.PedigreeLevel">
 <summary>
 Data belongs to a single Pedigree level.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.GameData">
 <summary>
 Data belongs to the EwE game engine data.
</summary>    
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoPathStatistics">
 <summary>
 Data belongs to Ecopath statistics.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcoSimStatistics">
 <summary>
 Data belongs to Ecosim statistics.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceStatistics">
 <summary>
 Data belongs to Ecospace statistics.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.ParticleSizeDistribution">
 <summary>
 Data belongs to Particle Size Distribution generic parameters.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerDepth">
 <summary>
 Data belongs to the Ecospace Depth layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMPA">
 <summary>
 Data belongs to the Ecospace Marine Protected Areas layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMPASeed">
 <summary>
 Data belongs to the Ecospace MPA seed layer.
</summary>
 <remarks>
 MPA seeds are used in the MPA optimizations/Ecoseed searches.
 </remarks>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerHabitat">
 <summary>
 Data belongs to the Ecospace Habitat layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerRegion">
 <summary>
 Data belongs to the Ecospace Regions layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerRelPP">
 <summary>
 Data belongs to the Ecospace relative primary production layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerContaminantRelativeDistribution">
 <summary>
 Data belongs to the Ecospace contaminant relative distribution weight layer (formerly RelCin).
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEGroupOutputs">
 <summary>
 Data belongs to Management Strategy Evaluation results for a single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerIBMPackets">
 <summary>
 Data belongs to the Ecospace layer representing the spread and quantities
 of Individual Based Model packets.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerPort">
 <summary>
 Data belongs to the Ecospace layer representing fishing ports.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerSail">
 <summary>
 Data belongs to the Ecospace layer representing cost of sailing.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcosimFleetInput">
 <summary>
 Data belongs to Ecosim input data for single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcosimOutput">
 <summary>
 Data belongs to Ecosim results for single group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEFleetOutputs">
 <summary>
 Data belongs to Management Strategy Evaluation results for a single fleet.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEBiomassStats">
 <summary>
 Data belongs to Management Strategy Evaluation biomass statistical results.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSECatchByGroupStats">
 <summary>
 Data belongs to Management Strategy Evaluation statistical results on catches by group.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSECatchByFleetStats">
 <summary>
 Data belongs to Management Strategy Evaluation statistical results on catches by fleet.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEEffortStats">
 <summary>
 Data belongs to Management Strategy Evaluation statistical results on fishing effort.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMigration">
 <summary>
 Data belongs to the Ecospace Migration layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerAdvection">
 <summary>
 Data belongs to the Ecospace Advection layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.Auxillary">
 <summary>
 Data belongs to Auxillary data.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerDistribution">
 <summary>
 Data belongs to the Ecospace Distribution envelope layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerWind">
 <summary>
 Data belongs to the Ecospace wind layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerTransportRate">
 <summary>
 Data belongs to the Ecospace transport rate layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerFlow">
 <summary>
 Data belongs to the Ecospace flow layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMLD">
 <summary>
 Data belongs to the Ecospace mixed layer depth layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerUpwelling">
 <summary>
 Data belongs to the Ecospace upwelling layer.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.MSEValueTotalStats">
 <summary>
 Data belongs to Management Strategy Evaluation statistical results total value.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.Taxon">
 <summary>
 Data belongs to a taxonomy definition.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.PriceMediation">
 <summary>
 Data belongs to landings mediation function (as opposed to a 'regular', Pred-Prey mediation function.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.LandingInteraction">
 <summary>
 Data belongs to a landings-mediated interaction.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.CapacityMediation">
 <summary>
 Data belongs to a Capacity Mediation.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceEnviroCapacityResponse">
 <summary>
 Data belongs to a IEnviroInputMap
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerContaminantForcingAbs">
 <summary>
 Data belongs to the Ecospace absolute contaminant layer forcing.
</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerIBMAge1Forcing">
 <summary>
 Multi stanza Age 1 (recruitment numbers) forcing for the IBM Model ONLY
 </summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerAdvectionForcing">
 <summary>Direct forcing of the Ecospace advection fields</summary>
</member>
<member name="F:EwEUtils.Core.eDataTypes.External">
 <summary>
 Data belongs to an external, unspecified source.
</summary>
</member>
<member name="T:EwEUtils.Core.eCoreCounterTypes">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated types indicating the EwE counters that define data structure
 sizes in the various models.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.NotSet">
 <summary>Unspecified counter</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nGroups">
 <summary>Number of groups across all models</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nDetritus">
 <summary>Number of detritus groups across all models</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nLivingGroups">
 <summary>Number of living groups across all models</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nFleets">
 <summary>Number of fishing fleets across all models</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nMaxStanza">
 <summary>Max number of groups in a single stanza configuration over all stanza groups</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nMaxStanzaAge">
 <summary>Max age for a stanza group</summary>
 <remarks>Age2(iStanza, m_Stanza.Nstanza(iStanza))</remarks>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nStanzas">
 <summary>Number of stanza configuratons</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nStanzasForStanzaGroup">
 <summary>Number of stanzas for a stanza group</summary>
 <remarks>Nstanza(iStanza)</remarks>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEcosimYears">
 <summary>Number of years to run an Ecosim model</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEcosimTimeSteps">
 <summary>Number of time steps in an Ecosim run</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEcospaceYears">
 <summary>Number of years to run an Ecospace model</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEcospaceTimeSteps">
 <summary>Number time steps in an Ecospace model</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nHabitats">
 <summary>Number of Ecospace habitats</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nRegions">
 <summary>Number of Ecospace regions</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEffortZones">
 <summary>Number of Ecospace effort zones</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nMonths">
 <summary>Number of months per year</summary>
 <remarks>Albeit quite obvious and constant, this value is added to facilitate automatic array resizing.</remarks>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nMPAs">
 <summary>Number of Ecospace MPAs</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTrophicLevels">
 <summary>Number of trophic levels from the Network analysis</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeries">
 <summary>Number of available time series</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeriesApplied">
 <summary>Number of applied time series</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeriesYears">
 <summary>Max number of years over all time series</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeriesDatasets">
 <summary>Number of time series datasets</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nImportanceLayers">
 <summary>Number of importance layers</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEnvironmentalDriverLayers">
 <summary>Number of environmental driver layers</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nGameSimYears">
 <summary>Number of years the game simulation can run for</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nGameSimTimeSteps">
 <summary>Number of timesteps the game simulation can run for</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nGameSimTimeStepsPerYear">
 <summary>Number of timesteps per year</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nRows">
 <summary>Number of rows in the Ecospace basemap</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nCols">
 <summary>Number of columns in the Ecospace basemap</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEcopathAgeSteps">
 <summary>Number of timesteps in the Ecopath Weight, Number and Biomass</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nWeightClasses">
 <summary>Number of weight classes in the particle size distribution</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nSalinityForcingFunctions">
 <summary>Number of forcing function that are for Salinity</summary>
 <remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nNutrientForcingFunctions">
 <summary>Number of forcing function that are for Salinity</summary>
 <remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTempForcingFunctions">
 <summary>Number of forcing function that are for Salinity</summary>
 <remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nPPForcingFunctions">
 <summary>Number of forcing function that are for Primary Producer</summary>
 <remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nGameIterations">
 <summary>The number of iterations running in the game</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTaxon">
 <summary>The number of taxonomy groups</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nTaxonForGroup">
 <summary>The number of taxa assigned to a given group</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nPedigreeVariables">
 <summary>The number of supported pedigree variables</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nCapacityMaps">
 <summary>The number of supported capacity maps</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nMSEBatchTFM">
 <summary>Number of Target Fishing Mort iterations</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nMSEBATCHFixedF">
 <summary>Number of Fixed F iterations</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nMSEBATCHTAC">
 <summary>Number of TAC iterations</summary>
</member>
<member name="F:EwEUtils.Core.eCoreCounterTypes.nEcospaceResultWriters">
 <summary>Number of available Ecospace result writers <seealso cref="T:EwEUtils.Core.IEcospaceResultsWriter"></seealso></summary>
</member>
<member name="T:EwEUtils.Core.eStatusFlags">
 ---------------------------------------------------------------------------
 <summary>
 Public enumerator stating the status of a variable used by cVariableStatus class to state the status of the parameter.
 Used by the data wrapper classes to state the status of a variable see cEcoPathGroupInputs.EEStatus
 </summary>
 <remarks>
 <para>Can be used in combination with eVarNameFlags to tell the status of a parameter</para>
 <para>Mulitple eStatusFlags can be joined together using the bitwise OR operator to signify 
 multiple statuses for a variable.</para>
 </remarks>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eStatusFlags.OK">
 <summary>
 All is well.
 </summary>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.FailedValidation">
 <summary>
 Failed data validation.
 </summary>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.ValueComputed">
 <summary>
 Value is computed from other values.
 </summary>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.InvalidModelResult">
 <summary>
 Model computed an invalid result.
 </summary>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.NotEditable">
 <summary>
 Value is not editable because other related variables imply their value.
 </summary>
 <remarks>
 This flag is also known as ReadOnly (Windows) or BlockedForInput (EwE5).
 </remarks>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.ErrorEncountered">
 <summary>
 Unknown error encountered.
 </summary>
 
</member>
<member name="F:EwEUtils.Core.eStatusFlags.MissingParameter">
 <summary>
 Value should have been provided at the start of a model run.
 </summary>
 <remarks>
 This flag resembles <see cref="F:EwEUtils.Core.eStatusFlags.FailedValidation">FailedValidation</see>
 but the reason for the failure is specific to the flag.
 </remarks>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.CoreHighlight">
 <summary>
 Value should be highlighted as decreed by the core for whatever reason.
 </summary>
 <remarks>
 This can occur when the core determines that particular values have relevant
 links to other values. The core can only know this and can request any GUI
 to hightlight such values.
 </remarks>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.Null">
 <summary>
 Variable is null, its value has not been set.
 </summary>
</member>
<member name="F:EwEUtils.Core.eStatusFlags.Stored">
 <summary>
 Variable is being stored in the EwE database system.
 </summary>
</member>
<member name="T:EwEUtils.Core.eUnitCurrencyType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated types providing currency types.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.NotSet">
 <summary>Unit currency type not set</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.Joules">
 <summary>Currency expressed in j/m²</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.Calorie">
 <summary>Currency expressed in kcal/m²</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.Carbon">
 <summary>Currency expressed in g/m²</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.DryWeight">
 <summary>Currency expressed in dry weight (g/m²)</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.WetWeight">
 <summary>Currency expressed in wet weight (t/km²)</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.CustomEnergy">
 <summary>Custom currency unit</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.Nitrogen">
 <summary>Currency expressed in mg n/m²</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.Phosporous">
 <summary>Currency expressed in mg p/m²</summary>
</member>
<member name="F:EwEUtils.Core.eUnitCurrencyType.CustomNutrient">
 <summary>Custom currency unit</summary>
</member>
<member name="T:EwEUtils.Core.eUnitTimeType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type listing time units.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eUnitTimeType.Custom">
 <summary>User has specified a custom time unit</summary>
</member>
<member name="F:EwEUtils.Core.eUnitTimeType.Year">
 <summary>Time expressed in years</summary>
</member>
<member name="F:EwEUtils.Core.eUnitTimeType.Day">
 <summary>Time expressed in days</summary>
</member>
<member name="T:EwEUtils.Core.eUnitAreaType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated types providing area types.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eUnitAreaType.Custom">
 <summary>Custom area measure</summary>
</member>
<member name="F:EwEUtils.Core.eUnitAreaType.Km2">
 <summary>Area expressed in square km</summary>
</member>
<member name="F:EwEUtils.Core.eUnitAreaType.Mi2">
 <summary>Area expressed in square miles</summary>
</member>
<member name="T:EwEUtils.Core.eUnitMapRefType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated types providing map unit types.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eUnitMapRefType.Custom">
 <summary>Custom area measure</summary>
</member>
<member name="F:EwEUtils.Core.eUnitMapRefType.m">
 <summary>Meters</summary>
</member>
<member name="F:EwEUtils.Core.eUnitMapRefType.km">
 <summary>Kilometers</summary>
</member>
<member name="F:EwEUtils.Core.eUnitMapRefType.dd">
 <summary>Decimal degrees</summary>
</member>
<member name="F:EwEUtils.Core.eQuotaTypes.NoControls">
 <summary>No Quota controls are used</summary>
</member>
<member name="F:EwEUtils.Core.eQuotaTypes.Weakest">
 <summary>Quota options apply to the weakest stock</summary>
</member>
<member name="F:EwEUtils.Core.eQuotaTypes.HighestValue">
 <summary>Quota options apply to the strongest stock plus discards</summary>
</member>
<member name="F:EwEUtils.Core.eQuotaTypes.Selective">
 <summary>Quota options apply to selective fishing</summary>
</member>
<member name="F:EwEUtils.Core.eQuotaTypes.Effort">
 <summary>Quota options apply to effort</summary>
</member>
<member name="T:EwEUtils.Core.eDataSourceTypes">
 -------------------------------------------------------------------
 <summary>
 Supported types of data sources.
</summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eDataSourceTypes.NotSet">
 <summary>No support</summary>
</member>
<member name="F:EwEUtils.Core.eDataSourceTypes.EII">
 <summary>Datasource capable of handling EII formatted data.</summary>
</member>
<member name="F:EwEUtils.Core.eDataSourceTypes.Access2003">
 <summary>Datasource capable of handling MDB formatted data.</summary>
</member>
<member name="F:EwEUtils.Core.eDataSourceTypes.Access2007">
 <summary>Datasource capable of handling ACCDB and MDB formatted data.</summary>
</member>
<member name="F:EwEUtils.Core.eDataSourceTypes.EIIXML">
 <summary>Datasource capable of handling EIIXML formatted data.</summary>
</member>
<member name="F:EwEUtils.Core.eDataSourceTypes.EcoBase">
 <summary>Data importable from EcoBase.</summary>
</member>
<member name="T:EwEUtils.Core.eDatasourceAccessType">
 -------------------------------------------------------------------
 <summary>
 Enumerated type describing the result of datasource access attempts.
</summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Success">
 <summary>Database operation successful</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_CannotSave">
 <summary>Database could not be saved in the indicated location</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_UnknownType">
 <summary>An unknown database type was requested</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_OSUnsupported">
 <summary>System does not have the correct drivers installed to
 support the requested database type</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_Unknown">
 <summary>An unknown error has occurred</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_ReadOnly">
 <summary>No permissions to write to the database</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_TransferTypes">
 <summary>Cannot switch from one type of database to another</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_DeprecatedOperation">
 <summary>Cannot perform requested operation on this type of file</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_FileNotFound">
 <summary>File is not found</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Opened">
 <summary>Deprecated, use <see cref="F:EwEUtils.Core.eDatasourceAccessType.Success">Sccess</see> instead</summary>
</member>
<member name="F:EwEUtils.Core.eDatasourceAccessType.Created">
 <summary>Deprecated, use <see cref="F:EwEUtils.Core.eDatasourceAccessType.Success">Sccess</see> instead</summary>
</member>
<member name="T:EwEUtils.Core.eSearchCriteriaResultTypes">
 -----------------------------------------------------------------------
 <summary>
 Search criteria result types
</summary>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.eCoreComponentType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type, identifying sources of messages being broadcasted by the Core.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.NotSet">
 <summary>The message source is not specified</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.Ecopath">
 <summary>The message originated from the Ecopath module of EwE</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.Ecosim">
 <summary>The message originated from the Ecosim module of EwE</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.Ecospace">
 <summary>The message originated from the Ecospace module of EwE</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.ShapesManager">
 <summary>The message originated from the Forcing shapes manager(s) in EwE</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.DataSource">
 <summary>The message originated from a datasource</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.Core">
 <summary>The message originated from the core itself</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.Plugin">
 <summary>The message originated from a Plugin</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.EcoSimMonteCarlo">
 <summary>The message originated from the Monte Carlo routines in Ecosim</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.EcosimFitToTimeSeries">
 <summary>The message originated from the Fit to Time Series routines in Ecosim</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.TimeSeries">
 <summary>The message originated from a change in loaded Time Series</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.MediatedInteractionManager">
 <summary>The message originated from the pred/prey interaction</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.Ecotracer">
 <summary>The message originated from Ecotracer</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.External">
 <summary>The message originated from an external source (such as the user interface)</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.SearchObjective">
 <summary>The message source is one of the Search Objective classes</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.FishingPolicySearch">
 <summary>The message originated from Fishing Policy Search</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.MSE">
 <summary>Management Strategy Evaluation</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.MPAOptimization">
 <summary>EcoSeed</summary>
</member>
<member name="F:EwEUtils.Core.eCoreComponentType.MSY">
 <summary>The message originated from the MSY module of EwE</summary>
</member>
<member name="T:EwEUtils.Core.eMessageType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type, identifying types of messages being broadcasted by the Core.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMessageType.NotSet">
 <summary>Message type has not been set</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.Any">
 <summary>This message could be of any message type</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.DietComp">
 <summary>Diet Comp out of range</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.DietComp_CorrectTo15Perc">
 <summary>Diet Comp correct to 15 percent prompt</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.EE">
 <summary>EE out of range</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.TooManyMissingParameters">
 <summary>Parameters could not be computed because of missing data in input parameters</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.NoCatchForFleet">
 <summary>No Catch for a Fishing Fleet</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.ErrorEncountered">
 <summary>Error encountered during model run</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.DataValidation">
 <summary>Data validation message</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.DataModified">
 <summary>Data from the source has been modified</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.DataAddedOrRemoved">
 <summary>Data has been added to, or removed from, the source</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.DataImport">
 <summary>Data import related issue</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.DataExport">
 <summary>Data export related issue</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.EcospaceRunCompleted">
 <summary>Ecospace has completed a model run</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.StateNotMet">
 <summary>Sent by any message source when the State Monitor's state not met to run a method</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.MSERunCompleted">
 <summary>MSE has completed a model run of some sort</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.MSEBatch_IterationDataUpdated">
 <summary>MSE Batch has updated the iteration values</summary>
 <remarks>
 This was added to deal with a bug in the interface that caused the grid to assert 
 when it refreshed in response to edits. This prevents that by only updating when the message is of this type.
 </remarks>
</member>
<member name="F:EwEUtils.Core.eMessageType.GISOperation">
 <summary>A GIS operation was performed</summary>
</member>
<member name="F:EwEUtils.Core.eMessageType.GlobalSettingsChanged">
 <summary>EwE-wide settings have changed</summary>
</member>
<member name="T:EwEUtils.Core.eMessageImportance">
 ---------------------------------------------------------------------------
 <summary>
 Flag indicating the relative importance/severity of a message.
</summary>
 <remarks>
 Per 21 November 2014 importance values are ordered by severity.
 </remarks>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMessageImportance.Maintenance">
 <summary>Maintenance messages typically indicate a synchronization event
 in the EwE application</summary>
</member>
<member name="F:EwEUtils.Core.eMessageImportance.Progress">
 <summary>Progress messages typically indicate incremental status
 information about a lengthy operation</summary>
</member>
<member name="F:EwEUtils.Core.eMessageImportance.Information">
 <summary>Information messages typically indicate an event that may be of
 interest to a human user of EwE</summary>
</member>
<member name="F:EwEUtils.Core.eMessageImportance.Question">
 <summary>Questions are used to poll the user for regular info</summary>
</member>
<member name="F:EwEUtils.Core.eMessageImportance.Warning">
 <summary>Warning messages indicating that the system has run in a problem
 and could not complete an operation</summary>
</member>
<member name="F:EwEUtils.Core.eMessageImportance.Critical">
 <summary>Critical messages indicate the the system has run into an error
 that it could not recover from. This is the most severe type of message</summary>
</member>
<member name="T:EwEUtils.Core.eMessageReply">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type that defines possible replies to a <see cref="T:EwEUtils.Core.IFeedbackMessage"/>.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMessageReply.CANCEL">
 <summary>This reply indicates that the situation pertaining to the message has to be aborted</summary>
</member>
<member name="F:EwEUtils.Core.eMessageReply.YES">
 <summary><para>This reply indicates that the situation pertaining to the message is positively confirmed.</para>
 <para>A YES reply is identical to an <see cref="F:EwEUtils.Core.eMessageReply.OK"/> reply.</para></summary>
</member>
<member name="F:EwEUtils.Core.eMessageReply.OK">
 <summary><para>This reply indicates that the situation pertaining to the message is positively confirmed.</para>
 <para>An OK reply is identical to a <see cref="F:EwEUtils.Core.eMessageReply.YES"/> reply.</para></summary>
</member>
<member name="F:EwEUtils.Core.eMessageReply.NO">
 <summary>This reply indicates that the situation pertaining to the message is negatively confirmed</summary>
</member>
<member name="T:EwEUtils.Core.eMessageReplyStyle">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type that defines possible replie styles that a 
 <see cref="T:EwEUtils.Core.IFeedbackMessage"/> can handle.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMessageReplyStyle.OK_CANCEL">
 <summary>
 The reply expected by a message with this reply style is either 
 <see cref="F:EwEUtils.Core.eMessageReply.OK"/> or <see cref="F:EwEUtils.Core.eMessageReply.CANCEL"/>.
</summary>
</member>
<member name="F:EwEUtils.Core.eMessageReplyStyle.YES_NO">
 <summary>
 The reply expected by a message with this reply style is either 
 <see cref="F:EwEUtils.Core.eMessageReply.YES"/> or <see cref="F:EwEUtils.Core.eMessageReply.NO"/>.
</summary>
</member>
<member name="F:EwEUtils.Core.eMessageReplyStyle.YES_NO_CANCEL">
 <summary>
 The reply expected by a message with this reply style must be 
 <see cref="F:EwEUtils.Core.eMessageReply.YES"/>, <see cref="F:EwEUtils.Core.eMessageReply.NO"/> 
 or <see cref="F:EwEUtils.Core.eMessageReply.CANCEL"/>.
</summary>
</member>
<member name="F:EwEUtils.Core.eMessageReplyStyle.OK">
 <summary>
 The reply expected by a message with this reply style can only be 
 <see cref="F:EwEUtils.Core.eMessageReply.OK"/>.
</summary>
</member>
<member name="T:EwEUtils.Core.eForcingFunctionApplication">
 ---------------------------------------------------------------------------
 <summary>
 Enumerator for forcing functions, describing the target of a Predator/Prey or 
 Fleet/Group interaction forcing application.
</summary>
 ---------------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.eIUCNConservationStatusTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating the IUCN Red List of Threatened Species conservation categories.
</summary>
 <remarks>
 http://www.eoearth.org/article/IUCN_Red_List_Criteria_for_Endangered
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.NotSet">
 <summary>Conservation status has not been specified</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.NotEvaluated">
 <summary>Not Evaluated (NE)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.DataDeficient">
 <summary>Data Deficient (DD)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.LeastConcern">
 <summary>Least Concern (LC)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.NearThreatened">
 <summary>Near Threatened (NT)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.Vulnerable">
 <summary>Vulnerable (VU)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.Endangered">
 <summary>Endangered (EN)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.CriticallyEndangered">
 <summary>Critically Endangered (CR)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.ExtinctInWild">
 <summary>Extinct in the Wild (EW)</summary>
</member>
<member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.Extinct">
 <summary>Extinct (EX)</summary>
</member>
<member name="T:EwEUtils.Core.eEcologyTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating supported taxonomy Habitat classifications, where 
 taxa prefer to dwell. Not necessarily related to Ecospace habitats.
</summary>
 <remarks>
 As defined in FishBase (http://www.fishbase.org)
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eEcologyTypes.NotSet">
 <summary>Ecology type has not been specified</summary>
</member>
<member name="F:EwEUtils.Core.eEcologyTypes.LandBased">
 <summary>Taxon occurs on land</summary>
 <remarks>To be specified further. Where on land? In a tree? A cave? A sub-urban dwelling made of clay?</remarks>
</member>
<member name="T:EwEUtils.Core.eOccurrenceStatusTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating supported taxonomy Occurrence classifications.
</summary>
 <remarks>
 As defined in FishBase (http://www.fishbase.org)
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eOccurrenceStatusTypes.NotSet">
 <summary>Occurrence status has not been specified</summary>
</member>
<member name="T:EwEUtils.Core.eOrganismTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating supported taxonomy Organism classifications.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eOrganismTypes.NotSet">
 <summary>Organism type has not been specified</summary>
</member>
<member name="F:EwEUtils.Core.eOrganismTypes.Other">
 <summary>Organism type does not fit existing classifications</summary>
</member>
<member name="T:EwEUtils.Core.eExploitationTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating FAO classifications of commercial exploitation of
 species.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.NotSet">
 <summary>Exploitation status is unknown</summary>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.NotAssessed">
 <summary>Exploitation status is not assessed</summary>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.NotExploited">
 <summary>Not being exploited</summary>
 <remarks>Wouldn't that be nice...?</remarks>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.UnderExploited">
 <summary>
 Undeveloped or new fishery. Believed to have a significant potential 
 for expansion in total production.
</summary>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.ModeratelyExploited">
 <summary>
 Exploited with a low level of fishing effort. Believed to have some 
 limited potential for expansion in total production.
</summary>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.FullyExploited">
 <summary>The fishery is operating at or close to an optimal yield level, 
 with no expected room for further expansion
</summary>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.OverExploited">
 <summary>The fishery is being exploited at above a level that is believed 
 to be sustainable in the long term, with no potential room for further 
 expansion and a higher risk of stock depletion/collapse</summary>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.Depleted">
 <summary>Catches are well below historical levels, irrespective of the 
 amount of fishing effort exerted</summary>
</member>
<member name="F:EwEUtils.Core.eExploitationTypes.Recovering">
 <summary>Catches are again increasing after having been depleted</summary>
</member>
<member name="T:EwEUtils.Core.eAutoUpdateTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating possible automated update statuses.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eAutoUpdateTypes.Checking">
 <summary>Checking for possible update</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateTypes.Downloading">
 <summary>Downloading update</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateTypes.Done">
 <summary>Update done</summary>
</member>
<member name="T:EwEUtils.Core.eAutoUpdateResultTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating possible automated update results.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_NoActionRequired">
 <summary>All good. Blue skies, happy children, money in the bank; the works - no need to leave the couch</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_NoEwEComponent">
 <summary>Indicated component is not part of the auto-update structure</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_Updated">
 <summary>Component successfully updated</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanMigrate">
 <summary>A migration is available</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanUpdate">
 <summary>An update is available</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Connection">
 <summary>Update webservice could not be connected</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Download">
 <summary>File failed to download</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Replace">
 <summary>Failed to replace a plug-in on the system</summary>
</member>
<member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Generic">
 <summary>A generic error occurred</summary>
</member>
<member name="T:EwEUtils.Core.eEcospaceCapacityCalType">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating supported Ecospace habitat foraging capacity calculation methods.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eEcospaceCapacityCalType.Input">
 <summary>Default; base capacity is obtained from input maps.</summary>
</member>
<member name="F:EwEUtils.Core.eEcospaceCapacityCalType.EnvResponses">
 <summary>Include environmental responses in the capacity calculations.</summary>
</member>
<member name="F:EwEUtils.Core.eEcospaceCapacityCalType.Habitat">
 <summary>Include habitats in the capacity calculations.</summary>
</member>
<member name="T:EwEUtils.Core.eEcospaceResultsAverageType">
 <summary>
 Averaging/summary time periods for the Ecospace regions results files
 </summary>
 <remarks></remarks>
</member>
<member name="T:EwEUtils.Core.eMSEBatchIterCalcTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating supported types of MSE Batch runs.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMSEBatchIterCalcTypes.Percent">
 <summary>To document</summary>
</member>
<member name="F:EwEUtils.Core.eMSEBatchIterCalcTypes.UpperLowerValues">
 <summary>To document</summary>
</member>
<member name="T:EwEUtils.Core.eMSYFSelectionModeType">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating how the MSY selects the groups that will have 
 their F varied.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMSYFSelectionModeType.Fleets">
 <summary>All Groups that are fishing by this fleet will have there 
 F varied. F for all other groups will remain at Ecopath base F</summary>
</member>
<member name="F:EwEUtils.Core.eMSYFSelectionModeType.Groups">
 <summary>Only this group will have its F varied. F for all other 
 groups will remain at Ecopath base F</summary>
</member>
<member name="T:EwEUtils.Core.eMSYAssessmentTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating the supported types of MSY assessments.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMSYAssessmentTypes.StationarySystem">
 <summary>MSY assessment with frozen pools</summary>
</member>
<member name="F:EwEUtils.Core.eMSYAssessmentTypes.FullCompensation">
 <summary>Full system assessment</summary>
</member>
<member name="T:EwEUtils.Core.eMSYRunTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating types of supported MSY runs.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMSYRunTypes.SingleRunMSY">
 <summary>MSY is running for a single Group or Fleet, in all supported
 <see cref="T:EwEUtils.Core.eMSYAssessmentTypes">assessment types</see></summary>
</member>
<member name="F:EwEUtils.Core.eMSYRunTypes.FMSY">
 <summary>MSY is running the FMSY. Looping over all the groups</summary>
</member>
<member name="T:EwEUtils.Core.eMSYRunLengthModeTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating how the MSY selects the groups that will have there F varied
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eMSYRunLengthModeTypes.FixedF">
 <summary>MSY is running to a fixed (relative) F</summary>
</member>
<member name="F:EwEUtils.Core.eMSYRunLengthModeTypes.ToDepletion">
 <summary>MSY is running until all catches are depleted</summary>
</member>
<member name="T:EwEUtils.Core.eMSYRunStates">
 <summary>
 Run states of the MSE 
</summary>
 <remarks>Passed out via the MSEProgressDelegate</remarks>
</member>
<member name="T:EwEUtils.Core.TriState">
 -----------------------------------------------------------------------
 <summary>
 Alternative enumerator to Microsoft.VisualBasic.TriState, added for Mono compatibility.
</summary>
 <remarks>
 The Microsoft.VisualBasic assembly is known to cause problems under Mono and should not be used.
 For full Mono compliance this definition of TriState should be used instead.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Core.eAutosaveTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating aspects of EwE that can save automatically.
</summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.NotSet">
 <summary>Hmm</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.Ecopath">
 <summary>Ecopath category</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.EcopathResults">
 <summary>Ecopath run results</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.Ecosim">
 <summary>Ecosim category</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.EcosimResults">
 <summary>Ecosim run results</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.MonteCarlo">
 <summary>Monte Carlo results</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.MSE">
 <summary>MSE results</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.MSY">
 <summary>MSY results</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.Ecospace">
 <summary>Ecospace category</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.EcospaceResults">
 <summary>Ecospace run results</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.MPAOpt">
 <summary>MPA optimizations</summary>
</member>
<member name="F:EwEUtils.Core.eAutosaveTypes.Ecotracer">
 <summary>Ecotracer run results</summary>
</member>
<member name="T:EwEUtils.Core.eVerboseLevel">
 <summary>
 Enumerated type stating supported levels of detail for the content of log files.
</summary>
</member>
<member name="F:EwEUtils.Core.eVerboseLevel.Standard">
 <summary>Log all generic errors</summary>
</member>
<member name="F:EwEUtils.Core.eVerboseLevel.Detailed">
 <summary>Log details to track application flow in more detail</summary>
</member>
<member name="T:EwEUtils.Core.eShapeFunctionType">
 <summary>
 The type of function used to create a shape.
</summary>
<remarks>These enum values are stored in the database. Please do not 
alter the numerical value below, but feel free to add new function 
types.</remarks>
</member>
<member name="T:EwEUtils.Core.eTaxonClassificationType">
 <summary>Enumerated type, identifying taxonomic classification searchable fields.</summary>
</member>
<member name="T:EwEUtils.Core.cLog">
 <summary>
 Class encapsulating writing of messages to a log file.
 </summary>
</member>
<member name="P:EwEUtils.Core.cLog.VerboseLevel">
 -----------------------------------------------------------------------
 <summary>
 Get/set the level of message detail that the log should register.
 </summary>
 <remarks>Several log events can be tagged with a <see cref="T:EwEUtils.Core.eVerboseLevel">verbose level</see>,
 which is measured against the level of detail that a user wants to
 include in the log to determine whether event will be written to the log.</remarks>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Core.cLog.LogFile">
 -----------------------------------------------------------------------
 <summary>
 Get the name of the current log file.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.InitLog(System.String,System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Start a new log file with the model name as part of the log file name
 </summary>
 <param name="strModelPath">File path to the model to create a log file for.</param>
 <param name="typeLogWriter">Optional type, inherited from <see cref="T:EwEUtils.ILogWriter"/>,
 of the type of log writer to use. If nothing is specified the <see cref="T:EwEUtils.Core.cXMLLogWriter">default 
 XML log file writer</see> will be used.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.Write(System.Exception,EwEUtils.Core.eVerboseLevel,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write an <see cref="T:System.Exception"/> to the log
 </summary>
 <param name="theException">Exception to write to the log.</param>
 <param name="level"><see cref="T:EwEUtils.Core.eVerboseLevel">Verbose level</see>.</param>
 <param name="strMsg">Optional text to add.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.Write(System.Exception,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write an <see cref="T:System.Exception"/> to the log at 
 <see cref="F:EwEUtils.Core.eVerboseLevel.Standard">standard verbose level</see>.
 </summary>
 <param name="theException">Exception to write to the log.</param>
 <param name="strDetail">Optional text to add.</param>
 <remarks>
 This will log the exception text and all nested exceptions.
</remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.Write(EwEUtils.Core.IMessage,EwEUtils.Core.eVerboseLevel,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write a <see cref="T:EwEUtils.Core.IMessage"/> to the log.
 </summary>
 <param name="message">The <see cref="T:EwEUtils.Core.IMessage"/> to write.</param>
 <param name="level"><see cref="T:EwEUtils.Core.eVerboseLevel">Verbose level</see>.</param>
 <param name="strDetail">Optional text to add.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.Write(EwEUtils.Core.IMessage,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write a <see cref="T:EwEUtils.Core.IMessage"/> to the log at <see cref="F:EwEUtils.Core.eVerboseLevel.Standard"/> level.
 </summary>
 <param name="message">The <see cref="T:EwEUtils.Core.IMessage"/> to write.</param>
 <param name="strDetail">Optional text to add.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.Write(System.String,EwEUtils.Core.eVerboseLevel)">
 -----------------------------------------------------------------------
 <summary>
 Write a string to the application log.
 </summary>
 <param name="msg">Message string to write.</param>
 <param name="level"><see cref="T:EwEUtils.Core.eVerboseLevel">Verbose level</see>.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.Write(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write a string to the application log.
 </summary>
 <param name="msg">Message string to write.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.GetWriter">
 -----------------------------------------------------------------------
 <summary>
 Singleton interface for creating a <see cref="T:EwEUtils.ILogWriter"/> instance
 </summary>
 <returns>A ILogWriter instance that can be opened and written to.</returns>
 <remarks>The log writer will write information for the model specified
 in <see cref="M:EwEUtils.Core.cLog.InitLog(System.String,System.Type)"/>.</remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.AcquireWriterLock">
 -----------------------------------------------------------------------
 <summary>
 Aquire a critical section writer lock to the log file to initiate a
 write operation.
 </summary>
 <returns>True if a lock was acquired.</returns>
 <remarks>
 <para>ReaderWriterLock.AcquireWriterLock() will throw an exception if it 
 times out! This keeps the exception handling out of the main code.</para>
 <para>The writer lock must be released using <see cref="M:EwEUtils.Core.cLog.ReleaseWriterLock"/>.</para>
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.ReleaseWriterLock">
 -----------------------------------------------------------------------
 <summary>
 Release a critical section writer lock to the log file previously 
 obtained via <see cref="M:EwEUtils.Core.cLog.AcquireWriterLock"/>.
 write operation.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Core.cLog.WriteTextToFile(System.String,System.Text.StringBuilder,System.Boolean,System.String)">
 <summary>
 Writes a load of text to a text file, obliterating anything in its way.
 </summary>
 <param name="strFilename"></param>
 <param name="sb"></param>
 <param name="strHeader"></param>
 <remarks></remarks>
</member>
<member name="M:EwEUtils.Core.cLog.WriteArrayToFile(System.String,System.Single[],System.String)">
 <summary>
 Append the contents of a singly dimensioned array to a csv file. Each call is a new line in the file.
 </summary>
 <param name="strFilename">Name of the file to append</param>
 <param name="array">Array whose contents get written to new line in the file</param>
 <remarks>Used for debugging to test the contents of an array against the original code
 the data is appended so that it can be written to multiple time each call is a new line
 </remarks>
</member>
<member name="M:EwEUtils.Core.cLog.WriteGroupMapToFile(System.String,System.Single[0:,0:,0:],System.Int32,System.String)">
 <summary>
 Append the contents of a 3 "map" array to file. The data will be written row, col, group. Each call is a new block in the file.
 </summary>
 <param name="strFilename">Name of the file to append</param>
 <param name="array">Array whose contents get written to new line in the file</param>
 <remarks>Used for debugging to test the contents of an array against the original code
 the data is appended so that it can be written to multiple time each call is a new block
 </remarks>
</member>
<member name="M:EwEUtils.Core.cLog.WriteArrayToFile(System.String,System.Double[],System.String)">
 <summary>
 Append the contents of a singly dimensioned array to a csv file. Each call is a new line in the file.
 </summary>
 <param name="strFilename">Name of the file to append</param>
 <param name="array">Array whose contents get written to new line in the file</param>
 <remarks>Used for debugging to test the contents of an array against the original code
 the data is appended so that it can be written to multiple time each call is a new line
 </remarks>
</member>
<member name="M:EwEUtils.Core.cLog.WriteMatrixToFile(System.String,System.Single[0:,0:],System.String)">
 <summary>
 Append the contents of a matrix array to a csv file. Each call is a new block in the file.
 </summary>
 <param name="strFilename">Name of the file to append</param>
 <param name="array">Array whose contents get written to new line in the file</param>
 <remarks>Used for debugging to test the contents of an array against the original code
 the data is appended so that it can be written to multiple time each call is a new block
 </remarks>
</member>
<member name="M:EwEUtils.Core.cLog.WriteMatrixToFile(System.String,System.Single[0:,0:,0:],System.String)">
 <summary>
 Append the contents of a 3 dimensional array to a csv file. Each call is a new block in the file.
 </summary>
 <param name="strFilename">Name of the file to append</param>
 <param name="array">Array whose contents get written to new line in the file</param>
 <remarks>Used for debugging to test the contents of an array against the original code
 the data is appended so that it can be written to multiple time each call is a new block
 </remarks>
</member>
<member name="T:EwEUtils.Core.cXMLLogWriter">
 <summary>
 XML writer for appening data to the end of an XML log file
 </summary>
 <remarks>This class appends XML messages to the end of a log file. XML writters do not like to append data so it has to jump through a bunch of hoops to do this.</remarks>
</member>
<member name="F:EwEUtils.Core.cXMLLogWriter.MAX_LOG_SIZE">
 <summary>
 Max size of the log file in bytes. One megabyte
 </summary>
 <remarks></remarks>
</member>
<member name="M:EwEUtils.Core.cXMLLogWriter.Open">
 <summary>
 Open the XML stream
 </summary>
</member>
<member name="M:EwEUtils.Core.cXMLLogWriter.CreateNew">
 <summary>
 If the log file does not exist then create a new log and write out the xml header info. Otherwise just leave the file as it is.
 </summary>
 <remarks>This is call any time a file is opend to make sure the file exists. 
 This way if the directory that contains the log files is cleared out then a new log file will be created next time it is needed.
 </remarks>
</member>
<member name="M:EwEUtils.Core.cXMLLogWriter.FindDocumentEnd">
 <summary>
 Find the end closing doc xml tag at the end of the log file
 </summary>
 <remarks>If the doc tag is found this will move the file cursor to the start of the tag. 
 This erases the tag from the file. The tag is re-written when the file is closed. 
 If no doc tag is found this will leave the file cursor at the end of the file for appending the new data.</remarks>
</member>
<member name="M:EwEUtils.Core.cXMLLogWriter.SeekBack(System.String@)">
 <summary>
 Seek backwards in the filestream for a character
 </summary>
</member>
<member name="M:EwEUtils.Core.cXMLLogWriter.DeleteLargeLogFiles">
 <summary>
 Delete log files greater than MAX_LOG_SIZE (1mb).
 </summary>
 <remarks></remarks>
</member>
<member name="T:EwEUtils.Database.cEwEDatabase">
 -----------------------------------------------------------------------
 <summary>
 Generic base class for implementing a DBMS-specific EwE database
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter">
 -------------------------------------------------------------------
 <summary>
 Helper class that eases the process of adding records to a table.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_db">
 <summary>Database to write to</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_strTable">
 <summary>Table in the database to write to</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_ds">
 <summary>DataSet contains a mirror of the indicated table</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_dt">
 <summary>DataTable that mirrors the indicated table</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_apt">
 <summary>Adapter to sync table content back and forth</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.#ctor(EwEUtils.Database.cEwEDatabase@,System.String)">
 ---------------------------------------------------------------
 <summary>
 <para>Constructor, initializes a new instance of a cEwEDbWriter.</para>
 </summary>
 <param name="db">The <see cref="T:EwEUtils.Database.cEwEDatabase">cEwEDatabase</see> to read from.</param>
 <param name="strTable">The name of the table to link to.</param>
 <remarks>
 <para>This method will attempt to connect and read the table into its internal
 structures. It might be prudent to validate whether the instance is connected
 by calling <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.IsConnected">IsConnected</see> prior to using it.</para>
 </remarks>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Dispose">
 ---------------------------------------------------------------
 <summary>
 Trash me!
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Connect(EwEUtils.Database.cEwEDatabase@,System.String)">
 ---------------------------------------------------------------
 <summary>
 Attempts to connect to the database and read the table data.
 </summary>
 <param name="db">The <see cref="T:EwEUtils.Database.cEwEDatabase">cEwEDatabase</see> to read from.</param>
 <param name="strTable">The name of the table to link to.</param>
 <returns>True if connected.</returns>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Commit">
 ---------------------------------------------------------------
 <summary>
 Commit all pending changes in the cEwEDBWriter without closing
 the writer; the writer is left open for further database operations.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Disconnect(System.Boolean)">
 ---------------------------------------------------------------
 <summary>
 Disconnects the cEwEDBWriter from the database.
 </summary>
 <param name="bSaveChanges">States whether changes need to be saved (true)
 or discarded (false).</param>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.IsConnected">
 ---------------------------------------------------------------
 <summary>
 Returns whether the cEwEDBWriter is currently <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Connect(EwEUtils.Database.cEwEDatabase@,System.String)">connected</see>.
 </summary>
 <returns>True if connected.</returns>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.IsDisposed">
 ---------------------------------------------------------------
 <summary>
 Returns whether the cEwEDBWriter ahs been disposed
 ''' </summary>
 <returns>True if disposed.</returns>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.NewRow">
 ---------------------------------------------------------------
 <summary>
 Returns an empty row for the given table to populate values into.
 </summary>
 <returns>An empty row</returns>
 <remarks>Note that this empty row is not yet added to the table. 
 If the row is populated to satisfaction, call <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.AddRow(System.Data.DataRow)">AddRow</see>
 to add it to the the list of rows waiting to be added to the database.</remarks>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.AddRow(System.Data.DataRow)">
 ---------------------------------------------------------------
 <summary>
 Adds a row previously obtained from <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.NewRow">NewRow</see>
 to the list of rows waiting to be added to the database.
 </summary>
 <remarks>
 <para>This method will preserve and re-align a sequence field if specified
 in the <see cref="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter">Constructor</see>.</para>
 <para>Use <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.RemoveRow(System.Data.DataRow)">RemoveRow</see> to protect the
 row sequence during deletes.</para>
 </remarks>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.RemoveRow(System.Data.DataRow)">
 ---------------------------------------------------------------
 <summary>
 Returns an arbitrary row maintained in the writer.
 </summary>
 <param name="drow">The datarow to delete.</param>
 <returns>The row.</returns>
 <remarks>
 <para>This method will preserve and re-align a sequence field if specified
 in the <see cref="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter">Constructor</see>.</para>
 <para>Use <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.AddRow(System.Data.DataRow)">AddRow</see> to protect the
 row sequence during additions.</para>
 </remarks>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.GetRow(System.Int32)">
 ---------------------------------------------------------------
 <summary>
 Returns an arbitrary row maintained in the writer
 </summary>
 <param name="nRow">The row number to retrieve</param>
 <returns>The row</returns>
 <remarks>This method might not be necessary?</remarks>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Finalize">
 ---------------------------------------------------------------
 <summary>
 Overridden to close the cEwEDbWriter if not already closed.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.GetDataTable">
 ---------------------------------------------------------------
 <summary>
 Get a reference to the DataTable for the current writer.
 </summary>
 <returns></returns>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.GetTableName">
 ---------------------------------------------------------------
 <summary>
 Get the table name of the writer.
 </summary>
 <returns></returns>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.FixUnwantedDBNulls(System.Data.DataRow@)">
 ---------------------------------------------------------------
 <summary>
 Helper method; replaces DBNull values that are specified as not 
 Nullable in the underlying Access database schema with the default 
 value in the schema.
 </summary>
 <param name="drow">The row to fix.</param>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.FixStringLengths(System.Data.DataRow)">
 ---------------------------------------------------------------
 <summary>
 Helper method; replaces DBNull values that are specified as not 
 nullable in the underlying Access database schema with the default 
 value in the schema.
 </summary>
 <param name="drow">The row to fix.</param>
 ---------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_sVersion">
 <summary>Current database version.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_strEwEversion">
 <summary>EwE version that produces the current database version.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_bIsReadonly">
 <summary>Database read-only state.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_strDirectory">
 <summary>Directory associated with the database.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cDBVERSION_EWE5_MIN">
 <summary>Oldest EwE5 version number supported</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cDBVERSION_EWE5_MAX">
 <summary>Newest EwE5 version number supported</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.Create(System.String,System.String,System.Boolean,EwEUtils.Core.eDataSourceTypes,System.String)">
 -------------------------------------------------------------------
 <summary>
 Create a new database.
 </summary>
 <param name="strDatabase">The database to create.</param>
 <param name="strModelName">Name of the new model.</param>
 <param name="strAuthor">Name of the author to add. May be omitted.</param>
 <param name="databaseType">Type of the database to create. May be omitted.</param>
 <param name="bOverwrite">States whether an existing database may be overwritten.</param>
 <returns>True of created succesfully.</returns>
 <remarks>Note that this will NOT open the newly created database.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.Open(System.String,EwEUtils.Core.eDataSourceTypes,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Open a connection to a database.
 </summary>
 <param name="strDatabase">The database to open.</param>
 <param name="databaseType">Type to use to open the database. Set this
 to 'NotSet' to auto-detect the database type.</param>
 <returns>True if connected succesfully.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.Close">
 -------------------------------------------------------------------
 <summary>
 Close an open connection.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.Name">
 -------------------------------------------------------------------
 <summary>
 Get the name of the connected database.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.SaveAs(System.String,System.String,System.Boolean,EwEUtils.Core.eDataSourceTypes)">
 -------------------------------------------------------------------
 <summary>
 Save a given database to a new destination, and open this new database.
 </summary>
 <param name="strDatabaseTo">Target database name.</param>
 <param name="strModelName">New name to assign to the model.</param>
 <param name="bOverwrite">States whether any model in the way will be obliterated.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.IsReadOnly">
 -------------------------------------------------------------------
 <summary>
 Get/set whether the database is read-only.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes">
 -------------------------------------------------------------------
 <summary>
 Enumberated type, used to indicate database compatibility modes
 </summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.Unknown">
 <summary>Combatibility unknown. Most likely the accessed file is not an EwE database.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.TooOld">
 <summary>An older database, too old to be imported.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.Importable">
 <summary>An older database that can be imported.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.EwE6">
 <summary>EwE6 database that is supported.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.Future">
 <summary>A database that is of a newer format and is not supported.</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.Compatibility">
 -------------------------------------------------------------------
 <summary>
 States the level of compatibility with the EwE code.
 </summary>
 <returns>A <see cref="T:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes">database compatibility</see>
 indicator.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.Compact(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Compact an EwE database.
 </summary>
 <param name="strFileFrom">Source database to compact.</param>
 <param name="strFileTo">Target database to compact to. If left 
 blank, the source database is replaced with a compacted version.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.CanCompact(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns if a compact engine is available for the underlying database.
 </summary>
 <param name="strConnectionFrom">Compact source.</param>
 <param name="strConnectionTo">Compact target.</param>
 <returns>True if a compact engine is available for the underlying 
 database.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetConnection">
 -------------------------------------------------------------------
 <summary>
 Returns the current database connection.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.IsConnected">
 -------------------------------------------------------------------
 <summary>
 States whether there is a database connection that is open.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.CanConnect(EwEUtils.Core.eDataSourceTypes)">
 -------------------------------------------------------------------
 <summary>
 Returns whether the database can connect to an indicated type.
 </summary>
 <param name="dst">The datasource type to test.</param>
 <returns>True if the OS can connect to a given datasource type.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.Directory">
 -------------------------------------------------------------------
 <summary>
 Get a directory associated with this database.
 </summary>
 <seealso cref="P:EwEUtils.Database.cEwEDatabase.Extension"/>
 <seealso cref="P:EwEUtils.Database.cEwEDatabase.FileName"/>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.FileName">
 -------------------------------------------------------------------
 <summary>
 Get a file name associated with this database, excluding the
 file extension.
 </summary>
 <seealso cref="P:EwEUtils.Database.cEwEDatabase.Extension"/>
 <seealso cref="P:EwEUtils.Database.cEwEDatabase.Directory"/>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.Extension">
 -------------------------------------------------------------------
 <summary>
 Get a file extension associated with this database.
 </summary>
 <seealso cref="P:EwEUtils.Database.cEwEDatabase.FileName"/>
 <seealso cref="P:EwEUtils.Database.cEwEDatabase.Directory"/>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_transaction">
 <summary>The current transaction, if any.</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.BeginTransaction">
 -------------------------------------------------------------------
 <summary>
 Begins a transaction for the current <see cref="M:EwEUtils.Database.cEwEDatabase.GetConnection">Connection</see>.
 </summary>
 <returns>True if successful.</returns>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.RollbackTransaction"/>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.CommitTransaction(System.Boolean)"/>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.CommitTransaction(System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Commits a transaction previously initiated via <see cref="M:EwEUtils.Database.cEwEDatabase.BeginTransaction">BeginTransaction</see>.
 </summary>
 <param name="bRollbackOnError">Flag stating whether the transaction needs
 to automatically rollback when the commit process fails.</param>
 <returns>True if the commit operation succeeded.</returns>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.BeginTransaction"/>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.RollbackTransaction"/>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.RollbackTransaction">
 -------------------------------------------------------------------
 <summary>
 Commits a transaction to the current <see cref="M:EwEUtils.Database.cEwEDatabase.GetConnection">Connection</see>.
 </summary>
 <returns></returns>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.BeginTransaction"/>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.CommitTransaction(System.Boolean)"/>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.Transaction">
 -------------------------------------------------------------------
 <summary>
 Helper method; internally exposes the current active transaction.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReleaseCachedWriters">
 -------------------------------------------------------------------
 <summary>
 Helper method; release the cache of database writers.
 </summary>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.BeginTransaction"/>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.RollbackTransaction"/>
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.CommitTransaction(System.Boolean)"/>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.CreateDBCommand(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns an <see cref="T:System.Data.IDbCommand"/> for the current DBMS
 </summary>
 <param name="strSQL">Query to create the IDbCommand with.</param>
 <returns>Nothing if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetReader(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.Data.IDataReader"/> with a collection
 of readonly records from the currently open connection.
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.ReleaseReader(System.Data.IDataReader)"/>
 </summary>
 <param name="strSQL">The query to obtain the records.</param>
 <returns></returns>
 <remarks>The obtained IDataReader should be released via <see cref="M:EwEUtils.Database.cEwEDatabase.ReleaseReader(System.Data.IDataReader)"/>.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReleaseReader(System.Data.IDataReader)">
 -------------------------------------------------------------------
 <summary>
 Releases the set of readonly records previously obtained by calling
 <see cref="M:EwEUtils.Database.cEwEDatabase.GetReader(System.String)"/>.
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.GetReader(System.String)"/>
 </summary>
 <param name="reader">The <see cref="T:System.Data.IDataReader"/> to release.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetWriter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter"/> for
 the given table in the database.
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.ReleaseWriter(EwEUtils.Database.cEwEDatabase.cEwEDbWriter,System.Boolean)"/>
 </summary>
 <param name="strTable">The table to connect the EwEDbWriter to.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReleaseWriter(EwEUtils.Database.cEwEDatabase.cEwEDbWriter,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Releases a writer previously created via <see cref="M:EwEUtils.Database.cEwEDatabase.GetWriter(System.String)"/>.
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.GetWriter(System.String)"/>
 </summary>
 <param name="writer">The writer to release</param>
 <param name="bSaveChanges">States whether changes should be written (true) or discarded (false).</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetValue(System.String,System.Object)">
 -------------------------------------------------------------------
 <summary>
 Returns a scalar value from the current open connection.
 </summary>
 <param name="strSQL">The query to execute.</param>
 <param name="objDefault">A default to return in case a value could not be returned.</param>
 <returns>The scalar value returned from the query.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetAdapter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Obtains an <see cref="T:System.Data.IDataAdapter"/> for the current open connection.
 <seealso cref="M:EwEUtils.Database.cEwEDatabase.ReleaseAdapter(System.Data.IDataAdapter@)"/>
 </summary>
 <param name="strSQL">The SQL query to obtain the adaper for.</param>
 <returns>An <see cref="T:System.Data.IDataAdapter"/> if successful, or Nothing if 
 an error occurred.</returns>
 <remarks>
 <para>The obtained IDataAdapter should be released via 
 <see cref="M:EwEUtils.Database.cEwEDatabase.ReleaseAdapter(System.Data.IDataAdapter@)"/>.</para></remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReleaseAdapter(System.Data.IDataAdapter@)">
 -------------------------------------------------------------------
 <summary>
 Releases an <see cref="T:System.Data.IDataAdapter"/> previously obtained via
 <see cref="M:EwEUtils.Database.cEwEDatabase.GetAdapter(System.String)"/>.
 </summary>
 <param name="adapter">The <see cref="T:System.Data.IDataAdapter"/> to release.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.Execute(System.String)">
 -------------------------------------------------------------------
 <summary>
 Executes a SQL command that does not return any information.
 </summary>
 <param name="strSQL">The query to execute.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetPkKeyName(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the name of a primary key of a table.
 </summary>
 <param name="strTable">The table name to obtain the primary key for.</param>
 <returns>A name, or an empty string when no primary key was found.</returns>
 <remarks>
 After http://www.koders.com/csharp/fidE6A0EFDE719732D025C3D41E95CC26214E50188C.aspx
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetFkKeyName(System.String,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the name of a foreign key between a given column in a table to 
 another table.
 </summary>
 <param name="strTableFrom">The table where the foreign key is defined.</param>
 <param name="strColumn">The column in the <paramref name="strTableFrom">source table</paramref>.</param>
 <param name="strTableTo">The table where the foreign key links to.</param>
 <returns>A name, or an empty string when no foreign key was found.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetIndexName(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the name of an index for a given column in a table.
 </summary>
 <param name="strTable"></param>
 <param name="strColumn">The column to remove the index from, if any.</param>
 <returns>A name, or an empty string when no idnex was found.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReadSafe(System.Data.IDataReader,System.String,System.Object,System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Helper method, reads data from a column that may not exist. In that case,
 an optional default value is returned
 </summary>
 <param name="reader">The <see cref="T:System.Data.IDataReader">IDataReader</see> to read from.</param>
 <param name="strField">The name of the DB field (column) to read.</param>
 <param name="objValueDefault">A default value to return if the field could not be read.</param>
 <param name="objValueIgnore">Value to interpret as 'no value. When encountered, the default value will be returned.</param>
 <returns>The value of the requested column, or the provided default if an error occurred.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.DropColumn(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Safely drop a column by first removing any indexes on that column.
 </summary>
 <param name="strTable">The table to remove the column from.</param>
 <param name="strColumn">The name of the column to remove.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetDataSet(System.Data.IDataAdapter,System.String)">
 -------------------------------------------------------------------
 <summary>
 Obtains a <see cref="T:System.Data.DataSet">DataSet</see> for modifying records.
 </summary>
 <param name="adapter">The <see cref="T:System.Data.IDataAdapter">IDataAdapter</see> to fill the <see cref="T:System.Data.DataSet">DataSet</see> from.</param>
 <param name="strTable">The name of the table to fill the <see cref="T:System.Data.DataSet">DataSet</see> from.</param>
 <returns>The <see cref="T:System.Data.DataSet">DataSet</see> if successful, or Nothing if an error occurred.</returns>
 <remarks>The obtained <see cref="T:System.Data.DataSet">DataSet</see> should be released via <see cref="M:EwEUtils.Database.cEwEDatabase.ReleaseDataSet(System.Data.DataSet,System.Data.IDataAdapter,System.String)">ReleaseWriter</see>.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.CommitDataSet(System.Data.DataSet,System.Data.IDataAdapter,System.String)">
 -------------------------------------------------------------------
 <summary>
 Commits all the pending changes in the <see cref="T:System.Data.DataSet">DataSet</see>. This will
 leave the DataSet open for further operations.
 </summary>
 <param name="dset">The <see cref="T:System.Data.DataSet">DataSet</see> to commit</param>
 <param name="adapter">The <see cref="T:System.Data.IDataAdapter">OleDbDataAdapter</see> to write to the database</param>
 <param name="strTable">The table to update</param>
 <returns>True if successful</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReleaseDataSet(System.Data.DataSet,System.Data.IDataAdapter,System.String)">
 -------------------------------------------------------------------
 <summary>
 Releases a <see cref="T:System.Data.DataSet">DataSet</see> previously obtained via 
 <see cref="M:EwEUtils.Database.cEwEDatabase.GetDataSet(System.Data.IDataAdapter,System.String)">GetDataSet</see>.
 </summary>
 <param name="dset">The writer to release.</param>
 <param name="adapter">The <see cref="T:System.Data.IDataAdapter">IDataAdapter</see>
 to commit any changes to. If this parameter is left blank, any changes made to
 the dataset and its data are discarded.</param>
 <param name="strTable">The name of the table to update.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.HasTable(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns whether a given table exists in the open connection.
 </summary>
 <param name="strTableName">The table to check.</param>
 <returns>True if the table exists in the open connection.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">
 -------------------------------------------------------------------
 <summary>
 Base class for implementing objects that can be stored in this type
 of database.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.m_iDBID">
 <summary>Unique ID of an instance of cOOPStorable</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.m_bAllowEvents">
 <summary>Flag stating whether an cOOPStorabe instance is allowed to 
 broadcast <see cref="E:EwEUtils.Database.cEwEDatabase.cOOPStorable.OnChanged">OnChanged</see>events.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.m_bInUpdate">
 <summary>Flag preventing looped updates.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.cDBID_INVALID">
 <summary>Default ID for newly created cOOPStorable instances.</summary>
</member>
<member name="E:EwEUtils.Database.cEwEDatabase.cOOPStorable.OnChanged">
 ---------------------------------------------------------------
 <summary>
 Event to notify that instance unit has changed
 </summary>
 <param name="obj">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">instance</see>
 that changed</param>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorable.DBID">
 ---------------------------------------------------------------
 <summary>
 The unique ID of any object in the database. The database
 manages this property exclusively although public read 
 access is allowed.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorable.AllowEvents">
 ---------------------------------------------------------------
 <summary>
 Get/set whether this instance is allowed to send
 <see cref="E:EwEUtils.Database.cEwEDatabase.cOOPStorable.OnChanged">change events</see>.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorable.CopyFrom(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 ---------------------------------------------------------------
 <summary>
 Copy the content of another instance of cOOPStorable.
 </summary>
 <param name="objSrc">The source ofject to copy content from.</param>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorable.SetChanged">
 ---------------------------------------------------------------
 <summary>
 Helper method, states whether the content of an instance has
 been modified externally.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.cOOPStorableList">
 -------------------------------------------------------------------
 <summary>
 Strong-typed list for cOOPStorable instances.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Add(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Add an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to the list.
 </summary>
 <param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to add.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Clear">
 -------------------------------------------------------------------
 <summary>
 Clear the list.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Contains(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 States whether the list contains a given <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see>.
 </summary>
 <param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to find.</param>
 <returns>True if the list contains this <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see>.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.CopyTo(EwEUtils.Database.cEwEDatabase.cOOPStorable[],System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Copy the list to an array, starting at a given array index.
 </summary>
 <param name="array">The array to copy <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> into.</param>
 <param name="arrayIndex">Index of the list item to start copying from.</param>
 <remarks>Please make sure the receiving array is big enough 
 to hold the list items.</remarks>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Count">
 -------------------------------------------------------------------
 <summary>
 Get/set the number of <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">objects</see> in the list.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorableList.IsReadOnly">
 -------------------------------------------------------------------
 <summary>
 Get whether the list can be modified.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Remove(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Remove an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> from the list.
 </summary>
 <param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to remove.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.GetEnumerator">
 -------------------------------------------------------------------
 <summary>
 Returns an enumerator for cartwheeling though this list.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.IndexOf(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Returns the list index of a given <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see>.
 </summary>
 <param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to locate.</param>
 <returns>An integer value representing the index of the 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> in the list, or -1 if this item
 was not found.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Insert(System.Int32,EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Insert an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> at a given position in the list.
 </summary>
 <param name="index">The list position to insert the item at.</param>
 <param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to insert.</param>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Item(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Get the <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> at a given position in the list.
 </summary>
 <param name="index">The list index of the <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to retrieve.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.RemoveAt(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Remove an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> at a given position in the list.
 </summary>
 <param name="index">The position of the <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to remove.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.GetEnumaarghAarghAargh">
 -------------------------------------------------------------------
 <summary>
 Neh
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.cOOPKey">
 -------------------------------------------------------------------
 <summary>
 Class for querying if cOOPStorable instances are stored in the 
 database.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPKey.m_iDBID">
 <summary>The ID for an object in the database</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPKey.m_tOriginating">
 <summary>The runtime type that was used to write the
 record in the database with this ID.</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPKey.#ctor(System.Type,System.Int32)">
 ---------------------------------------------------------------
 <summary>
 Construct a new cOOPKey instance.
 </summary>
 <param name="t">The runtime type to generate the key for.</param>
 <param name="iDBID">The unique ID that this key is generated for.</param>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPKey.DBID">
 ---------------------------------------------------------------
 <summary>
 Get the unique ID for the key.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPKey.OriginatingType">
 ---------------------------------------------------------------
 <summary>
 Get the runtime type for the key.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReadObjectKey(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Read an cOOPKey for a ID in the database. If all goes well a 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object key</see> is returned, which links the
 ID value to the originating runtime type.
 </summary>
 <param name="iDBID">
 The ID to retrieve an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object key</see> for.
 </param>
 <returns>
 A <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object key</see> instance, or null if the ID 
 was not present in the database, or if the originating runtime
 type was not present in the current loaded set of assemblies.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReadObjectKeys(System.Type,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Read keys for all objects of a given type from the database.
 </summary>
 <param name="t">Type to filter by.</param>
 <param name="bIncludeInherited">Flag indicating whether objects 
 inherited from <paramref name="t">t</paramref> are allowed to be 
 returned as well.</param>
 <returns>An array of <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object keys</see>.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReadObject(EwEUtils.Database.cEwEDatabase.cOOPKey)">
 -------------------------------------------------------------------
 <summary>
 Reads an object from the database.
 </summary>
 <param name="key"><see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">Object key</see> to read the 
 object for.</param>
 <returns>A <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 instance, or null if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReadObject(System.Type,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Reads an object from the database.
 </summary>
 <param name="t">The type of the object to read.</param>
 <param name="iDBID">The ID of the object to read.</param>
 <returns>A <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 instance, or null if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.ReadObjects(System.Type,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Reads all objects of a given type from the database.
 </summary>
 <param name="t">The type to read objects for.</param>
 <param name="bIncludeInherited">Flag indicating whether objects 
 inherited from <paramref name="t">t</paramref> are allowed to be 
 read as well.</param>
 <returns>
 An array of <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 instances.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_assTransaction">
 <summary>Assembly for OOP transaction.</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPBeginTransaction(System.Reflection.Assembly,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Starts an OOP database transaction. In addition to a regular 
 <see cref="M:EwEUtils.Database.cEwEDatabase.BeginTransaction">transaction</see> this method also
 opens all adapters for <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable"/>-derived classes
 in a given assembly to reduce the amount of adapter traffic while
 the transaction is open.
 </summary>
 <param name="ass">The assembly to load types from.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.WriteObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Write an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">OOPstorable-derived</see> instance 
 to the database.
 </summary>
 <param name="obj">The object to save.</param>
 <remarks>
 This method will verify - and update if  necessary - the database
 schema for this class of object and its base classes. This check 
 is performed only the very first time a particular object is written 
 to the database; consecutive save attempts will bypass the check for
 performance reasons.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.DeleteObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Delete an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable-derived</see> 
 instance from the database.
 </summary>
 <param name="obj">The object to delete.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.DeleteObjectRecursive(EwEUtils.Database.cEwEDatabase.cOOPStorable,System.Type)">
 -------------------------------------------------------------------
 <summary>
 Delete an cOOPStorable-derived instance from the database, starting
 at the given class level, and recursively deleting the direct
 base class instance if applicable.
 </summary>
 <param name="obj">The object to delete.</param>
 <param name="t">The class level to delete from the database.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_bOOPEnabled">
 <summary>Flag stating whether the database has been prepared 
 for OOP object access. To prepare the database for OOP access
 refer to <see cref="P:EwEUtils.Database.cEwEDatabase.OOPEnabled">OOPEnabled</see>.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_iNextDBID">
 <summary>The unique ID to assigne to new cOOPStorable instances
 in the database.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_OOPObjectCache">
 <summary>Cache of all objects already saved into the database.
 Keeping a cache is much faster than having to query the database
 for every potential save.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_OOPObjectSchemaVerified">
 <summary>Cache of all object for which the database schema has
 already been verifyfied since the last time the database
 was opened.</summary>
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.OOPEnabled">
 -------------------------------------------------------------------
 <summary>
 Turn on or off OOP capabilities
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPFlushObjectCache">
 -------------------------------------------------------------------
 <summary>
 Internal admin helper; clear the saved object cache.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPFlushSchemaCache">
 -------------------------------------------------------------------
 <summary>
 Internal admin helper; clear the verified schema cache.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.cOOPObjectCache">
 -------------------------------------------------------------------
 <summary>
 Helper class, maintains a dictionary of processed 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">objects</see> for reassembling item links.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.m_dtObjectCache">
 <summary>The cache.</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.AddObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 ---------------------------------------------------------------
 <summary>Add an object to the cache.</summary>
 <param name="obj">The object to add.</param>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.RemoveObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 ---------------------------------------------------------------
 <summary>
 Remove an object from the cache.
 </summary>
 <param name="obj">The object to remove.</param>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.GetObject(System.Int32)">
 ---------------------------------------------------------------
 <summary>
 Retrieves an object from the cache.
 </summary>
 <param name="iDBID">The ID of the object to retrieve.</param>
 <returns>An object, or nothing if the object is not present
 in the cache.</returns>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.HasObject(System.Int32)">
 ---------------------------------------------------------------
 <summary>
 States whether an object with a given database ID is present
 in the cache.
 </summary>
 <param name="iDBID">The ID of the object to find.</param>
 <returns>True if the object is present in the cache.</returns>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.Clear">
 ---------------------------------------------------------------
 <summary>
 Clears the object cache.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.OOP_sFKInfo">
 ---------------------------------------------------------------
 <summary>
 OOP foreign key
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPCreateObjectTable(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Create a table for a <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived class 
 </summary>
 <param name="t">The <see cref="T:System.Type">type</see> to build the table for.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPUpdateObjectTable(System.Type,System.Data.OleDb.OleDbConnection)">
 -------------------------------------------------------------------
 <summary>
 Update column definitions for a single given cOOPStorable-derived 
 type within an existing table.
 </summary>
 <param name="t">The type to update the database schema for.</param>
 <param name="conn">The database connection to update the database
 schema.</param>
 <returns>True if successful.</returns>
 <remarks>
 <para>This method does not recurse; a single type is processed for a 
 single table. To process an enitre object inheritance tree, use
 <see cref="M:EwEUtils.Database.cEwEDatabase.OOPUpdateObjectSchema(System.Type)">OOPUpdateObjectSchema</see>.</para>
 <para>Note that this method does not handle column datatype 
 conversions; only mssing columns are added.</para>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPUpdateObjectSchema(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Update the database schema for storing a class of a given type. The
 entire inheritance tree of the given type is processed, new tables
 are created and table columns are added when necessary.
 </summary>
 <param name="t">The type to update the database schema for.</param>
 <returns>
 True if successful.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry">
 -------------------------------------------------------------------
 <summary>
 Single adapter entry in the 
 <see cref="F:EwEUtils.Database.cEwEDatabase.m_dtOOPAdapterCache">adapter cache</see>.
 </summary>
 <remarks>
 The adapter cache is meant to speed up object access during a single
 database transaction while writing nested classes to the OOP database.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.m_strTable">
 <summary>Name of the table that an adapter references to.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.m_adapter">
 <summary>The cached adapter.</summary>
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.m_iRefCount">
 <summary>Number of references to a cached adapater.</summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.#ctor(System.String,System.Data.IDataAdapter)">
 ---------------------------------------------------------------
 <summary>
 Contructs a new cache entry.
 </summary>
 <param name="strTable">The table the adapter was obtained for.</param>
 <param name="adapter">The database adapter that was returned for
 this table.</param>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.AddRef">
 ---------------------------------------------------------------
 <summary>
 Increase adapter usage count.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.RemoveRef">
 ---------------------------------------------------------------
 <summary>
 Decrease adapter usage count.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.Released">
 ---------------------------------------------------------------
 <summary>
 States if the adapter is no longer used.
 </summary>
 <returns>
 True if released.
 </returns>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.Adapter">
 ---------------------------------------------------------------
 <summary>
 Returns the referenced adapter.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.Table">
 ---------------------------------------------------------------
 <summary>
 Returns the name of the referenced table.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_dtOOPAdapterCache">
 -------------------------------------------------------------------
 <summary>
 Cache of open database adapters.
 </summary>
 <remarks>
 <para>When writing an OOP class structure, objects are written recursively
 to the database, ensuring that baseclass information is written first. Linked
 objects are written whenever a reference is encountered. Due to this unpredictable
 flow, chances are that database tables need to accessed for writing several
 times when writing a single object instance.</para>
 <para>A database will deny multiple adapter request for writing. To overcome this
 problem, the adapter cache maintains a list of open adapters available while saving
 OOP data which can be reused until the entire write operation is done.</para>
 <para>Adapters are obtained via <see cref="M:EwEUtils.Database.cEwEDatabase.OOPGetAdapter(System.String)">OOPGetAdapter</see>,
 and are released via <see cref="M:EwEUtils.Database.cEwEDatabase.OOPReleaseAdapter(System.String)">OOPReleaseAdapter</see>.</para>
 </remarks>
 ------------------------------------------------------------------- 
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPGetAdapter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Obtain a database adapter from the adapter cache.
 </summary>
 <param name="strTable">Table name to obtain the adapter for.</param>
 <returns>A database adapter if successful, or Nothing if an error occurred.</returns>
 <remarks>
 An adapter obtained via this method must be released via 
 <see cref="M:EwEUtils.Database.cEwEDatabase.OOPReleaseAdapter(System.String)">OOPReleaseAdapter</see>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPReleaseAdapter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Release a database adapter from the adapter cache that was previously
 obtained via <see cref="M:EwEUtils.Database.cEwEDatabase.OOPGetAdapter(System.String)">OOPGetAdapter</see>.
 </summary>
 <param name="strTable">Table name to release the adapter for.</param>
 <returns>True if the adapter was released succesfully, or False 
 if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPHasOpenAdapters">
 -------------------------------------------------------------------
 <summary>
 Helper method, states if there are open adapters left in the adapter cache.
 </summary>
 <returns>True if there are any open adapters left in the cache.</returns>
 <remarks>There should be no more open adapters left when a write
 operation is complete.</remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.OOP_CLASSNAMECOL">
 <summary>
 Reserved column name for storing class names in the OOP database schema
 </summary>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPGetTableName(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method, returns a SQL table name for a given class/type.
 </summary>
 <param name="t">The class to return the table name for.</param>
 <returns>A table name for the given class.</returns>
 <remarks>
 This method will convert invalid namespace characters into
 valid SQL table name characters.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPGetColumnName(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Helper method, returns a SQL column name for a given property.
 </summary>
 <param name="pi">The property info instance to obtain a column
 name for.</param>
 <returns>A column name.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPIsBaseClass(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method, states whether a given class is inherited directly 
 from Object.
 </summary>
 <param name="t">The class to test.</param>
 <returns>True if class <paramref name="t">t</paramref> is directly
 inherited from Object.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPGetKeyProperty(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Get the property that holds the primary key for a 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived <see cref="T:System.Type">Type</see>.
 </summary>
 <param name="t">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 <see cref="T:System.Type">Type</see> to get the primary key for.</param>
 <returns>A <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance, or
 nothing if the primary key property was not found. Which is not good;
 this will probably only occur when the class was not properly derived.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPGetStorableProperties(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method; returns all writable public properties that are either
 directly declared by a provided <paramref name="t">class</paramref>,
 or that serves as the primary key to the class structure. Only
 properties of classes derived from <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>
 are returned.
 </summary>
 <param name="t">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived
 <see cref="T:System.Type">Type</see> to find storable properties for.</param>
 <returns>An array of <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instances.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPGetColumnType(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Helper method, returns the SQL data type for a given property.
 </summary>
 <param name="pi">The property to obtain the SQL data type for.</param>
 <returns>
 An SQL data type name, or an empty string if the property value type
 was not supported. The list of supported data types can easily be 
 extended.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPGetPropertyDefaultValue(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Get the default value for a property.
 </summary>
 <param name="pi">The property info to get the default value for.</param>
 <returns>
 </returns>
 <remarks>
 JS 06Mar09: not implemented yet; need to figure out how to get to
 the actual 'Default' attribute.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cEwEDatabase.m_dtAssemblyNames">
 -------------------------------------------------------------------
 <summary>
 Assembly name cache, added to optimize the process of relocating types
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPTypeToString(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method, translats a class/type to a unique string.
 </summary>
 <param name="t">The class to convert.</param>
 <returns></returns>
 <remarks>
 The counterpart of this method, <see cref="M:EwEUtils.Database.cEwEDatabase.OOPStringToType(System.String)">OOPStringToType</see>,
 can be used to find the originating type from a string.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPStringToType(System.String)">
 -------------------------------------------------------------------
 <summary>
 Helper method, locates the originating type from a type string.
 </summary>
 <param name="strType">The type name to locate the originating type
 for.</param>
 <returns></returns>
 <remarks>
 The counterpart of this method, <see cref="M:EwEUtils.Database.cEwEDatabase.OOPTypeToString(System.Type)">OOPTypeToString</see>,
 can be used to create the string for a type.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPIsForeignKeyProperty(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Helper method, determines if the value type of a given property 
 is, or is inherited from, cOOPStorable.
 </summary>
 <param name="pi">The property info instance to test.</param>
 <returns>
 True if the value type of a given property is, or is inherited from,
 cOOPStorable.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPReadObject(System.Type,System.Int32,System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Read a single cOOPStorable-derived instance from the database.
 </summary>
 <param name="t">The class/type of the object to read.</param>
 <param name="iDBID">The database ID of the object to read.</param>
 <param name="piKey">The property in the <paramref name="t">given type</paramref> 
 where the <paramref name="iDBID">database ID</paramref> should be stored.</param>
 <returns>
 A cOOPStorable-derived instance, or nothing if an error occurred.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPReadObjectRecursive(System.Type,EwEUtils.Database.cEwEDatabase.cOOPStorable,System.Reflection.PropertyInfo,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Recursively read a single cOOPStorable-derived instance from the 
 database along the inheritance tree.
 </summary>
 <param name="t">The type in the class hierarchy of instance 
 <paramref name="objRead">objRead</paramref> to read.</param>
 <param name="objRead">Object to read.</param>
 <param name="piKey">Property in the object that holds the database
 ID.</param>
 <param name="iDBID">Database ID value of the object being read.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPReadListItems(EwEUtils.Database.cEwEDatabase.cOOPStorableList)">
 <summary>
 Helper method, write contents of list 
 </summary>
 <param name="list"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPWriteListItems(EwEUtils.Database.cEwEDatabase.cOOPStorableList)">
 -------------------------------------------------------------------
 <summary>
 Helper method, write contents of a list.
 </summary>
 <param name="list"></param>
 <returns></returns>
 <remarks></remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.OOPWriteObjectRecursive(System.Type,EwEUtils.Database.cEwEDatabase.cOOPStorable,System.Reflection.PropertyInfo)">
 <summary>
 
 </summary>
 <param name="t"></param>
 <param name="obj"></param>
 <param name="piKey"></param>
 <returns></returns>
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetVersion">
 -------------------------------------------------------------------
 <summary>
 Returns the current version of the connected EwE database.
 </summary>
 <returns>
 A Single value with the version latest version number of the connected database.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetEwEVersion">
 -------------------------------------------------------------------
 <summary>
 Returns the current version of the connected EwE database.
 </summary>
 <returns>
 A Single value with the version latest version number of the connected database.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.SetVersion(System.Single,System.String)">
 -------------------------------------------------------------------
 <summary>
 Updates the version of the database
 </summary>
 <param name="sVersion">The version to set.</param>
 <param name="strRemark">The remark to add to the update.</param>
 <returns>True if successful</returns>
 <remarks>This method only allows setting the version on an EwE6 database.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetMajorVersion(System.Single)">
 -------------------------------------------------------------------
 <summary>
 Extract the major version number from a given version number.
 </summary>
 <param name="sVersion">The version number to examine.</param>
 <returns>The major version number of the given version number.</returns>
 <remarks>
 <para>'6.0' returns '6'</para>
 <para>'2.93' returns '2'</para>
 <para>'-4.4' returns '4'</para>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetMinorVersion(System.Single)">
 -------------------------------------------------------------------
 <summary>
 Extract the minor version number from a given version number.
 </summary>
 <param name="sVersion">The version number to examine.</param>
 <returns>The minor version number of the given version number.</returns>
 <remarks>
 <para>'6.0' returns '0.0'</para>
 <para>'2.93' returns '0.93'</para>
 <para>'-4.4' returns '0.4'</para>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cEwEDatabase.cHistoryItem">
 -------------------------------------------------------------------
 <summary>
 Database change log item.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.cHistoryItem.#ctor(System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="strVersion"></param>
 <param name="strComments"></param>
 <param name="strDate"></param>
 <remarks></remarks>
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cHistoryItem.Version">
 -------------------------------------------------------------------
 <summary>
 Get the version number of a particular history item.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cHistoryItem.Comments">
 -------------------------------------------------------------------
 <summary>
 Get the comments to a particular history item.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cEwEDatabase.cHistoryItem.Date">
 -------------------------------------------------------------------
 <summary>
 Get the date of a particular history item.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cEwEDatabase.GetHistory">
 -------------------------------------------------------------------
 <summary>
 Returns the change log of the database.
 </summary>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cQueryBuilder">
 -----------------------------------------------------------------------
 <summary>Helper class, assists in the assembly of SQL queries by maintaining
 dynamic parameters for WHERE, GROUP BY and ORDER clauses. 
 <para>The basis for the QueryBuilder is a pre-formatted SQL query, containing 
 placeholders where dynamic parts will be substituted into.</para>
 <para>Reserved placeholders are [WHERE], [GROUP], [ORDER], which are substitution points 
 for SQL WHERE, GROUP BY and ORDER BY clauses, which can be dynamically configured 
 via the QueryBuilder.</para>
 <para>A developer can define optional placeholders referred to as Fields. 
 Typical Fields are table names, which may vary during use and thus need to 
 be kept dynamic without having to rewrite an entire SQL query.</para>
 <para>
 For examples on how to use tis class, refer to the following methods:
 <list>
 <item><description><see cref="T:EwEUtils.Database.cQueryBuilder">QueryBuilder constructor</see></description></item>
 <item><description><see cref="M:EwEUtils.Database.cQueryBuilder.AddClause(System.String)">AddClause</see></description></item>
 </list>
 </para>
 </summary>
 -------------------------------------------------------
</member>
<member name="F:EwEUtils.Database.cQueryBuilder.m_strQuery">
 <summary>The Query that is to be formatted/extended.</summary>
</member>
<member name="F:EwEUtils.Database.cQueryBuilder.m_lstrClauses">
 <summary>WHERE clauses</summary>
</member>
<member name="F:EwEUtils.Database.cQueryBuilder.m_lstrGroupBy">
 <summary>GROUP BY clauses</summary>
</member>
<member name="F:EwEUtils.Database.cQueryBuilder.m_lstrOrderBy">
 <summary>ORDER BY clauses</summary>
</member>
<member name="F:EwEUtils.Database.cQueryBuilder.m_dtFields">
 <summary>Fields that will be substituted dynamically when using the query</summary>
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
 -------------------------------------------------------
 <summary>Intializes a new instance of the QueryBuilder class
 </summary>
 <param name="strQuery">The SQL query to maintain/extend</param>
 <param name="fields">A string-to-string key value pair list
 with values to substitute in dynamic fields upon query execution.</param>
 <remarks>
 An example:
 <code>
 ' A global query, defined for public use
 Public Const sPERSONEL_QUERY As String = "SELECT [NAME_FIELD], [ADDRESS_FIELD] FROM [PERSON_TABLE] [WHERE]"
 
 ...
 
 ' In this example, the QueryBuilder will use the public query. It will
 ' substitute placeholders in this query with real values, pertaining to the
 ' context of the implementation. Just presume it's necessary, ok?
 
 ' Create list of dynamic fields
 Dim htFields as New Dictionary(of String, String)
 htFields.Add("[NAME_FIELD]", "LastName")
 htFields.Add("[ADDRESS_FIELD]", "Adress")
 htFields.Add("[PERSON_TABLE]", "PERSONNEL")
 
 ' Create query builder
 Dim qb As New QueryBuilder(sPERSONEL_QUERY, htFields)
 ' Add where clause
 qb.AddClause("WHERE [PERSON_TABLE].[NAME_FIELD] LIKE 'A%'")
 ' Get db
 Dim sqlConn as SqlConnection = ....
 
 ' Execute query
 Dim sqlR as SqlDataReader = qb.GetReader(sqlConn)
 ' Use the data
 
 ..
 ..
 
 ' Cleanup
 qb.ReleaseReader(sqlR)
 </code>
 </remarks>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.ToString">
 -------------------------------------------------------
 <summary>Produces the final SQL query. Order of processing is as follows:
 <para>First, the reserved placeholders are substituted to generate the layout of the SQL statement.</para>
 <para>Second, specified fields are substituted query-wide to resolve issues such as dynamic table and table column names.</para>
 </summary>
 <returns>The formatted SQL query</returns>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.AddClause(System.String)">
 -------------------------------------------------------
 <summary>Add a SQL segment to the WHERE clause ([WHERE] placeholder)
 </summary>
 <param name="strSegment">The segment to add.</param>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.AddClause(System.String,System.String,System.String[])">
 -------------------------------------------------------
 <summary>Add a SQL segment to the WHERE clause ([WHERE] placeholder) with a range of values for a single variable.
 </summary>
 <param name="strSegment">The segment to add.</param>
 <param name="strField">The variable name that will be filtered.</param>
 <param name="astrValues">An array of values that will be validated upon query execution.</param>
 <returns>The number of values encountered in <paramref name="astrValues">astrValues</paramref></returns>
 <remarks>
 Examples:
 <code>
 ' Make querybuilder. Note that the query contains a placeholder for
 ' clauses ([WHERE] field) without implementing a WHERE clause. When the QueryBuilder
 ' is instructed to build its query, this field will be substituted away if no 
 ' where clauses are defined. Without the [WHERE] placeholder the QueryBuilder will 
 ' not know where to insert the WHERE clauses. It's not THAT smart, ok!
 Dim qb As New QueryBuilder("SELECT * FROM PERSONNEL [WHERE]")
 
 ' Define names filter
 Dim alNames As New ArrrayList
 alNames.Add("Lai")
 alNames.Add("Steenbeek")
 alNames.Add("Buszowski")
 qb.AddClause("LastName in ([NAME])", "[NAME]", alNames)
 
 ' Define addresses filter
 Dim strAddresses = "4th ave, 16th ave, west broadway")
 qb.AddClause("Address in ({ADDRESS})", "[ADDRESS]", strAddresses)
 
 Dim strQuery As String = qb.ToString()
 </code>
 </remarks>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.AddOrder(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
 -------------------------------------------------------
 <summary>Add a SQL segment to the ORDER BY clause ([ORDER] placeholder).
 </summary>
 <param name="strOrder">The segment to add.</param>
 <param name="fields">Hash table with fields to substitute (optional).</param>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.AddGroup(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
 -------------------------------------------------------
 <summary>Add a SQL segment to the GROUP BY clause ([GROUP] placeholder).
 </summary>
 <param name="strGroup">The segment to add.</param>
 <param name="fields">Value fields to substitute (optional).</param>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.AddField(System.String,System.String)">
 -------------------------------------------------------
 <summary>Adds a generic field to substitute query-wide.
 </summary>
 <param name="strField">The field placeholder to look for.</param>
 <param name="strReplace">The field value to replace this placeholder with.</param>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.CopyFields(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
 -------------------------------------------------------
 <summary>
 Add specified fields to our series of keywords
 </summary>
 <param name="fields"></param>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.ConcatSegments(System.String,System.String[])">
 -------------------------------------------------------
 <summary>
 Concatenate filter and clauses into a SQL segment
 </summary>
 <param name="strType"></param>
 <param name="astrClauses">Array of clauses</param>
 <returns></returns>
 -------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cQueryBuilder.Subst(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
 -------------------------------------------------------
 <summary>
 Substitute a series of fields from a hash table into a given string.
 </summary>
 <param name="strIn">The string to substitute values into</param>
 <param name="dtSubst">Dictionary with key/value pairs to substitute</param>
 <returns>The reworked string</returns>
 -------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.IModelImporter">
 -----------------------------------------------------------------------
 <summary>
 Interface for definining an import engine.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.IModelImporter.Open(System.String)">
 -------------------------------------------------------------------
 <summary>
 Connects the importer to an external source with model data to import.
 </summary>
 <returns>True if successful.</returns>
 <remarks>
 Any connection established via the Open method must be disconnected 
 via the <see cref="M:EwEUtils.Database.IModelImporter.Close"/>.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.IModelImporter.Close">
 -------------------------------------------------------------------
 <summary>
 Disconnects the importer from its source document.
 </summary>
 <remarks>
 Any database connection established via the <see cref="M:EwEUtils.Database.IModelImporter.Open(System.String)"/>
 method must be disconnected via the Close method.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.IModelImporter.IsOpen">
 -------------------------------------------------------------------
 <summary>
 States whether the importer was connected to its source document 
 via the <see cref="M:EwEUtils.Database.IModelImporter.Open(System.String)">Open</see> method.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.IModelImporter.Import(EwEUtils.Database.cExternalModelInfo,EwEUtils.Database.cEwEDatabase,System.String@)">
 -------------------------------------------------------------------
 <summary>
 Perform the actual import.
 </summary>
 <param name="info"><see cref="T:EwEUtils.Database.cExternalModelInfo">Info</see> describing
 the model to import.</param>
 <param name="db">The database to import a model into.</param>
 <param name="strLogfileName">Log file generated by the import process.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.IModelImporter.Models">
 -------------------------------------------------------------------
 <summary>
 Get a <see cref="T:EwEUtils.Database.cExternalModelInfo">descriptive list of models</see> 
 that can be imported from an attached source.
 </summary>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.IModelImporter.CanImportFrom(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns whether an importer can import from a given source.
 </summary>
 <param name="strSource">Source to explore.</param>
 <returns>True if an importer can import from the given source.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Database.cExternalModelInfo">
 -----------------------------------------------------------------------
 <summary>
 Helper class, provides information of an external importable model.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Database.cExternalModelInfo.#ctor(System.String,System.String,System.String,System.Int32)">
 ---------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of this class.
 </summary>
 <param name="strID">EwE5 modelName for this model.</param>
 <param name="strName">EwE5 modelTitle for this model.</param>
 <param name="strDescription">EwE5 model Remarks for this model.</param>
 <param name="nScenarios">Number of EwE5 scenarios in this model.</param>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cExternalModelInfo.ID">
 ---------------------------------------------------------------
 <summary>
 Gets the internal model ID (EwE5 field modelName) for this model.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cExternalModelInfo.Name">
 ---------------------------------------------------------------
 <summary>
 Gets the human readable model name (EwE5 field modelTitle) for this model.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cExternalModelInfo.Description">
 ---------------------------------------------------------------
 <summary>
 Gets the model description (EwE5 field Remarks) for this model.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="P:EwEUtils.Database.cExternalModelInfo.NumScenarios">
 ---------------------------------------------------------------
 <summary>
 Gets the number of scenarios in this model.
 </summary>
 ---------------------------------------------------------------
</member>
<member name="T:EwEUtils.Interop.cRBridge">
 -----------------------------------------------------------------------
 <summary>
 This class implements a simple connection to R. It facilitates <see cref="M:EwEUtils.Interop.cRBridge.Execute(System.Collections.Generic.ICollection{System.String})">
 execution of scripts from file or as a series of lines</see>.
 </summary>
 <remarks>
 Note that the connection to R is established by rerouting the <see cref="P:System.Diagnostics.Process.StandardInput"/>,
 <see cref="P:System.Diagnostics.Process.StandardOutput"/>, and <see cref="P:System.Diagnostics.Process.StandardError"/> of the
 R process. This code does not use COM to remain CRL-compliant. Neat, no?
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_RInput">
 <summary>Input sent to R</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_ROutput">
 <summary>Output produced by R</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_RErrors">
 <summary>Errors produced by R</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_strPathToR">
 <summary>Full path to R</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_dtFields">
 <summary>Disctionary of fields to replace in the script</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_bIsExecuting">
 <summary>Script running flag.</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_bSuccess">
 <summary>Last run result.</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_thread">
 <summary>Script running thread, if mutli-threaded.</summary>
</member>
<member name="F:EwEUtils.Interop.cRBridge.m_script">
 <summary>The script being executed.</summary>
</member>
<member name="M:EwEUtils.Interop.cRBridge.#ctor(System.String)">
 -------------------------------------------------------------------
 <summary>
 Create a new R connection.
 </summary>
 <param name="strPathToR">The path to the R executable.</param>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.RunElevated">
 -------------------------------------------------------------------
 <summary>
 Get/set whether R should run as an elevated proecss. Set this to true
 if your R script needs to install or update packages.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Interop.cRBridge.Clear">
 -------------------------------------------------------------------
 <summary>
 Clean up left-overs from previous R runs.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Interop.cRBridge.InstallLocations">
 -------------------------------------------------------------------
 <summary>
 Get the R installation locations reported in the registry.
 </summary>
 <returns>An array with R installation locations obtained from the
 registry. This method is MONO-compliant, but may not yield usable
 results on Linux.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.IsExecuting">
 -------------------------------------------------------------------
 <summary>
 Get whether the R bridge is currently executing a script.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="E:EwEUtils.Interop.cRBridge.RunCompleted">
 -------------------------------------------------------------------
 <summary>
 Event, thrown when R has completed execution.
 </summary>
 <param name="sender"></param>
 <param name="args"></param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Interop.cRBridge.ExecuteFile(System.String)">
 -------------------------------------------------------------------
 <summary>
 Execute an R script.
 </summary>
 <param name="strScriptFile">The R script file to execute.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Interop.cRBridge.Execute(System.String)">
 -------------------------------------------------------------------
 <summary>
 Execute an R script provided as a block of text.
 </summary>
 <param name="strScript">The script to execute.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Interop.cRBridge.Execute(System.Collections.Generic.ICollection{System.String})">
 -------------------------------------------------------------------
 <summary>
 Execute an R script provided as a collection of strings.
 </summary>
 <param name="RScriptLines">The script to execute.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.Field(System.String)">
 -------------------------------------------------------------------
 <summary>
 Get/set a field to replace in the script
 </summary>
 <param name="strFieldName"></param>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.TimeOut">
 -------------------------------------------------------------------
 <summary>
 Time in millisecnonds to wait for an R script to terminate. 
 </summary>
 <remarks>To wait indefinitely set value should be set to <see cref="F:System.Int32.MaxValue"/>.</remarks>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.Input">
 -------------------------------------------------------------------
 <summary>
 Get the input lines sent to during the last R run.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.Output">
 -------------------------------------------------------------------
 <summary>
 Get the output produced by the last R run.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.Errors">
 -------------------------------------------------------------------
 <summary>
 Get the error lines produced by the last R run.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Interop.cRBridge.LastRunSuccess">
 -------------------------------------------------------------------
 <summary>
 Get whether the last R script ran successfully, i.e. when the script
 ran without producing errors.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.ILogWriter">
 <summary>
 Definitions for implementing a EwE log writer.
 </summary>
</member>
<member name="M:EwEUtils.ILogWriter.Open">
 -----------------------------------------------------------------------
 <summary>
 Opens the log writer for writing.
 </summary>
 <returns>True if successful.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.ILogWriter.Close">
 -----------------------------------------------------------------------
 <summary>
 Closes the log writer for writing.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.ILogWriter.Location">
 -----------------------------------------------------------------------
 <summary>
 Returns the location where the log writer writes to. This can be a file
 for file-based log writers, a URL for net-based writers, or any other
 location really.
 </summary>
 <returns>The textual description of the log location.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.ILogWriter.StartSession">
 -----------------------------------------------------------------------
 <summary>
 Starts the session by writing log opening information.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.ILogWriter.Write(System.Exception,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write an exception to the log.
 </summary>
 <param name="theException">The exception to write</param>
 <param name="strDetails">A detail providing context to the exception.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.ILogWriter.Write(EwEUtils.Core.IMessage,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write a <see cref="T:EwEUtils.Core.IMessage"/> to the log.
 </summary>
 <param name="message">The message to write</param>
 <param name="strDetails">A detail providing context to the message.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.ILogWriter.Write(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Write a string to the log.
 </summary>
 <param name="msg">Message string to write.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.Value(System.Object,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Extension method; extract a value from an object by property name.
 </summary>
 <param name="o"></param>
 <param name="strField"></param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.Fill``1(``0[]@,``0)">
 -----------------------------------------------------------------------
 <summary>
 Extension method; fill an array with a given value.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="arr">The array to fill.</param>
 <param name="value">The value to fill the array with.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.IsIdenticalTo``1(``0[],``0[])">
 -----------------------------------------------------------------------
 <summary>
 Extension method; check if two arrays are the same.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="a">The first array to check.</param>
 <param name="b">The second array to check.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.Fill``1(``0[0:,0:]@,``0)">
 -----------------------------------------------------------------------
 <summary>
 Extension method; fill an array with a given value.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="arr">The array to fill.</param>
 <param name="value">The value to fill the array with.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.Fill``1(``0[0:,0:,0:]@,``0)">
 -----------------------------------------------------------------------
 <summary>
 Extension method; fill an array with a given value.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="arr">The array to fill.</param>
 <param name="value">The value to fill the array with.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.SubArray``1(``0[],System.Int32,System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Extension method; extract a sub-array.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="values"></param>
 <param name="iStart"></param>
 <param name="iEnd"></param>
 <returns></returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.Shuffle``1(System.Collections.Generic.IList{``0})">
 -----------------------------------------------------------------------
 <summary>
 Extension method; shuffles the specified list.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="list">The list to shuffle.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Extensions.EqualsArray``1(``0[]@,``0[])">
 -----------------------------------------------------------------------
 <summary>
 Extension method; checks if two arrays are equal.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="arr">The array to compare.</param>
 <param name="arr2">The other array to compare to.</param>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.NetUtilities.cFlexibleEncodingStringWriter">
 -------------------------------------------------------------------
 <summary>
 String writer that accepts setting of diffferent <see cref="P:EwEUtils.NetUtilities.cFlexibleEncodingStringWriter.Encoding">encoding formats</see>.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.NetUtilities.cFlexibleEncodingStringWriter.CustomEncoding">
 -------------------------------------------------------------------
 <summary>
 The <see cref="T:System.Text.Encoding"/> format to use for this string writer.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.NetUtilities.cFlexibleEncodingStringWriter.Encoding">
 -------------------------------------------------------------------
 <inheritdocs cref="P:System.IO.StringWriter.Encoding"/>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.NetUtilities.cSerializableObject">
 ===========================================================================
 <summary>
 Implements a base class for a serializable objects.
 </summary>
 ===========================================================================
</member>
<member name="F:EwEUtils.NetUtilities.cSerializableObject.m_bValid">
 <summary>Flag stating that the contents of this object is valid.</summary>
</member>
<member name="M:EwEUtils.NetUtilities.cSerializableObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 -----------------------------------------------------------------------
 <summary>
 Serializes the object
 </summary>
 <param name="info"></param>
 <param name="context"></param>
 <remarks>
 This takes care of all objects in the inheritance hierarchy. Derived classes 
 should only override this method to add extra data.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.NetUtilities.cSocketWrapper">
 =======================================================================
 <summary>
 This class wraps the communication of data back and forth across a
 .NET Socket.
 </summary>
 <remarks>
 <para>Every new chunk of data sent through the wrapped socket are 
 preceded by a 4-byte integer indicating the size of the data. Since
 data sent through a socket is split into packages, the receiving
 socket will keep combining packages until the original data is
 reassembled, which is then made available.</para>
 </remarks>
 =======================================================================
</member>
<member name="T:EwEUtils.NetUtilities.cSocketWrapper.cHandShake">
 ===================================================================
 <summary>
 Class used to help server and client recognize each other when
 setting up a connection.
 </summary>
 ===================================================================
</member>
<member name="T:EwEUtils.NetUtilities.cSocketWrapper.eReadStates">
 <summary>
 Socket wrapper read states
 </summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.NotReading">
 <summary>Not reading.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.ReadingSize">
 <summary>Reading data size bytes.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.ReadingObject">
 <summary>Reading data bytes.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.ObjectRead">
 <summary>Data has been read.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.cBUFFER_SIZE">
 <summary>Size of buffer for receiving data.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_abBuffer">
 <summary>The one buffer for receiving data.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_socket">
 <summary>The wrapped socket.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iDataSize">
 <summary>Size, in number of bytes, of the most recent data package.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iDataRead">
 <summary>Number of bytes read of the most recent data package.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_bAuthorized">
 <summary>States whether or not the socket connection is authorized for communication.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_abReceived">
 <summary>Received bytes buffer.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_abSizeBuff">
 <summary>Buffer for object size </summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iSizeRead">
 <summary> Number of bytes in the size buffer m_abSizeBuff </summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iID">
 <summary>Client ID.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_strRemoteMachineName">
 <summary>Name of the remote machine.</summary>
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.#ctor">
 -------------------------------------------------------------------
 <summary>
 Create a new socket wrapper.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.#ctor(System.Int32,System.Net.Sockets.Socket)">
 -------------------------------------------------------------------
 <summary>
 Wrap an existing socket by a new socket wrapper.
 </summary>
 <param name="s">The <see cref="T:System.Net.Sockets.Socket">socket</see> to wrap.</param>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes">
 -------------------------------------------------------------------
 <summary>
 Status flags passed in the <see cref="E:EwEUtils.NetUtilities.cSocketWrapper.OnStatus">OnStatus</see> event.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes.Disconnected">
 <summary>The socket is disconnected.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes.Connected">
 <summary>The socket is connected.</summary>
</member>
<member name="F:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes.Authorized">
 <summary>The socket is authorized.</summary>
</member>
<member name="E:EwEUtils.NetUtilities.cSocketWrapper.OnStatus">
 -------------------------------------------------------------------
 <summary>
 Public event reporting status changes in the socket.
 </summary>
 <param name="sw">The <see cref="T:EwEUtils.NetUtilities.cSocketWrapper">socket wrapper</see>
 instance that sent the event.</param>
 <param name="status">The <see cref="T:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes">status</see>
 of the socket wrapper that sent the event.</param>
 <param name="strData">The data that accompanies the event.</param>
 -------------------------------------------------------------------
</member>
<member name="E:EwEUtils.NetUtilities.cSocketWrapper.OnData">
 -------------------------------------------------------------------
 <summary>
 Public event reporting that data has been received across the socket.
 </summary>
 <param name="sw">The <see cref="T:EwEUtils.NetUtilities.cSocketWrapper">socket wrapper</see>
 instance that received the data.</param>
 <param name="data">The <see cref="T:EwEUtils.NetUtilities.cSerializableObject">data</see>
 that was received.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.Connect(System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Attempt to connect the socket to a URI, port combination.
 </summary>
 <param name="strURI">The URI to connect to.</param>
 <param name="iPort">The IP port to connect to.</param>
 <returns>True if connected succesfully.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.Connect(System.Net.IPAddress,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Attempt to connect the socket to an IP address, port combination.
 </summary>
 <param name="ip">The IP address to connect to.</param>
 <param name="iPort">The IP port to connect to.</param>
 <returns>True if connected succesfully.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.Connected">
 -------------------------------------------------------------------
 <summary>
 States whether the socket is connected.
 </summary>
 <returns>True if connected.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.Disconnect">
 -------------------------------------------------------------------
 <summary>
 Disconnects the socket from a server.
 </summary>
 <returns>True if disconnected succesfully.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.NetUtilities.cSocketWrapper.RemoteMachineName">
 -------------------------------------------------------------------
 <summary>
 Get/set the machine name of a connected, authorized client.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.NetUtilities.cSocketWrapper.Authorized">
 -------------------------------------------------------------------
 <summary>
 States whether the socket is authorized to send data for its 
 intended purpose.
 </summary>
 <returns>True if authorized.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.Send(EwEUtils.NetUtilities.cSerializableObject,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Send <see cref="T:EwEUtils.NetUtilities.cSerializableObject">a serializable object</see> across the socket.
 </summary>
 <param name="obj">The object to send.</param>
 <param name="bRequiresAuthorization">Flag indicating whether the socket
 needs to be <see cref="P:EwEUtils.NetUtilities.cSocketWrapper.Authorized">Authorized</see> to send this data.</param>
 <returns>True if successful.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.RelayHandshake(EwEUtils.NetUtilities.cSocketWrapper.cHandShake)">
 -------------------------------------------------------------------
 <summary>
 Send handshake message back to the sender
 </summary>
 <param name="hs"></param>
 <remarks>Messages can be relayed only once.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.ReadBuffer(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Read the most recently received chunk of data from the local socket
 <see cref="F:EwEUtils.NetUtilities.cSocketWrapper.m_abBuffer">buffer</see>.
 </summary>
 <param name="iNumBytes">The number of bytes that were received.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.ReceiveCallBack(System.IAsyncResult)">
 -----------------------------------------------------------------------
 <summary>
 Callback for asynchronous socket data reading.
 </summary>
 <param name="ar"></param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.ReceiveHandShake(EwEUtils.NetUtilities.cSocketWrapper,EwEUtils.NetUtilities.cSocketWrapper.cHandShake)">
 <summary>
 Process a Handshake object received by the socket callback ReceiveCallBack(IAsyncResult)
 </summary>
 <param name="sw">SocketWrapper object the handshake was recieved on</param>
 <param name="handshake">cHandshake to process</param>
 <remarks></remarks>
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.SendBinary(System.Byte[],System.Boolean,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Send a message through the socket. This call is blocking (for now)
 </summary>
 <param name="byMessage">The message bytes to send</param>
 <param name="bRequiresAuthorization">Flag indicating whether the socket
 needs to be <see cref="P:EwEUtils.NetUtilities.cSocketWrapper.Authorized">Authorized</see> to send this data.</param>
 <remarks>
 This method will prepend the message with 4 bytes stating the
 length of the original message. This will allow the receiving
 end to deduct whether all packets for incoming data have arrived.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.NetUtilities.cSocketWrapper.ToString">
 -------------------------------------------------------------------
 <summary>
 Returns a string representation of a cSocketWrapper instance.
 </summary>
 <returns>
 A string representing the Remote End Point that the wrapped socket 
 is connected to.
 </returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.SpatialData.ISpatialDataCache">
 -----------------------------------------------------------------------
 <summary>
 Interface for classes that cache converted spatial-temporal data.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataCache.RootFolder">
 -------------------------------------------------------------------
 <summary>
 Get/set the path to the cache root folder.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataCache.GetFileName(EwEUtils.SpatialData.ISpatialDataSet,System.Drawing.PointF,System.Drawing.PointF,System.Double,System.DateTime,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Return the path to a cache for a dataset.
 </summary>
 <param name="ds"><see cref="T:EwEUtils.SpatialData.ISpatialDataSet"/> to obtain the cache path for.</param>
 <param name="ptfTL">Top-left location (in decimal degrees lon,lat) of the bounding box of the data.</param>
 <param name="ptfBR">Bottom-right location (in decimal degrees lon,lat) of the bounding box of the data.</param>
 <param name="dCellSize">Cell size to obtain the cache path for.</param>
 <param name="time">Time to create the file name for.</param>
 <param name="strFilter">Optional filter, may be empty.</param>
 <param name="strExt">File extension to create the file name for.</param>
 <returns>A cache path.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.SpatialData.ISpatialDataConverter">
 -------------------------------------------------------------------
 <summary>
 Interface for implementing spatial data conversions.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataConverter.Dataset">
 -------------------------------------------------------------------
 <summary>
 Get/set the dataset to link to this converter.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataConverter.DisplayName">
 -------------------------------------------------------------------
 <summary>
 Get the name for displaying the converter in a user interface.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataConverter.Description">
 -------------------------------------------------------------------
 <summary>
 Get the description for displaying the converter in a user interface.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataConverter.AttributeFilter">
 -------------------------------------------------------------------
 <summary>
 Get/set an attribute filter, if needed.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataConverter.AttributeName">
 -------------------------------------------------------------------
 <summary>
 Get/set the name of the attribute to rasterize, if needed.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataConverter.AttributeValueMappings">
 -------------------------------------------------------------------
 <summary>
 Optional mappings for rasterizing features
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataConverter.Convert(System.Object,System.Drawing.PointF,System.Drawing.PointF,System.Double,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Convert data with a given extent and cell size into a <see cref="T:EwEUtils.SpatialData.ISpatialRaster">raster</see>.
 </summary>
 <param name="data">Data to convert.</param>
 <param name="ptfNE">North-east corner of the area to load data for. 
 Values are interpreted as decimal degrees, <see cref="P:System.Drawing.Point.X"/> as longitude, 
 <see cref="P:System.Drawing.Point.Y"/> as latiude.</param>
 <param name="ptfSW">South-west corner of the area to load data for. 
 Values are interpreted as decimal degrees, <see cref="P:System.Drawing.Point.X"/> as longitude, 
 <see cref="P:System.Drawing.Point.Y"/> as latiude.</param>
 <param name="dCellSize">Cell size (in decimal degrees) to convert data to.</param>
 <param name="strProjToWkt">The target WKT projection string.</param>
 <param name="strFile">Name of the file to store the converted raster.</param>
 <returns>A <see cref="T:EwEUtils.SpatialData.ISpatialRaster">raster</see> with data, trimmed to the Ecospace 
 bounding box indicated by <paramref name="ptfNE"/>, <paramref name="ptfSW"/> and 
 <paramref name="dCellSize">cell size</paramref>.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataConverter.Configuration(System.Xml.XmlDocument)">
 -------------------------------------------------------------------
 <summary>
 Get/set the configuration information for the converter.
 </summary>
 <param name="doc"><see cref="T:System.Xml.XmlDocument"/> for creating and parsing nodes.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataConverter.IsConfigured">
 -------------------------------------------------------------------
 <summary>
 Returns whether the converter is configured and ready to operate.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataConverter.IsCompatible(EwEUtils.SpatialData.ISpatialDataSet)">
 -------------------------------------------------------------------
 <summary>
 Returns whether the converter is compatible with the data provided 
 by a given dataset.
 </summary>
 <param name="ds">The dataset to the data.</param>
 <returns>True if compatible.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.SpatialData.ISpatialDataSet">
 -----------------------------------------------------------------------
 <summary>
 Interface for classes that provide access to sets of spatio-temporal data.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.CustomName">
 -------------------------------------------------------------------
 <summary>
 Legible name of the dataset.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.CustomDescription">
 -------------------------------------------------------------------
 <summary>
 Description of the data in the dataset.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.Source">
 -------------------------------------------------------------------
 <summary>
 Get/set the absolute source of the dataset.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.GUID">
 -------------------------------------------------------------------
 <summary>
 Unique <see cref="P:EwEUtils.SpatialData.ISpatialDataSet.GUID"/>, assigned by the dataset manager, to uniquely identify the data set.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.TimeStart">
 -------------------------------------------------------------------
 <summary>
 Get the start time of the data in this set.
 </summary>
 <remarks>
 If no data is loaded or this property does not apply, this method is expected to return <see cref="F:System.DateTime.MaxValue"/>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.TimeEnd">
 -------------------------------------------------------------------
 <summary>
 Get the end time of the data in this set.
 </summary>
 <remarks>
 If no data is loaded or this property does not apply, this method is expected to return <see cref="F:System.DateTime.MinValue"/>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.VarName">
 -------------------------------------------------------------------
 <summary>
 Get the <see cref="T:EwEUtils.Core.eVarNameFlags">core variable</see> associated 
 with the dataset, if any.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.ConversionFormat">
 -------------------------------------------------------------------
 <summary>
 Get a descriptor for the data in the data set. This value is used
 to find converters that are compatible with this dataformat.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.IsConfigured">
 -------------------------------------------------------------------
 <summary>
 Returns whether the dataset is configured for delivering data.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.Configuration(System.Xml.XmlDocument,System.String)">
 -------------------------------------------------------------------
 <summary>
 Get/set the configuration information for the converter.
 </summary>
 <param name="doc"><see cref="T:System.Xml.XmlDocument"/> for creating and parsing nodes.</param>
 <param name="strFolderRoot">The root folder where the configuration is read from.</param>
 <remarks>Automatic serialization is not used here because of difficulties 
 that may derive from serializing complex data structures and other 
 headaches. It is deemed more cost-effective to allow full developer 
 control over the persistence logic.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.HasDataAtT(System.DateTime)">
 -------------------------------------------------------------------
 <summary>
 States whether the data set has data for a given date.
 </summary>
 <param name="dateTime">The time to query data for. For practical
 purposes, time is assumed to be rounded to days.</param>
 <returns>True if data is available.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">
 -------------------------------------------------------------------
 <summary>
 Lock the dataset for a given time and spatial extent.
 </summary>
 <param name="dateTime">The time to lock data for. For practical
 purposes, time is assumed to be rounded to months.</param>
 <param name="dCellSize">Map cell size that is requested.</param>
 <param name="ptfNE">North-east corner of the area to load data for. 
 Values are interpreted as decimal degrees, <see cref="P:System.Drawing.Point.X"/> as longitude, 
 <see cref="P:System.Drawing.Point.Y"/> as latiude.</param>
 <param name="ptfSW">South-west corner of the area to load data for. 
 Values are interpreted as decimal degrees, <see cref="P:System.Drawing.Point.X"/> as longitude, 
 <see cref="P:System.Drawing.Point.Y"/> as latiude.</param>
 <param name="strProjectionString">WKT projection string for the target raster.</param>
 <returns>True if data was successfully locked.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.IsLocked">
 -------------------------------------------------------------------
 <summary>
 Returns whether data has been <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see>.
 </summary>
 <returns>True if data has been <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see>.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.Unlock">
 -------------------------------------------------------------------
 <summary>
 Release any <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data.
 </summary>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.GetExtentAtT(System.DateTime,System.Drawing.PointF@,System.Drawing.PointF@)">
 -------------------------------------------------------------------
 <summary>
 Get the indexed spatial extent of data at a given time. Extent(s) should
 be gathered via <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.UpdateIndexAtT(System.DateTime)"/>
 </summary>
 <param name="dateTime">The time to query data for. For practical
 purposes, time is assumed to be rounded to months.</param>
 <param name="ptfNW">Point to receive top-left extent value.</param>
 <param name="ptfSE">Point to receive bottom-right extent value.</param>
 <returns>True if valid values were retrieved.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.UpdateIndexAtT(System.DateTime)">
 -------------------------------------------------------------------
 <summary>
 Build the spatial extent index for the dataset for the Ecospace
 run time.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.SpatialData.ISpatialDataSet.eIndexStatus">
 -------------------------------------------------------------------
 <summary>
 Possible status flags for source data.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.SpatialData.ISpatialDataSet.eIndexStatus.NotIndexed">
 <summary>Data has not been indexed yet.</summary>
</member>
<member name="F:EwEUtils.SpatialData.ISpatialDataSet.eIndexStatus.Indexed">
 <summary>Data has been indexed.</summary>
</member>
<member name="F:EwEUtils.SpatialData.ISpatialDataSet.eIndexStatus.Failed">
 <summary>Data could not be indexed.</summary>
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.IndexStatusAtT(System.DateTime)">
 -------------------------------------------------------------------
 <summary>
 Returns whether data at a given time is indexed.
 </summary>
 <param name="dateTime">The time to query data for. For practical
 purposes, time is assumed to be rounded to months.</param>
 <returns>True if data at a given time is indexed.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.GetAttributes">
 -------------------------------------------------------------------
 <summary>
 Returns the names of all attributes for <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data. 
 </summary>
 <returns>The names of all attributes for <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.GetAttributeDataTypes">
 -------------------------------------------------------------------
 <summary>
 Returns the data types of all attributes for <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data. 
 </summary>
 <returns>The data types of all attributes for <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.GetAttributeValues">
 -------------------------------------------------------------------
 <summary>
 Returns the attribute <see cref="T:System.Data.DataTable"/> for the <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data.
 </summary>
 <returns>The attribute <see cref="T:System.Data.DataTable"/> for the <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.GetRaster(EwEUtils.SpatialData.ISpatialDataConverter,System.String)">
 -------------------------------------------------------------------
 <summary>
 Obtains a <see cref="T:EwEUtils.SpatialData.ISpatialRaster"/> from the <see cref="M:EwEUtils.SpatialData.ISpatialDataSet.LockDataAtT(System.DateTime,System.Double,System.Drawing.PointF,System.Drawing.PointF,System.String)">locked</see> data.
 </summary>
 <param name="converter">Spatial data converter to perform the magic.</param>
 <param name="strLayerName">Name of the layer data will be retrieved for.</param>
 <returns>A <see cref="T:EwEUtils.SpatialData.ISpatialRaster">spatial raster</see>.</returns>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.DialogReadFilter(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Get the dialog read filter for all supported file types.
 </summary>
 <param name="bRaster">Allowed to include raster file types.</param>
 <param name="bImage">Allowed to include image file types.</param>
 <param name="bVector">Allowed to include vector file types.</param>
 <param name="bAllFiles">Allowed to include 'all files' entry.</param>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SpatialData.ISpatialDataSet.Cache">
 -------------------------------------------------------------------
 <summary>
 Get/set the cache to use for the dataset.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialDataSet.ExportTo(System.String)">
 -------------------------------------------------------------------
 <summary>
 Export the dataset for transfer to another computer.
 </summary>
 <param name="strPath"></param>
 <returns>A new dataset with the same <see cref="P:EwEUtils.SpatialData.ISpatialDataSet.GUID"/>
 as the source dataset.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.SpatialData.ISpatialRaster">
 -------------------------------------------------------------------
 <summary>
 Wrapper to present raster data to Ecospace.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.NumRows">
 -------------------------------------------------------------------
 <summary>
 Return the number of rows in the raster.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.NumCols">
 -------------------------------------------------------------------
 <summary>
 Return the number of columns in the raster.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.CellSize">
 -------------------------------------------------------------------
 <summary>
 Return the size of square cells in the raster.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.TopLeft">
 -------------------------------------------------------------------
 <summary>
 Return the top-left location of the data in the raster.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.Cell(System.Int32,System.Int32,System.Double)">
 -------------------------------------------------------------------
 <summary>
 Return a cell value for a given Ecospace row and column.
 </summary>
 <param name="iRow">One-based Ecospace row index</param>
 <param name="iCol">One-based Ecospace column index</param>
 <param name="dNoDataValue">No data value to use if either row or 
 column are invalid, or if the cell does not hold any data.</param>
 <returns>A value, or <paramref name="dNoDataValue"/> if either row or 
 column are invalid, or if the cell does not hold any data.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.IsValid">
 -------------------------------------------------------------------
 <summary>
 Returns whether the raster is connected to actual data.
 </summary>
 <returns>True if the raster is connected to actual data.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.Mean">
 -------------------------------------------------------------------
 <summary>
 Return the mean value across all data values the raster.
 </summary>
 <returns>The mean value across all data values the raster. This
 excludes cells with <see cref="M:EwEUtils.SpatialData.ISpatialRaster.NoData">no data</see>.</returns>
 <remarks>A return value of -9999 is expected to signal that an error 
 occurred and that no usable value is available.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.Min">
 -------------------------------------------------------------------
 <summary>
 Return the min value across all data values in the raster.
 </summary>
 <returns>The min value across all data values in the raster.</returns>
 <remarks>A return value of -9999 is expected to signal that an error 
 occurred and that no usable value is available.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.Max">
 -------------------------------------------------------------------
 <summary>
 Return the max value across all data values in the raster.
 </summary>
 <returns>The max value across all data values in the raster.</returns>
 <remarks>A return value of -9999 is expected to signal that an error 
 occurred and that no usable value is available.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.StandardDeviation">
 -------------------------------------------------------------------
 <summary>
 Return the standard deviation of values in the raster.
 </summary>
 <returns>The standard deviation in the raster.</returns>
 <remarks>A return value of -9999 is expected to signal that an error 
 occurred and that no usable value is available.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.NoData">
 -------------------------------------------------------------------
 <summary>
 Return the no data value in the raster.
 </summary>
 <returns>The no data value in the raster.</returns>
 <remarks>A return value of -9999 is expected to signal that an error 
 occurred and that no usable value is available.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.NumValueCells">
 -------------------------------------------------------------------
 <summary>
 Return the number of data cells (e.g. cells that do not have 
 <see cref="M:EwEUtils.SpatialData.ISpatialRaster.NoData"/> values)
 </summary>
 <returns>The number of data cells.</returns>
 <remarks>A return value of -9999 is expected to signal that an error 
 occurred and that no usable value is available.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SpatialData.ISpatialRaster.Save(System.String)">
 -------------------------------------------------------------------
 <summary>
 Save the raster to file.
 </summary>
 <param name="strFile"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEnumUtils.EnumParse``1(System.String,``0)">
 <summary>
 Fail-save templated enum parsingummy thing.
 </summary>
 <typeparam name="t"></typeparam>
 <param name="input"></param>
 <param name="valDefault"></param>
 <returns></returns>
</member>
<member name="T:EwEUtils.cEventLog">
 ---------------------------------------------------------------------------
 <summary>
 Utility class for writing entries to the Windows Event log.
 </summary>
 ---------------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEventLog.#ctor(System.String,System.String)">
 <summary>
 Create a n
 </summary>
 <param name="strAppName">Name of Client Application. Needed because before 
 writing to event log, you must have a named EventLog source.</param>
 <param name="strLogName">Name of Log (System, Application, Security is 
 read-only) If you specify a non-existent log, the log will be created</param>
 <remarks></remarks>
</member>
<member name="M:EwEUtils.cEventLog.WriteToEventLog(System.String,System.Diagnostics.EventLogEntryType)">
 -----------------------------------------------------------------------
 <summary>
 Write entry to the Windows Event log.
 </summary>
 <param name="strEntry">Value to write</param>
 <param name="eventlogentry"><see cref="T:System.Diagnostics.EventLogEntryType">Entry Type</see>.</param>
 <returns>True if successful.</returns>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.cEwESettingsProvider">
 ---------------------------------------------------------------------------
 <summary>
 <para>Custom <see cref="T:System.Configuration.SettingsProvider"/> to affect a few of the default
 and messy .NET settings behaviours:</para>
 <list type="bullet">
 <item>All EwE settings are stored in the local roaming profile of the current
 user. This class removes the distinction between application settings and user 
 settings which traditionally end up in different directories on a system.</item>
 <item>This class also ensures that all EwE settings are stored in one directory, 
 in one file only. This stops the proliferation of standard .NET versioned setting
 directories that become impossible to manage.</item>
 </list>
 </summary>
 <remarks>
 <para>The following code illustrates how to use this class to store settings
 native to a class library:</para>
 <code>
 Imports System.IO
 Imports EwEUtils
 Imports System.Reflection
 
 Namespace My
 
 Partial Friend NotInheritable Class MySettings
 
     Private m_provider As cEwESettingsProvider = Nothing
 
     Public Sub New()
 
         MyBase.New()
         Dim asm As Assembly = Assembly.GetAssembly(GetType(MySettings))
         Me.m_provider = New cEwESettingsProvider(Path.GetFileNameWithoutExtension(asm.Location), Me)
 
     End Sub
 
 End Class
 
 End Namespace
 </code>
 </remarks>
 ---------------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------
 <summary>
 Initialization. Overridden to stop .NET from trying to be too smart.
 </summary>
 <param name="strName"></param>
 <param name="col"></param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.GetDefaultValue(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Get the default value for a given settings property name.
 </summary>
 <param name="strName">The name of the property to access. This name is not case-sensitive.</param>
 <returns>A value, or Nothing if a property by this name does not exist.</returns>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.cEwESettingsProvider.Name">
 -----------------------------------------------------------------------
 <summary>
 I have no idea who uses this, but hey, I'll override anything you'll
 tell me to.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.cEwESettingsProvider.ApplicationName">
 -----------------------------------------------------------------------
 <summary>
 Who are you?
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
 -----------------------------------------------------------------------
 <summary>
 Store the values of all properties.
 </summary>
 <param name="context"></param>
 <param name="propvals"></param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
 -----------------------------------------------------------------------
 <summary>
 Get the values of all properties.
 </summary>
 <param name="context"></param>
 <param name="props"></param>
 <returns></returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.GetAppSettingsPath">
 -----------------------------------------------------------------------
 <summary>
 Get location where to store settings file.
 </summary>
 <returns></returns>
 <remarks>
 .NET uses the ApplicationData structure for this. EwE6 instead stores this
 value in an ApplicationData directory accessible to all versions of EwE.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.GetAppSettingsFilename">
 -----------------------------------------------------------------------
 <summary>
 Get name of settings file.
 </summary>
 <returns></returns>
 <remarks>
 .NET commonly tries to do very fancy things here, pertaining to merging
 different versions of settings, and managing local and roaming settings.
 EwE6 does not need any of that stuff; let's keep it simple.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.cEwESettingsProvider.SettingsDoc">
 -----------------------------------------------------------------------
 <summary>
 Get the XML document to operate on.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.GetValue(System.Configuration.SettingsProperty)">
 -----------------------------------------------------------------------
 <summary>
 Return a single value from the settings.
 </summary>
 <param name="sp"></param>
 <returns>
 A value in the form of a string, or an emtpy string if an error occurred.
 </returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.cEwESettingsProvider.StoreValue(System.Configuration.SettingsPropertyValue)">
 -----------------------------------------------------------------------
 <summary>
 Store a single value into the settings.
 </summary>
 <param name="propVal"></param>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.SystemUtilities.cSystemUtils">
 <summary>
 Utilities for obtaining system properties.
 </summary>
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.GetHostName">
 -----------------------------------------------------------------------
 <summary>
 Get the name of the host machine.
 </summary>
 <returns>The name of the host machine.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.GetHostIP(System.String,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Get the IP address of the host machine.
 </summary>
 <param name="bIP4">True to get the IP4 address, False to get the IP6 address.</param>
 <returns>The IP address of the host machine.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.IsLocalIP(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Checks if a given host name or IP address is local. First, it gets all 
 IP addresses of the given host, then it gets all IP addresses of the 
 local computer and finally it compares both lists. If any host IP equals 
 to any of local IPs, the host is a local IP. It also checks whether the 
 host is a loopback address (localhost / 127.0.0.1).
 </summary>
 <param name="strHost">Host name or IP address to check.</param>
 <returns>True if the host denotes a local IP</returns>
 <remarks>
 Converted from http://www.csharp-examples.net/local-ip/
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.IsConnectedToInternet(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Returns if an internet connection can be detected.
 </summary>
 <param name="url">The URL to test.</param>
 <returns>True if an internet connection has been detected.</returns>
 <remarks>
 <para>
 This code checks a few popular and predictable domains. The moment one can be
 contacted, the function returns true. If all fail, alas, you'll have to do 
 momentarily without the big bad world out there.
 </para>
 <para>
 For original article, see http://stackoverflow.com/questions/8800119/check-internet-connectivity.
 </para>
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.AppExec(System.String,System.String,System.String@,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Function that execute external applications for all plug-ins
 </summary>
 <param name="strAppName">Name of the executable to execute (including extension)</param>
 <param name="strPath">Application path to use. Provide an empty string
 here to detect the application file in all possible locations.</param>
 <param name="strOutputParameters">Arguments to pass to the executable.</param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.ApplicationLaunchLocations">
 -----------------------------------------------------------------------
 <summary>
 Returns an array of possible application locations.</summary>
 <returns>
 </returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.ExecuteApplication(System.String,System.String,System.String,System.String@)">
 -----------------------------------------------------------------------
 <summary>
 [to document]
 </summary>
 <param name="strLocationDir"></param>
 <param name="strAppName"></param>
 <param name="strOutputParameters"></param>
 <returns></returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.Is64BitProcess">
 -----------------------------------------------------------------------
 <summary>
 Returns whether this application is running in 64 bit mode.
 </summary>
 <returns>True if running in 64 bit mode.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.IsWindows">
 -----------------------------------------------------------------------
 <summary>
 Returns whether this application is running under Windows.
 </summary>
 <returns>True if running under Windows.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.Platform">
 -----------------------------------------------------------------------
 <summary>
 Returns the <see cref="T:System.PlatformID"/> of the running computer.
 </summary>
 <returns>The <see cref="T:System.PlatformID"/> of the running computer.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.OSVersion">
 -----------------------------------------------------------------------
 <summary>
 Returns a OS version and service pack description of the running computer.
 </summary>
 <returns>The OS version and service pack description of the running computer.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.IsRightToLeft">
 -------------------------------------------------------------------
 <summary>
 Returns whether the current UI culture is right-to-left ordered.
 </summary>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.Is64BitOS">
 -----------------------------------------------------------------------
 <summary>
 Returns whether the OS is 64 bit.
 </summary>
 <returns>True if the OS is 64 bit.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.IsAdministrator">
 -----------------------------------------------------------------------
 <summary>
 Returns whether this application is running with administrator privileges.
 </summary>
 <returns>True if running with administrator privileges.</returns>
 <remarks>
 http://www.codekeep.net/snippets/16758a1f-6186-47a7-98ba-30449fe74cda.aspx
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.IsRunningWin7OrHigher">
 -----------------------------------------------------------------------
 <summary>
 States if running Win 7 or higher.
 </summary>
 <returns>True if running Win 7 or higher.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.ProcessorCount">
 -----------------------------------------------------------------------
 <summary>
 Returns the number of logical processors.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.SystemUtilities.cSystemUtils.ApplicationSettingsFolderName">
 -----------------------------------------------------------------------
 <summary>
 Get/set the name of the folder to store application settings. Please note 
 that this value needs to be set before an application framework loads its 
 settings. If left empty, a default is obtained from the launching 
 assembly information.
 </summary>
 <seealso cref="M:EwEUtils.SystemUtilities.cSystemUtils.ApplicationSettingsPath(System.Boolean)"/>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.ApplicationSettingsPath(System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Get the path for storing application settings.
 </summary>
 <param name="bPerUserSetting">States if this is a per-user setting
 (True) or a setting for all users (False).</param>
 <returns>The path</returns>
 <seealso cref="P:EwEUtils.SystemUtilities.cSystemUtils.ApplicationSettingsFolderName"/>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.IIF``1(System.Boolean,``0,``0)">
 -------------------------------------------------------------------
 <summary>
 Returns one of two values, depending on the evaluation of an expression. 
 This is a geenric-typed alternative to Microsoft.VisualBasic IIF.
 </summary>
 <param name="bValue">The value to test.</param>
 <param name="cTrue">Value to return if <paramref name="bValue"/> resolved to True.</param>
 <param name="cFalse">Value to return if <paramref name="bValue"/> resolved to False.</param>
 <returns>A value.</returns>
 <remarks>
 The Microsoft.VisualBasic namespace is known to cause problems under Mono. If
 Mono-compliance is required do not reference Microsoft.VisualBasic and use this method instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.Val(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the numbers contained in a string as a numeric value of appropriate type.
 This is a strong-typed alternative to Microsoft.VisualBasic Val.
 </summary>
 <param name="strValue">The string to convert.</param>
 <returns>A Double value, or 0 if the conversion failed.</returns>
 <remarks>
 The Microsoft.VisualBasic namespace is known to cause problems under Mono. If
 Mono-compliance is required do not reference Microsoft.VisualBasic and use this method instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.Val(System.Object)">
 -------------------------------------------------------------------
 <summary>
 Returns the numbers contained in an object as a numeric value of appropriate type.
 This is a strong-typed alternative to Microsoft.VisualBasic Val.
 </summary>
 <param name="value">The object to convert.</param>
 <returns>A Double value, or 0 if the conversion failed.</returns>
 <remarks>
 The Microsoft.VisualBasic namespace is known to cause problems under Mono. If
 Mono-compliance is required do not reference Microsoft.VisualBasic and use this method instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.Val(System.Char)">
 -------------------------------------------------------------------
 <summary>
 Returns the number contained in a character as a numeric value of appropriate type.
 This is a strong-typed alternative to Microsoft.VisualBasic Val.
 </summary>
 <param name="value">The character to convert.</param>
 <returns>A Double value, or 0 if the conversion failed.</returns>
 <remarks>
 The Microsoft.VisualBasic namespace is known to cause problems under Mono. If
 Mono-compliance is required do not reference Microsoft.VisualBasic and use this method instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cSystemUtils.BestBefore(EwEUtils.Core.eReleaseMode,System.Reflection.Assembly,System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Get the expiry date of an assembly, given the run mode and an optional 
 max run length (in months).
 </summary>
 <param name="ass"></param>
 <param name="mode"></param>
 <param name="iMonths"></param>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.SystemUtilities.cXMLSettings">
 -----------------------------------------------------------------------
 <summary>
 INI file reader alternative using XML formats.
 </summary>
 <remarks>
 Foundation obtained 15 April 2012 from http://content.gpwiki.org/index.php/VBNET:Class_XMLINI.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cXMLSettings.Finalize">
 -------------------------------------------------------------------
 <summary>
 Die! Die!
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cXMLSettings.Create(System.String,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Load settings from file.
 </summary>
 <param name="strFileName">Name of the file to open. A ".xml" extension
 is assumed if none is provide.</param>
 <param name="bOverwrite">If true, this will not load the target file, 
 but will overwrite it instead 
 if it exists. If set to false, any existing file will be loaded.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cXMLSettings.WriteSetting``1(System.String,System.String,``0)">
 -------------------------------------------------------------------
 <summary>
 Save a setting to the configuration file.
 </summary>
 <param name="strSection">Name of the section to write to. Cannot be
 left empty.</param>
 <param name="strKey">Name of the key to write to. Cannot be left
 empty.</param>
 <param name="value">The  value to write.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cXMLSettings.ReadSetting``1(System.String,System.String,``0)">
 -------------------------------------------------------------------
 <summary>
 Retrieve a setting from the configuration file.
 </summary>
 <param name="strSection">Name of the section to read from. Cannot be
 left empty.</param>
 <param name="strKey">Name of the key to read from. Cannot be left
 empty.</param>
 <param name="defaultValue">Default value to return if the indicated
 key could not be found in the indicated section.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.SystemUtilities.cXMLSettings.Flush">
 -------------------------------------------------------------------
 <summary>
 Save settings to disk.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cTypeUtils.StringToType(System.String)">
 -------------------------------------------------------------------
 <summary>
 Helper method, locates the originating type from a type string.
 </summary>
 <param name="strType">The type name to locate the originating type
 for.</param>
 <returns></returns>
 <remarks>
 The counterpart of this method, <see cref="M:EwEUtils.Utilities.cTypeUtils.TypeToString(System.Type)"/>,
 can be used to create the string for a type.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cAssemblyUtils">
 =======================================================================
 <summary>
 Helper class offering miscellaneous Assemblyname-related functionalities.
 </summary>
 =======================================================================
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.s_FrameworkPrefixes">
 <summary>Microsoft assembly name prefixes (not complete but hey, it's a start).</summary>
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.s_CoreNames">
 <summary>EwE assembly name prefixes.</summary>
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.m_cache">
 <summary>For quick look-up</summary>
</member>
<member name="T:EwEUtils.Utilities.cAssemblyUtils.AssemblyNameComparer">
 -----------------------------------------------------------------------
 <summary>
 Helper class to sort an assembly name list.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cAssemblyUtils.cAssemblyState">
 -----------------------------------------------------------------------
 <summary>
 Helper class to maintain the EwE state of a single assembly.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cAssemblyUtils.cAssemblyStateCache">
 -----------------------------------------------------------------------
 <summary>
 Helper class to cache the EwE state for a range of assemblies.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cAssemblyUtils.ExecutingAssembly">
 -----------------------------------------------------------------------
 <summary>
 Gets the executing assembly.
 </summary>
 <value>The executing assembly.</value>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.GetName(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Returns the short name of an assembly.
 </summary>
 <param name="an">The <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> to return
 the name for.</param>
 <returns></returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.GetToken(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Extracts the public key token of an assembly and returns it as a string.
 </summary>
 <param name="an">The <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> to return
 the public key token for.</param>
 <returns></returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.GetVersion(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Returns the version number of an assembly.
 </summary>
 <param name="an">The <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> to return
 the version for. If not specified, the version of the 
 <see cref="M:System.Reflection.Assembly.GetExecutingAssembly">executing assembly</see> is returned.</param>
 <returns></returns>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cAssemblyUtils.GetCompileDate(System.Reflection.Assembly)">
 -----------------------------------------------------------------------
 <summary>
 Gets the compile date of the <see cref="P:EwEUtils.Utilities.cAssemblyUtils.ExecutingAssembly">currently 
 executing assembly</see>.
 </summary>
 <value>The compile date.</value>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.GetAssemblyName(System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Get an assembly name for a class type.
 </summary>
 <param name="tclass">The class to return the defining assembly name for.</param>
 <returns>An AssemblyName, or nothing if the class type could not be resolved.</returns>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags">
 -----------------------------------------------------------------------
 <summary>
 Bitwise flags for obtaining assembly information.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags.EwECore">
 <summary>EwE core assemblies.</summary>
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags.EwEExtended">
 <summary>Assemblies built on EwE, but not part of <see cref="F:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags.EwECore"/>.</summary>
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags.Framework">
 <summary>.NET Framework assemblies.</summary>
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags.Referenced">
 <summary>Referenced assemblies.</summary>
</member>
<member name="F:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags.All">
 <summary>All possible assemblies.</summary>
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.GetSummary(EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags)">
 -----------------------------------------------------------------------
 <summary>
 Reports all <see cref="T:System.Reflection.AssemblyName">assemblies</see> referenced by the
 current <see cref="T:System.AppDomain">application domain</see>.
 </summary>
 <param name="flags">Bitwise combination of <see cref="T:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags">summary
 flags</see>, stating that assemblies should be included in the summary.</param>
 <remarks>
 The array of assembly names will be sorted by name.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.GetSummary(System.Reflection.Assembly,EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags)">
 -----------------------------------------------------------------------
 <summary>
 Recursively reports all <see cref="T:System.Reflection.AssemblyName">assemblies</see> referenced 
 by a given assembly.
 </summary>
 <param name="entry">The entry assembly to find the summary of referenced
 assemblies for.</param>
 <param name="flags">Bitwise combination of <see cref="T:EwEUtils.Utilities.cAssemblyUtils.eSummaryFlags">summary
 flags</see>, stating that assemblies should be included in the summary.</param>
 <remarks>
 The array of assembly names will be sorted by name.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.IsFramework(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Returns whether an <see cref="T:System.Reflection.AssemblyName"/> is part of the .NET framework.
 </summary>
 <param name="an">The <see cref="T:System.Reflection.AssemblyName"/> to test.</param>
 <returns>True if the <see cref="T:System.Reflection.AssemblyName"/> is part of the .NET framework.</returns>
 <remarks>
 After http://stackoverflow.com/questions/2066041/any-way-to-check-if-an-assembly-is-a-framework-assembly-in-net-other-than-che
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.IsEwEExternal(System.Reflection.AssemblyName)">
 -------------------------------------------------------------------
 <summary>
 Return whether a given assembly name is built upon one of the EwE core assemblies.
 </summary>
 <param name="an">The assembly name to check.</param>
 <returns>True if the assembly is built upon the EwE assemblies, but is not a 
 part of the EwE core libraries.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.IsEwECore(System.Reflection.AssemblyName)">
 -------------------------------------------------------------------
 <summary>
 Return whether a given assembly name is one of the EwE core assemblies.
 </summary>
 <param name="an">The assembly name to check.</param>
 <returns>True if the assembly is one of the EwE assemblies.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.GetStrongName(System.Reflection.AssemblyName)">
 -------------------------------------------------------------------
 <summary>
 Create a StrongName that matches a specific assembly.
 </summary>
 <param name="an">Assembly name to create a StrongName for.</param>
 <returns>A StrongName that matches the given assembly, or Nothing
 if the assembly was not strongly named.</returns>
 <remarks>
 Adapted from http://blogs.msdn.com/b/shawnfa/archive/2005/08/08/449050.aspx
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.RetrieveLinkerTimestamp(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Retrieves the linker timestamp, as written in the assembly header file
 at a fixed position. This may fail one day in future .NET versions.
 Ideally, the link date and time would be stored in a universal time
 format in the code by the compiler.
 </summary>
 <param name="strAssemblyPath">Path of the assembly file to read the
 build time from.</param>
 <returns>The build date.</returns>
 <remarks>
 Taken from http://www.codinghorror.com/blog/2005/04/determining-build-date-the-hard-way.html
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.IsEwE(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Returns whether a given assembly is either an EwE core assembly, or
 references the EwEUtils core assembly.
 </summary>
 <param name="an"></param>
 <returns>True if the given assembly is either an EwE core assembly, 
 or references the EwEUtils core assembly.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cAssemblyUtils.CompareNames(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Returns whether two assembly names can be considered equal.
 </summary>
 <param name="an1"></param>
 <param name="an2"></param>
 <returns>True if the names equal.</returns>
 <remarks>
 This code does not use 
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cColorUtils">
 -----------------------------------------------------------------------
 <summary>
 Class providing a collection of <see cref="T:System.DateTime">date</see>-related utility methods.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cColorUtils.GetVariant(System.Drawing.Color,System.Single)">
 -------------------------------------------------------------------
 <summary>
 Obtain a different shade of a <see cref="T:System.Drawing.Color">color</see>.
 </summary>
 <param name="clr">The colour to obtain a variant colour for.</param>
 <param name="sShade">Shade [-1, 1] to obtain. -1 returns black, 1 returns white.</param>
 <returns>A different shade of a colour.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cColorUtils.IntToColor(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Convert a integer of format AARRGGBB to a <see cref="T:System.Drawing.Color">color</see> value.
 </summary>
 <param name="iColor">The integer to convert.</param>
 <returns>A color.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cColorUtils.ColorToInt(System.Drawing.Color)">
 -------------------------------------------------------------------
 <summary>
 Convert a <see cref="T:System.Drawing.Color">color</see> to an integer of format AARRGGBB.
 </summary>
 <param name="clr">The <see cref="T:System.Drawing.Color">color</see> to convert.</param>
 <returns>An integer of the format AARRGGBB.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cColorUtils.RandomColor(System.Drawing.Color)">
 -------------------------------------------------------------------
 <summary>
 Generate a random colour.
 </summary>
 <param name="mix">The colour to mix with.</param>
 <returns>A random color.</returns>
 <remarks>
 From http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cDateUtils">
 -----------------------------------------------------------------------
 <summary>
 Class providing a collection of <see cref="T:System.DateTime">date</see>-related utility methods.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDateUtils.DateToJulian(System.DateTime)">
 -------------------------------------------------------------------
 <summary>
 Get the Julian date for a given <see cref="T:System.DateTime">date</see>. If no 
 date is specified, the Julian date for the current time is returned.
 </summary>
 <param name="dt">The date to return the Julian date for.</param>
 <returns>A Julian date.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDateUtils.JulianToDate(System.Double)">
 -------------------------------------------------------------------
 <summary>
 Get a <see cref="T:System.DateTime">date</see> for a Julian date value.
 </summary>
 <param name="dJulian">The Julian date to return a Date instance for.</param>
 <returns>A Date instance.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDateUtils.GetMonthName(System.Int32,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Get the textual representation for a month number.
 </summary>
 <param name="iMonth">The month to format [1, 12]</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDateUtils.Easter(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Calculate the date of Easter for a given year in Gregorian calendars.
 </summary>
 <param name="y">The Gregorian year to calculate easter for [1583, 4099]</param>
 <returns>The date of Easter Sunday.</returns>
 <remarks>
 This algorithm is adapted from http://www.gmarts.org/index.php?go=415, 
 whcih in turn is adapted from a faq document by Claus Tondering
 URL: http://www.pip.dknet.dk/~pip10160/calendar.faq2.txt
 E-mail: c-t@pip.dknet.dk.
 The FAQ algorithm is based in part on the algorithm of Oudin (1940)
 as quoted in "Explanatory Supplement to the Astronomical Almanac",
 P. Kenneth Seidelmann, editor.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDateUtils.MonthDifference(System.DateTime,System.DateTime)">
 -------------------------------------------------------------------
 <summary>
 Get the number of months between two dates.
 </summary>
 <param name="first"></param>
 <param name="second"></param>
 <returns></returns>
 <remarks>
 http://stackoverflow.com/questions/3249968/calculating-number-of-months-between-2-dates
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDateUtils.GetNetworkTime(System.String)">
 -------------------------------------------------------------------
 <summary>
 Get the time from an Internet server. The retrieved time can be obtained
 from <see cref="P:EwEUtils.Utilities.cDateUtils.StartTime"/>.
 </summary>
 <param name="server">Full URL to the server to obtain time from.</param>
 <returns>True if successful.</returns>
 <remarks>
 https://stackoverflow.com/questions/6435099/how-to-get-datetime-from-the-internet
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cDateUtils.StartTime">
 -------------------------------------------------------------------
 <summary>
 Get the time returned by <see cref="M:EwEUtils.Utilities.cDateUtils.GetNetworkTime(System.String)"/>.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDateUtils.DateEquals(System.DateTime,System.DateTime)">
 -------------------------------------------------------------------
 <summary>
 Returns whether two dates fall within the same day, ignoring the time component.
 </summary>
 <param name="d1"></param>
 <param name="d2"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cDrawingUtils">
 -----------------------------------------------------------------------
 <summary>
 Class providing a collection of <see cref="N:EwEUtils.Drawing">Drawing</see>-related utility methods.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cDrawingUtils.ContentAlignmentToStringFormat(System.Drawing.ContentAlignment)">
 -------------------------------------------------------------------
 <summary>
 Convert a <see cref="T:System.Drawing.ContentAlignment">ContentAlignment</see> flag
 into a <see cref="T:System.Drawing.StringFormat">StringFormat</see> flag.
 </summary>
 <param name="ca">Content alignment flag to convert.</param>
 <returns>A StringFormat value.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cEncryptionUtilities">
 -----------------------------------------------------------------------
 <summary>
 Class providing encryption utility methods.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cFileUtils">
 =======================================================================
 <summary>
 Helper class offering miscellaneous file-related functionalities.
 </summary>
 =======================================================================
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.ToValidFileName(System.String,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Convert a text into a string that would be accepted by the OS as a
 valid file name.
 </summary>
 <param name="strText">Text to convert into a file name.</param>
 <param name="bProtectPath">Flag stating whether any path information
 included in <paramref name="strText">strText</paramref> should be
 preserved. If False, an path information is stripped off.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.ToValidFileExt(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Convert a text into a valid file extension.
 </summary>
 <param name="strText">Text to convert into a file extension.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.FilesByDialogFilter(System.String[],System.String[])">
 -------------------------------------------------------------------
 <summary>
 Get all files that match a given <see cref="!:System.Windows.Forms.FileDialog.Filter">dialog filter</see>.
 </summary>
 <param name="astrFiles">The array of files to filter.</param>
 <param name="astrExtensions">Array of file extensions to text.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.CleanupExtensions(System.String,System.Boolean,System.Char,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Cleans up a string of separated file extensions, eliminating duplicates
 and optionally sorting them.
 </summary>
 <param name="strExt">The <paramref name="cSeparator"/>-separated string of extensions to clean.</param>
 <param name="bIgnoreCase">Flag, indicating whether upper/lower case should be ignored.</param>
 <param name="cSeparator">The character that separates extentions.</param>
 <returns>A merged </returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.CreateBackup(System.String,System.String@,System.IO.FileAttributes)">
 -----------------------------------------------------------------------
 <summary>
 Create a backup copy of a file.
 </summary>
 <param name="strSrc">Source file to copy.</param>
 <param name="strDest">Destination to copy file to. Leave this destination empty 
 to backup to a default location. This parameter will return the backup 
 destination file name.</param>
 <param name="attributes"><see cref="T:System.IO.FileAttributes">Attributes</see> to
 assign to the backup file.</param>
 <returns>True if successful.</returns>
 <remarks>
 If <paramref name="strDest"/> is left empty, a backup file name will be
 created that looks like '[original name].[original ext].[short date]'.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cFileUtils.g_tempfiles">
 -----------------------------------------------------------------------
 <summary>
 List of temporary files generated by <see cref="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)"/>.
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)"/>
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFile(System.String)"/>
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFiles"/>
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Create a random file in the application cache folder, and return the 
 path to the file.
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFile(System.String)"/>
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFiles"/>
 </summary>
 <param name="strExt">An optional file extension to use.</param>
 <returns>The full path to the file.</returns>
 <remarks>
 Individual temporary files should be removed when no longer needed via 
 <see cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFile(System.String)"/>. It also does not hurt to call <see cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFiles"/>
 when your application shuts down.
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.PurgeTempFiles">
 -----------------------------------------------------------------------
 <summary>
 Purge all files created by <see cref="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)"/>.
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)"/>
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFile(System.String)"/>
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.PurgeTempFile(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Purge a single file created by <see cref="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)"/>
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)"/>
 <seealso cref="M:EwEUtils.Utilities.cFileUtils.PurgeTempFiles"/>
 </summary>
 <param name="strTempFile"></param>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.ReadNumber(System.IO.TextReader@)">
 -----------------------------------------------------------------------
 <summary>
 Read a number from a <see cref="T:System.IO.TextReader"/> and advances the read pointer.
 </summary>
 <param name="reader">The reader to read the number from.</param>
 <returns>The read number in the form of a <see cref="T:System.Single"/></returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.IsDirectoryAvailable(System.String,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Checks if a directory is available, and optionally tries to create the directory if missing.
 </summary>
 <param name="strDirectory">The directory to check.</param>
 <param name="bCreate">Optional flag, stating whether the directory 
 should be created if it does not exist yet.</param>
 <returns>True if the directory is available.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.IsDirectoryEmpty(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Returns whether a directory does not have any files in it.
 </summary>
 <param name="strDirectory">The directory to check.</param>
 <returns>True if the indicated directory does not have any files in it/</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.RelativePath(System.String,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Convert an absolute path to a relative path.
 </summary>
 <param name="strRoot">The root path to translate the absolute path to.</param>
 <param name="strAbs">The absolute path to translate.</param>
 <returns>A path relative to <paramref name="strRoot"/></returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.DeleteDirectory(System.String)">
 -------------------------------------------------------------------
 <summary>
 Recursively delete a directory and everything in it. Dangerous!
 </summary>
 <param name="strPath">The folder to delete.</param>
 <returns>True if successful.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.ToWorldFileName(System.String)">
 -------------------------------------------------------------------
 <summary>
 Generate a ESRI world file name to accompany a given file name.
 </summary>
 <param name="strFileName"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.UnixToDos(System.String)">
 -------------------------------------------------------------------
 <summary>
 Convert a DOS path to a UNIX path.
 </summary>
 <param name="strUnixPath"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.DosToUnix(System.String)">
 -------------------------------------------------------------------
 <summary>
 Convert a DOS path to a UNIX path.
 </summary>
 <param name="strDosPath"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.NormalizePath(System.String)">
 -------------------------------------------------------------------
 <summary>
 Normalize a path to a full path.
 </summary>
 <param name="strPath"></param>
 <returns></returns>
 <remarks>
 After http://stackoverflow.com/questions/2281531/how-can-i-compare-directory-paths-in-c
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.Equals(System.String,System.String,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Returns whether two paths refer to the same location.
 </summary>
 <param name="strPath1">The first path to compare.</param>
 <param name="strPath2">The second path to compare.</param>
 <param name="bIgnoreCase">Flag, stating comparison can exclude letter casing.</param>
 <returns>True if the two paths refer to the same location.</returns>
 <remarks>
 http://stackoverflow.com/questions/2281531/how-can-i-compare-directory-paths-in-c
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.ImageFormat(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the <see cref="T:System.Drawing.Imaging.ImageFormat"/> for a file,
 or Nothing if the file extension did not resolve to a known image format.
 </summary>
 <param name="strFileName">Name of file to convert.</param>
 <returns>A imageformat, or nothing if the file extension was not
 recognized as a known format.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.IsOSCaseSensitive">
 -----------------------------------------------------------------------
 <summary>
 Returns whether the current OS is (most likely) case sensitive
 </summary>
 <returns></returns>
 <remarks>
 https://stackoverflow.com/questions/430256/how-do-i-determine-whether-the-filesystem-is-case-sensitive-in-net
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFileUtils.IsFileInUse(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Check if a file is in use by another process.
 </summary>
 <param name="The_File">The full path of the file.</param>
 <returns>Return TRUE if is in use, otherwise return FALSE</returns>
 <remarks>
 https://gist.github.com/RallyTuning/ca6500dfee46a476a4b33432a6b3da77
 </remarks>
 <example>
 <code>
 Dim bInUse As Boolean = IsFileInUse("C:\folder\file.txt")
 </code>
 </example>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cFuzzySearch">
 -----------------------------------------------------------------------
 <summary>
 Utility class for searching data in collections.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cFuzzySearch.eSearchOptions.Default">
 <summary>Default search options.</summary>
</member>
<member name="F:EwEUtils.Utilities.cFuzzySearch.eSearchOptions.IngoreCase">
 <summary>Eases the search by ignoring case character casing.</summary>
</member>
<member name="F:EwEUtils.Utilities.cFuzzySearch.eSearchOptions.SearchSegments">
 <summary>Refines the search by splitting a search term in segments, and performs an additional matching on each segment.</summary>
</member>
<member name="F:EwEUtils.Utilities.cFuzzySearch.eSearchOptions.All">
 <summary>The full shebang.</summary>
</member>
<member name="M:EwEUtils.Utilities.cFuzzySearch.Find(System.String,System.String[],System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Utility method for seaching a string in a string array by likelyhood.
 </summary>
 <param name="data">The collection to explore.</param>
 <param name="strSearchTerm">The search term to look for.</param>
 <param name="iThreshold">Search difference tolerance threshold [1, <see cref="T:System.Int32"/>>.</param>
 <returns>An array of <see cref="T:EwEUtils.Utilities.cFuzzySearch.cBaseSearchResult">fuzzy search results</see>.</returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cFuzzySearch.cBaseSearchResult">
 -------------------------------------------------------------------
 <summary>
 A single fuzzy search result, presenting the index of a search term 
 in the array that was searched, and an indicator that quantifies how
 well the item at the array index matched the original search term.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFuzzySearch.cBaseSearchResult.#ctor(System.Int32,System.Object)">
 -------------------------------------------------------------------
 <summary>
 Constructor
 </summary>
 <param name="iSimilarity">Similarity to the original search term, 
 where 0 denotes an identical match.</param>
 <param name="term">The matching term.</param>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cFuzzySearch.cBaseSearchResult.Similarity">
 -------------------------------------------------------------------
 <summary>
 Returns a measure how closely the search result matches the original 
 search term, where 1 denotes an identical match, 
 and <see cref="T:System.Int32"/> denotes a total mismatch.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cFuzzySearch.cArraySearchResult">
 -------------------------------------------------------------------
 <summary>
 A single fuzzy search result, presenting the index of a search term 
 in the array that was searched, and an indicator that quantifies how
 well the item at the array index matched the original search term.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cFuzzySearch.cArraySearchResult.#ctor(System.Int32,System.Int32,System.Object)">
 -------------------------------------------------------------------
 <inheritdocs cref="T:EwEUtils.Utilities.cFuzzySearch.cBaseSearchResult"/>.
 <param name="iIndex">The array index of the search result.</param>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cFuzzySearch.cArraySearchResult.Index">
 -------------------------------------------------------------------
 <summary>
 Returns the array index of the search result.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cFuzzySearch.cSearchResultComparer">
 -------------------------------------------------------------------
 <summary>
 Helper class for sorting <see cref="T:EwEUtils.Utilities.cFuzzySearch.cBaseSearchResult">search results</see>.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cNumberUtils">
 -----------------------------------------------------------------------
 <summary>
 Helper with utility methods for dealing with numbers.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cNumberUtils.IsFinite(System.Single)">
 -------------------------------------------------------------------
 <summary>
 Returns whether a value has a finite value that can be determined.
 </summary>
 <param name="sValue">Value to evaluate.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cNumberUtils.FixValue(System.Single,System.Single,System.Single,System.Single)">
 -------------------------------------------------------------------
 <summary>
 'Fix' a number by translating NaN, negative and positive infinity
 values to user-defined values.
 </summary>
 <param name="sValue">Value to test.</param>
 <param name="sNaN">Not a number value to substitute.</param>
 <param name="sNegInf">Negative infinity value to substitute.</param>
 <param name="sPosInf">Positive infinity value to substitute.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cNumberUtils.Approximates(System.Double,System.Double,System.Double)">
 -------------------------------------------------------------------
 <summary>
 Returns whether two numbers can be considered equal.
 </summary>
 <param name="dVal1">First value to compare.</param>
 <param name="dVal2">Second value to compare.</param>
 <param name="dThreshold">Max difference for the two values to be considered equal.</param>
 <returns>True if the two values differ by no more than the given threshold.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cNumberUtils.Approximates(System.Single,System.Single,System.Single)">
 -------------------------------------------------------------------
 <summary>
 Returns whether two numbers can be considered equal.
 </summary>
 <param name="sVal1">First value to compare.</param>
 <param name="sVal2">Second value to compare.</param>
 <param name="sThreshold">Max difference for the two values to be considered equal.</param>
 <returns>True if the two values differ by no more than the given threshold.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cNumberUtils.NumRelevantDecimals(System.Object,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Returns the number of relevant decimals in a value.
 </summary>
 <param name="value">The value to check.</param>
 <param name="iNumDigits">The preferred number of digits to display.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cPropertySorter">
 ===========================================================================
 <summary>
 Code taken from "Ordering Items in the Property Grid" by
 Paul T (http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=126190)
 url: http://www.codeproject.com/KB/cpp/orderedpropertygrid.aspx
 </summary>
 <remarks>
 Usage:
 
 [TypeConverter(TypeOf(PropertySorter))]
 [DefaultProperty("Name")]
 Public Class Person
 {
     [cPropertySorter.PropertyOrder(1)}
     Public Property Test
     ..
 }
 </remarks>
 ===========================================================================
</member>
<member name="F:EwEUtils.Utilities.cPropertySorter.PropertyOrderAttribute.m_iOrder">
 <summary>Simple attribute to allow the order of a property to be specified.</summary>
</member>
<member name="M:EwEUtils.Utilities.cPropertySorter.PropertyOrderComparer.#ctor(System.String,System.String,System.String,System.Int32)">
 ---------------------------------------------------------------
 <summary>
 
 </summary>
 <param name="strPropertyName">Property name</param>
 <param name="strCategory">Category attribute</param>
 <param name="strDisplayName">Name attribute</param>
 <param name="iOrder">Order attribute</param>
 ---------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cPropertySorter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
 <summary>
 This override returns a list of properties in order.
 </summary>
 <param name="context"></param>
 <param name="value"></param>
 <param name="attributes"></param>
 <returns></returns>
</member>
<member name="T:EwEUtils.Utilities.cPropertyConverter">
 =======================================================================
 <summary>
 Property conversion utility class.
 </summary>
 =======================================================================
</member>
<member name="M:EwEUtils.Utilities.cPropertyConverter.FindOrigPropertyDescriptor(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Find a <see cref="T:System.ComponentModel.PropertyDescriptor">PropertyDescriptor</see> for
 a given <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance.
 </summary>
 <param name="pi">The property info instance to find a 
 property descriptor for.</param>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor">PropertyDescriptor</see>
 instance, or nothing if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cPropertyConverter.FindOrigPropertyInfo(System.Type,System.ComponentModel.PropertyDescriptor)">
 -------------------------------------------------------------------
 <summary>
 Find a  for <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> a given 
 <see cref="T:System.ComponentModel.PropertyDescriptor">PropertyDescriptor</see> instance.
 </summary>
 <param name="t">The type to search.</param>
 <param name="pd">The property descriptor instance to find a 
 property descriptor for.</param>
 <returns>A <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance,
 or nothing if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cResourceUtils.SaveResourceToFile(System.String,System.String,System.Boolean,System.Reflection.Assembly,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Saves an embedded resource to a file
 </summary>
 <param name="strResourceName">The name of the resource, including  in the current assembly, current namespace.</param>
 <param name="strFileName">The name of the file to save the resource to</param>
 <param name="bOverwrite">States whether an existing file is allowed to be overwritten</param>
 <param name="ass">The assembly to obtain the resource from.</param>
 <param name="strNamespace">The namespace to obtain the resource from.</param>
 <returns>True if successful</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Type,System.String,System.Globalization.CultureInfo)">
 -------------------------------------------------------------------
 <summary>
 Load a resource string from a .NET assembly.
 <seealso cref="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Resources.ResourceManager,System.Globalization.CultureInfo)"/>
 <seealso cref="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Reflection.Assembly,System.String,System.Globalization.CultureInfo)"/>
 </summary>
 <param name="strName">The name of the string resource.</param>
 <param name="typeAssembly">The type for which to find the assembly.</param>
 <param name="strNamespace">The namespace within the assembly, if any.</param>
 <param name="culture">The culture info, if any.</param>
 <returns>A string, or <paramref name="strName"/> if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Reflection.Assembly,System.String,System.Globalization.CultureInfo)">
 -------------------------------------------------------------------
 <summary>
 Load a resource string from a .NET assembly.
 <seealso cref="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Resources.ResourceManager,System.Globalization.CultureInfo)"/>
 <seealso cref="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Type,System.String,System.Globalization.CultureInfo)"/>
 </summary>
 <param name="strName">The name of the string resource.</param>
 <param name="ass">The assembly to load the resource from.</param>
 <param name="strNamespace">The namespace within the assembly, if any.</param>
 <param name="culture">The culture info, if any. If not specified, the
 executing culture is used.</param>
 <returns>A string, or <paramref name="strName"/> if an error occurred.</returns>
 <remarks>
 <para>This method will attempt to construct a resource manager for the given
 assembly and namespace, and will then attempt to load the string for the 
 indicated culture.</para>
 <para>If the resource manager to obtain the resource from is know, please
 use the much faster method <see cref="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Resources.ResourceManager,System.Globalization.CultureInfo)"/> 
 instead.</para>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Resources.ResourceManager,System.Globalization.CultureInfo)">
 -------------------------------------------------------------------
 <summary>
 Load a resource string from a given resource manager.
 </summary>
 <param name="strName">The name of the string resource.</param>
 <param name="rm">The resource manager to load the string from.</param>
 <param name="culture">The culture info, if any.</param>
 <returns>A string, or <paramref name="strName"/> if an error occurred.</returns>
 -------------------------------------------------------------------     
</member>
<member name="M:EwEUtils.Utilities.cResourceUtils.GetResources(System.Reflection.Assembly,System.String,System.Globalization.CultureInfo)">
 -------------------------------------------------------------------
 <summary>
 Returns all the resources for the current culture.
 </summary>
 <param name="ass">The assembly to load the resources from. 
 If left empty the current executing assembly is used.</param>
 <param name="strNamespace">The namespace within the assembly, if any.
 If left empty the name of the <paramref name="ass">provided assembly</paramref> 
 is used.</param>
 <param name="culture">The culture info, if any. If left empty the
 current loaded culture is used.</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cStringUtils">
 ---------------------------------------------------------------------------
 <summary>
 Class offering string utilities.
 </summary>
 ---------------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cStringUtils.StrictCSVFormatting">
 <summary><para>If true, CSV formatting is more restrictive than usual.
 <list type="bullet"><item>headers will 
 only be allowed to contain characters, numbers and underscores. All 
 characters not matching this criteria will be replaced by underscores. 
 Tools such as ArcGIS require this type of CSV formatting.</item>
 </list>
 </para>
 </summary>
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.SplitQualified(System.String,System.String,System.String)">
 ---------------------------------------------------------------------------
 <summary>
 Split function that supports text qualifiers. Code adapted from Larry Steinly,
 http://www.codeproject.com/Articles/15361/Split-Function-that-Supports-Text-Qualifiers.
 </summary>
 <param name="strExpression">String to split.</param>
 <param name="strDelimiter">Delimiting character to split by.</param>
 <param name="strQualifier">String qualifier, such as single or double quotes. Qualified string
 segments will not be subdivided by delimiting characters.</param>
 <returns>An array of strings.</returns>
 ---------------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.SplitQualified(System.String,System.Char,System.Char)">
 ---------------------------------------------------------------------------
 <summary>
 Split function that supports text qualifiers.
 </summary>
 <param name="strExpression">String to split.</param>
 <param name="cDelimiter">Delimiting character to split by.</param>
 <param name="cQualifier">String qualifier, such as single or double quotes. Qualified string
 segments will not be subdivided by delimiting characters.</param>
 <returns>An array of strings.</returns>
 <remarks>
 <para>REgEx splitting is too slow. Replaced by a self-written, much faster method.</para>
 <para>Support for "" to indicate " is needed!</para>
 </remarks>
 ---------------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.SplitLines(System.String)">
 -------------------------------------------------------------------
 <summary>
 Crude splitter method to split text by newlines, working around 
 how different OS implementations.
 </summary>
 <param name="text">The text to split</param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Hyperlink(System.String,System.String@,System.Int32@,System.Int32@,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Returns the first &lt;a href=&quot;..&gt; hyperlink within a string.
 </summary>
 <param name="strIn">The string to scan for hyperlinks.</param>
 <param name="strOut">The input string with first hyperlink removed if
 <paramref name="bStripLink"/> is set to True.</param>
 <param name="iStart">The start position of the hyperlink in <paramref name="strOut"/>.</param>
 <param name="iEnd">The end position of the hyperlink in <paramref name="strOut"/>.</param>
 <returns>An hyperlink, or an empty string if no such link was found.</returns>
 <remarks>This code is very simple, and does not use regular expressions 
 for performance reasons. Detection is limited to the direct sequence 'a href=' only.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.GetNextNumber(System.Collections.Generic.ICollection{System.String},System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the number that exceeds the highest number in a range of 
 existing autonumbered strings by one.
 </summary>
 <param name="items">Existing autonumbered strings.</param>
 <param name="strMask">Mask used to create the autonumbered strings.</param>
 <param name="strMaskNumberPlaceholder">Placeholder for the number in 
 the <paramref name="strMask">mask</paramref>.</param>
 <returns>An integer value.</returns>
 <remarks type="sidenote">
 I found that using regular expressions did not really pay off as an
 alternative to this maybe clumsy mothodology. Feel free to improve.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.SubString(System.String,System.Int32,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Truncate a string to make sure that it does not exceed a given number
 of characters.
 </summary>
 <param name="strIn">The string to truncate.</param>
 <param name="iStart">The start index to extract data from</param>
 <param name="iNumChars">The maximum length of the output string.</param>
 <returns>A string of no more than <paramref name="iNumChars"/> 
 characters in length.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToRoman(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Converts an arabic value into a roman representation.
 </summary>
 <param name="nArabicValue">The value to convert.</param>
 <returns>A number in roman format, in upper case.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ConvertToNumber(System.String,System.Type,System.Object,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into an targeted type using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
 <param name="strNumber">The number to convert.</param>
 <param name="typeTarget">The target type.</param>
 <param name="strDecimalSeparator">Separator for decimals.</param>
 <param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
 <param name="objNullValue">Value to return in case parse failed.</param>
 <returns>An number.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ConvertToInteger(System.String,System.Int32,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into an integer value using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
 <param name="strNumber">The number to convert.</param>
 <param name="strDecimalSeparator">Separator for decimals.</param>
 <param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
 <param name="iNullValue">Value to return in case parse failed.</param>
 <returns>An integer value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ConvertToSingle(System.String,System.Single,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into a single value using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
 <param name="strNumber">The number to convert.</param>
 <param name="strDecimalSeparator">Separator for decimals.</param>
 <param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
 <param name="sNullValue">Value to return in case parse failed.</param>
 <returns>A single value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ConvertToDouble(System.String,System.Double,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into a single value using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
 <param name="strNumber">The number to convert.</param>
 <param name="strDecimalSeparator">Separator for decimals.</param>
 <param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
 <param name="dNullValue">Value to return in case parse failed.</param>
 <returns>A double value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ConvertToDecimal(System.String,System.Decimal,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into a single value using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
 <param name="strNumber">The number to convert.</param>
 <param name="strDecimalSeparator">Separator for decimals.</param>
 <param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
 <param name="dNullValue">Value to return in case parse failed.</param>
 <returns>A decimal value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatNumber(System.Object,System.String,System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a decimal value into a string with
 a given number of releveant decimal digits, and custom decimal and
 thousand separators.
 </summary>
 <param name="value"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatInteger(System.Int32,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts an integer value into a string using
 the fixed EwE number format of decimal points, using custom decimal and
 thousands separators.
 </summary>
 <param name="iValue">The integer to format into a string.</param>
 <param name="strDecimalSeparator">Decimal separator to use. Default is 
 a point.</param>
 <param name="strThousandsSeparator">Thousands separator to use. By default
 this separator is not used.</param>
 <returns>A formatted value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatDecimal(System.Decimal,System.String,System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a decimal value into a string with
 a given number of releveant decimal digits, and custom decimal and
 thousand separators.
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatSingle(System.Single,System.String,System.String,System.Int32)"/>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatDouble(System.Double,System.String,System.String,System.Int32)"/>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatNumber(System.Object,System.String,System.String,System.Int32)"/>
 </summary>
 <param name="decValue">The decimal to format into a string.</param>
 <param name="strDecimalSeparator">Decimal separator to use. Default is 
 a point.</param>
 <param name="strThousandsSeparator">Thousands separator to use. By default
 this separator is not used.</param>
 <param name="iNumDigits">Number of decimal digits to use, or zero if
 formatting should show as many digits as needed.</param>
 <returns>A formatted value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatSingle(System.Single,System.String,System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a decimal value into a string with
 a given number of releveant decimal digits, and custom decimal and
 thousand separators.
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatDecimal(System.Decimal,System.String,System.String,System.Int32)"/>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatDouble(System.Double,System.String,System.String,System.Int32)"/>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatNumber(System.Object,System.String,System.String,System.Int32)"/>
 </summary>
 <param name="sValue">The single to format into a string.</param>
 <param name="strDecimalSeparator">Decimal separator to use. Default is 
 a point.</param>
 <param name="strThousandsSeparator">Thousands separator to use. By default
 this separator is not used.</param>
 <param name="iNumDigits">Number of decimal digits to use, or zero if
 formatting should show as many digits as needed.</param>
 <returns>A formatted value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatDouble(System.Double,System.String,System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a double value into a string with
 a given number of releveant decimal digits, and custom decimal and
 thousand separators.
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatDecimal(System.Decimal,System.String,System.String,System.Int32)"/>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatSingle(System.Single,System.String,System.String,System.Int32)"/>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.FormatNumber(System.Object,System.String,System.String,System.Int32)"/>
 </summary>
 <param name="dValue">The double to format into a string.</param>
 <param name="strDecimalSeparator">Decimal separator to use. Default is 
 a point.</param>
 <param name="strThousandsSeparator">Thousands separator to use. By default
 this separator is not used.</param>
 <param name="iNumDigits">Number of decimal digits to use, or zero if
 formatting should show as many digits as needed.</param>
 <seealso cref="M:EwEUtils.Utilities.cNumberUtils.NumRelevantDecimals(System.Object,System.Int32)"/>
 <returns>A formatted value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatDegrees(System.Double,System.String,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Convert a number to decimal degree notation (hours, minutes and seconds).
 </summary>
 <param name="dValue">The value to convert.</param>
 <returns>The number in a decimal degree notation.</returns>
 <remarks>
 http://www.freevbcode.com/ShowCode.asp?ID=8179
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatDate(System.DateTime,System.String)">
 -------------------------------------------------------------------
 <summary>
 Format a date for persistent storage.
 </summary>
 <param name="dtValue">The date to format.</param>
 <param name="strFormat">Optional date formatting flag (http://msdn.microsoft.com/en-us/library/zdtaw1bw%28v=vs.110%29.aspx)</param>
 <returns>A formatted date.</returns>
 <remarks>
 http://www.w3.org/TR/NOTE-datetime
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ConvertToDate(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Read a date from a formatted string.
 </summary>
 <param name="strDate">The date to read.</param>
 <param name="strFormat">Optional date formatting flag (http://msdn.microsoft.com/en-us/library/zdtaw1bw%28v=vs.110%29.aspx)</param>
 <returns>The date, of Date.MinValue if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.IsEmail(System.String)">
 -------------------------------------------------------------------
 <summary>
 Check if a string represents a valid email address.
 </summary>
 <param name="strEmail">Email address to validate</param>
 <returns>True is valid, false if not valid</returns>
 <remarks>
 Uses regular expressions in this check, as it is a more thorough
 way of checking an address provided.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.IsNumber(System.String)">
 -------------------------------------------------------------------
 <summary>
 Check if a string represents a number.
 </summary>
 <param name="strValue">The string to check.</param>
 <returns>True if the string could be parsed into a double value.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToHexString(System.Byte[])">
 -------------------------------------------------------------------
 <summary>
 Convert a byte array to a string of hexadecimal numbers.
 </summary>
 <param name="bytes"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.GenerateHash(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Convert a string into a base64 MD5 hash.
 </summary>
 <param name="strSrc">The string to hash.</param>
 <returns>A base64 MD5 hash.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToCSVField(System.Object,System.Char,System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Format a value for use in a CSV file.
 </summary>
 <param name="objValue">The value to format.</param>
 <param name="cQuote">Optional quote character to use for wrapping the value.</param>
 <param name="iNumDigits">Optional number of decimal digits to limit formatting to.</param>
 <returns>A field fit for display in a CSV file.</returns>
 <remarks>
 <para>Numbers will be en-US formatted.</para>
 <para>Double quotes will be removed.</para>
 <para>Values containing potential CSV separator characters will be encapsulated in double quotes.</para>
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToUTF8(System.String,System.Text.Encoding)">
 -------------------------------------------------------------------
 <summary>
 Converts an incoming string to UTF-8 encoding.
 </summary>
 <param name="strIn">The string to convert.</param>
 <param name="encIn">The current encoding of <paramref name="strIn"/>.</param>
 <returns>A UTF-8 encoded version of the string.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToUTF8(System.String)">
 -------------------------------------------------------------------
 <summary>
 Converts an incoming string to UTF-8 encoding, assuming that the
 incoming string encoded as ASCII (.NET default).
 </summary>
 <param name="strIn">The string to convert.</param>
 <returns>A UTF-8 encoded version of the string.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToExcelColumnName(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Convert a column number to an Excel-style column name. The resulting 
 column name will always be upper case.
 </summary>
 <param name="iColumn">The one-based column number to convert.</param>
 <returns>A character-based, Excel-style column name.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToTooltip(System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Converts an incoming string for display in tooltips, adding line breaks
 to avoid too long lines.
 </summary>
 <param name="strIn">The string to convert.</param>
 <param name="iMaxChars">The maximum numbers of characters for a single line.</param>
 <returns>A string formatted for display in a tool tip.</returns>
 <remarks>
 https://stackoverflow.com/questions/2512781/winforms-big-paragraph-tooltip
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cStringUtils.c_DELIMITERS">
 <summary>Default string split delimiters, in order of decreasing relevance.</summary>
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FindStringDelimiter(System.String,System.Char,System.Char[])">
 -------------------------------------------------------------------
 <summary>
 Returns the most likely delimiter character in a string.
 </summary>
 <param name="strIn">The string to explore.</param>
 <param name="cQualifier">Qualifier character for enveloping non-splittable strings.</param>
 <param name="candidates">An array of possible delimiter characters. If 
 an empty array is provided or this parameter is omitted, the default 
 array <see cref="F:EwEUtils.Utilities.cStringUtils.c_DELIMITERS"/> is used.</param>
 <returns>The most likely character used to split a string. If no
 candidate can be found the default comma (,) is returned.</returns>
 <remarks><para>This method splits <paramref name="strIn"/> by each 
 delimiter character in <paramref name="candidates"/> in order. If a 
 split returns more than one sub-string the split character is returned.
 If no split was possible the default comma character is returned.</para>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Now">
 -----------------------------------------------------------------------
 <summary>
 Get the current time as a string to be used in file names.
 </summary>
 <remarks>The time stamp is formatted as 'year-month-day hour-minute-second'.</remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.DamerauLevenshteinDistance(System.String,System.String,System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 <para>Computes the Damerau-Levenshtein Distance between two strings. This method
 Includes an optional threshold which can be used to indicate the maximum 
 allowable distance between the two strings.</para>
 <para>http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance</para>
 </summary>
 <param name="strSrc">The first string to compare.</param>
 <param name="strTarget">The second string to compare.</param>
 <param name="iThreshold">Maximum allowable distance</param>
 <returns>Integer.MaxValue if the threshhold is exceeded; otherwise the Damerau-Leveshteim 
 distance between the strings.</returns>
 <remarks>
 Converted from a frigtheningly smart piece of code by http://stackoverflow.com/users/842685/jmh-gr
 http://stackoverflow.com/questions/9453731/how-to-calculate-distance-similarity-measure-of-given-2-strings/9454016#9454016
 </remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.UnravelException(System.Exception)">
 -------------------------------------------------------------------
 <summary>
 Converts an exception with all its nested inner exceptions into a 
 single string.
 </summary>
 <param name="ex"></param>
 <returns>A string</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToTitleCase(System.String)">
 -------------------------------------------------------------------
 <summary>
 Converts a string to proper title case, capitalizing every word in 
 a sentence and turning all other characters to lower case. Note that
 all-caps words are unaffected. This method takes text reading order 
 and sentence breaks (periods) into account.
 </summary>
 <param name="strExpression">The string to convert.</param>
 <returns>A string in proper title case.</returns>
 <remarks>This version fixes some issues with <see cref="M:System.Globalization.TextInfo.ToTitleCase(System.String)"/>.
 Note that substrings are split by ". " (left to right reading order) or 
 " ." (l2r reading order). There is no support (yet) for custom
 sentence seaprators.</remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToSentenceCase(System.String)">
 -------------------------------------------------------------------
 <summary>
 Converts a string to proper sentence case, capitalizing only the first
 (or last, depending on reading order) word in a sentence and turning 
 all other characters to lower case. 
 Note that words with multiple caps are unaffected. Sentences are detected from periods.
 </summary>
 <param name="strExpression">The string to convert.</param>
 <returns>A string in proper sentence case.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Wrap(System.String,System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Convert text into a paragraph that wraps at <paramref name="iNumChars"/>.
 </summary>
 <param name="str">The string to split.</param>
 <param name="iNumChars">The max number of characters on each text line.</param>
 <returns>This is rather blunt logic but hey... Ideally, this should be 
 outsourced to more dedicated logic that performs Locale aware hyphenation
 etc. Perhaps NHunSpell? Ugh, that is for later.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Unwrap(System.String)">
 -------------------------------------------------------------------
 <summary>
 Removes all single line breaks from a piece of text. Double line breaks
 are preserved as they are interpreted as paragraph separators.
 </summary>
 <param name="strText"></param>
 <returns></returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.FormatList(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Concatenates a collection of items into a natural language list of terms.
 </summary>
 <param name="items">The textual items to concatenate.</param>
 <param name="bAnd">States if the last item is added by 'and' or by 'or'</param>
 <returns></returns>
 <example>
     Dim items As New String() {"Ecopath", "Ecosim", "Ecospace"}
     FormatList(items, False) 
     
 ' Output: "Ecopath, Ecosim or Ecospace"
 </example>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ControlTextToSentence(System.String)">
 -------------------------------------------------------------------
 <summary>
 Converts a Windows forms string to proper sentence case.
 </summary>
 <param name="strExpression">The string to convert.</param>
 <returns>A string in proper sentence case.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ScientificNameToGenusSpecies(System.String,System.String@,System.String@)">
 -------------------------------------------------------------------
 <summary>
 Convert a scientific name to genus + species, taking into account that 
 some species classifiers may contain spaces.
 </summary>
 <param name="scientificName">The scientific name to split.</param>
 <param name="genus">The genus part to split into.</param>
 <param name="species">The species part to split into.</param>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.GetDate(System.String,System.DateTime@)">
 -------------------------------------------------------------------
 <summary>
 Try to locate and parse a numerical date from a string. The data can be
 specified as YYYY{sep}MM or MM{sep}YYYY.
 </summary>
 <param name="strText">The text to parse.</param>
 <param name="dt">The parsed date, if any.</param>
 <returns>True if either date format was found.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.GetDateBruteForce(System.String,System.DateTime@,System.String@,System.Int32@)">
 -------------------------------------------------------------------
 <summary>
 Use a brute force strategy to try to locate and parse a numerical date 
 from a string. This method tries several orders of year, month and
 optional day fields, with different separators, to find a match. 
 </summary>
 <param name="strText">The text to parse.</param>
 <param name="dt">The parsed date, if any.</param>
 <param name="strFormat">The format mask that returned a result, if any.</param>
 <param name="iMatchPos">The index in the string where the result was found.</param>
 <returns>True if either date format was found.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ReplaceAll(System.String,System.String,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Replace all occurrences of a pattern in a source string with a replacement.
 </summary>
 <param name="strSrc">Source string the replace all instances into.</param>
 <param name="strPattern">The search pattern to replace.</param>
 <param name="strReplacement">The search pattern replacement string.</param>
 <returns>An amphetamine-addicted monk seal.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Replace(System.String,System.String,System.String,System.StringComparison)">
 -----------------------------------------------------------------------
 <summary>
 <see cref="M:System.String.Replace(System.Char,System.Char)"/> alternative that offers comparison
 options. This method is significantly faster than RegEx equivalents.
 Implementation adapted from http://www.codeproject.com/Articles/10890/Fastest-C-Case-Insenstive-String-Replace.
 </summary>
 <param name="strSrc">Source string the replace all instances into.</param>
 <param name="strPattern">The search pattern to replace.</param>
 <param name="strReplacement">The search pattern replacement string.</param>
 <param name="comparisonType">The <see cref="T:System.StringComparison"/> option to use.</param>
 <returns>A string.</returns>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ArrayToString(System.Array,System.Int32,System.Int32,System.Single[0:,0:],System.Boolean,System.Object,System.Object,System.IO.Compression.CompressionLevel)">
 -----------------------------------------------------------------------
 <summary>
 Convert a 2-dimensional (map) array to a string for database storage.
 </summary>
 <param name="data">Data to write to the string.</param>
 <param name="dataDepth">Optional depth data mask to apply. If provided, only 
 water cells or land cells are stored based on the value of <paramref name="bWaterOnly"/>.</param>
 <param name="bWaterOnly">Flag, stating whether only values should be written
 for water cells (true) or land cells (false), as indicated by parameter <paramref name="dataDepth"/>.</param>
 <param name="valueFilter">Value to find in the data and to write to the string,
 or Nothing if any value from the data must be written to the string.</param>
 <param name="valueSet">Value to set, if any.</param>
 <returns>The resulting converted string.</returns>
 <remarks>This code is optimized to include as few characters as possible
 in the output string without having to revert to run-length encoding.
 Rows without any values will be left empty and are only marked by a semi-colon.</remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.StringToArray(System.String,System.Array,System.Int32,System.Int32,System.Single[0:,0:],System.Boolean,System.Object,System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Read a map from a string, and poulate a 2-dimensional array with this data.
 </summary>
 <param name="strData">The string containing the map.</param>
 <param name="data">The 2-dimensional array to populate.</param>
 <param name="InRow">Number of rows in the map.</param>
 <param name="InCol">Number of columns in the map.</param>
 <param name="land">Optional land layer to use.</param>
 <param name="bWaterOnly">States whether only water cells (true) or land cells (false) should be written.</param>
 <param name="valueFilter">Optional value to filter map values by. If specified, only map values equalling this
 filter value will be copied to the data array.</param>
 <param name="valueSet">Value to set, if any.</param>
 <returns>True if successful.</returns>
 -----------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cStringUtils.eFilterIndexTypes">
 -------------------------------------------------------------------
 <summary>
 Enumerated type, stating where to find the data filter in a 3D map array.
 </summary>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ArrayToString(System.Array,System.Int32,EwEUtils.Utilities.cStringUtils.eFilterIndexTypes,System.Int32,System.Int32,System.Single[0:,0:],System.Boolean,System.Object,System.IO.Compression.CompressionLevel)">
 -----------------------------------------------------------------------
 <summary>
 Convert a 3-dimensional (map) array to a string for database storage.
 </summary>
 <param name="data">Data to write to the string.</param>
 <param name="dataDepth">Optional depth data mask to apply. If provided, only 
 water cells or land cells are stored based on the value of <paramref name="bWaterOnly"/>.</param>
 <param name="bWaterOnly">Flag, stating whether only values should be written
 for water cells (true) or land cells (false), as indicated by parameter <paramref name="dataDepth"/>.</param>
 <param name="valueSet">Value to find in the data and to write to the string,
 or Nothing if any value from the data must be written to the string.</param>
 <returns>The resulting converted string.</returns>
 <remarks>This code is optimized to include as few characters as possible
 in the output string without having to revert to run-length encoding.
 Rows without any values will be left empty and are only marked by a semi-colon.</remarks>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.StringToArray(System.String,System.Int32,EwEUtils.Utilities.cStringUtils.eFilterIndexTypes,System.Array,System.Int32,System.Int32,System.Single[0:,0:],System.Boolean,System.Object,System.Single)">
 -----------------------------------------------------------------------
 <summary>
 Read a map from a string, and poulate a 3-dimensional array with this data.
 </summary>
 <param name="strData">The string containing the map.</param>
 <param name="iFilter">Index of third dimension to set.</param>
 <param name="filterIndex">Position of third dimension in the array (first, e.g. (#,,) or last (,,#))</param>
 <param name="data">The 2-dimensional array to populate.</param>
 <param name="land">Optional land layer to use.</param>
 <param name="bWaterOnly">States whether only water cells (true) or land cells (false) should be written.</param>
 <param name="valueGet">Optional value to filter map values by. If specified, only map values equalling this
 filter value will be copied to the data array.</param>
 <returns>True if successful.</returns>
 -----------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cStringUtils.vbCharNull">
 -------------------------------------------------------------------
 <summary>
 Return a former vbCharNull.
 </summary>
 <remarks>
 The Microsoft.VisualBasic assembly is known to cause problems under Mono.
 For Mono compliance this definition should be used instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cStringUtils.vbTab">
 -------------------------------------------------------------------
 <summary>
 Return a Tab character.
 </summary>
 <remarks>
 The Microsoft.VisualBasic assembly is known to cause problems under Mono.
 For Mono compliance this definition should be used instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="P:EwEUtils.Utilities.cStringUtils.vbNewline">
 -------------------------------------------------------------------
 <summary>
 Return a Newline character.
 </summary>
 <remarks>
 The Microsoft.VisualBasic assembly is known to cause problems under Mono.
 For Mono compliance this definition should be used instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cStringUtils.vbCr">
 -------------------------------------------------------------------
 <summary>
 Return a carriage return character.
 </summary>
 <remarks>
 The Microsoft.VisualBasic assembly is known to cause problems under Mono.
 For Mono compliance this definition should be used instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cStringUtils.vbLf">
 -------------------------------------------------------------------
 <summary>
 Return a line feed character.
 </summary>
 <remarks>
 The Microsoft.VisualBasic assembly is known to cause problems under Mono.
 For Mono compliance this definition should be used instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cStringUtils.vbCrLf">
 -------------------------------------------------------------------
 <summary>
 Return a carriage return + line feed character.
 </summary>
 <remarks>
 The Microsoft.VisualBasic assembly is known to cause problems under Mono.
 For Mono compliance this definition should be used instead.
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Localize(System.String,System.Object[])">
 -------------------------------------------------------------------
 <summary>
 <para>Safe string formatting to substitute value(s) into a <see cref="T:System.String">string format 
 mask</see>.</para>
 <para>If the formatting fails, the original mask is returned and the 
 failure is recorded in the EwE error log.</para>
 </summary>
 <param name="strMask">The string mask to use for formatting, containing
 only one placeholder {0}.</param>
 <param name="vals">The value(s) to substitute into the mask.</param>
 <returns>The formatted string, or the original mask if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.LocalizeSentence(System.String,System.Object[])">
 -------------------------------------------------------------------
 <summary>
 <para>Safe string formatting to substitute value(s) into a <see cref="T:System.String">string format 
 mask</see>.</para>
 <para>If the formatting fails, the original mask is returned and the 
 failure is recorded in the EwE error log.</para>
 </summary>
 <param name="strMask">The string mask to use for formatting, containing
 only one placeholder {0}.</param>
 <param name="vals">The value(s) to substitute into the mask.</param>
 <returns>The formatted string, or the original mask if an error occurred.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Range(System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Interprets a text pattern to describe a range of integer values.
 </summary>
 <param name="strValue">The text pattern to analyze.</param>
 <returns>An array of integer values.</returns>
 <remarks>
 <para>Supported value expressions are:</para>
 <list>
 <item><term>A-B</term><description>Range from A to B</description></item>
 <item><term>A-B@C</term><description>Range from A to B with step size C</description></item>
 </list>
 <para>If value B equals * then B is set to the value of <paramref name="iMax"/></para>.
 <para>Expressions are separated by commas.</para>
 <para>If <paramref name="strValue"> is left empty and empty array is returned.</paramref>.</para>
 <para>If <paramref name="strValue"> equals * then all values from 1 to iMax are returned.</paramref>.</para>
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.cStringUtils.entropy">
 <summary>Let's generate some controlled noise.</summary>
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.EncryptString(System.Security.SecureString)">
 -------------------------------------------------------------------
 <summary>
 Encrypt a <see cref="T:System.Security.SecureString">secure string</see> for persistent storage.
 </summary>
 <param name="strsIn">The <see cref="T:System.Security.SecureString">secure string</see> to encrypt.</param>
 <returns>A <see cref="T:System.String">regular string</see>.</returns>
 <remarks><example>AppSettings.Password = EncryptString(ToSecureString(PasswordTextBox.Password));</example></remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.DecryptString(System.String)">
 -------------------------------------------------------------------
 <summary>
 Decrypt a <see cref="T:System.Security.SecureString">secure string</see> from persistent storage.
 </summary>
 <param name="strsIn">The <see cref="T:System.Security.SecureString">secure string</see> to decrypt.</param>
 <returns>A <see cref="T:System.Security.SecureString">secure string</see>.</returns>
 <remarks><example>SecureString password = DecryptString(AppSettings.Password);</example></remarks>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToSecureString(System.String)">
 -------------------------------------------------------------------
 <summary>
 Convert a <see cref="T:System.String">regular string</see> to a <see cref="T:System.Security.SecureString">secure string</see>.
 </summary>
 <param name="strIn">The string to convert.</param>
 <returns>A <see cref="T:System.Security.SecureString">secure string</see>.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.ToInsecureString(System.Security.SecureString)">
 -------------------------------------------------------------------
 <summary>
 Convert a <see cref="T:System.Security.SecureString">secure string</see> to a <see cref="T:System.String">regular string</see>.
 </summary>
 <param name="strsIn">The <see cref="T:System.Security.SecureString">secure string</see> to convert.</param>
 <returns>A <see cref="T:System.String">regular string</see>.</returns>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Compress(System.String,System.IO.Compression.CompressionLevel,System.String)">
 -------------------------------------------------------------------
 <summary>
 Compress and base64 encode a provided string.
 </summary>
 <param name="strIn">The string to compress</param>
 <param name="level">The <see cref="T:System.IO.Compression.CompressionLevel">compression level</see> to use.</param>
 <param name="method">.NET standard is offering other algorithms</param>
 <returns>The compressed and base64-encoded string.</returns>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.Decompress(System.String)"/>
 -------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cStringUtils.Decompress(System.String)">
 -------------------------------------------------------------------
 <summary>
 Base64 decode and decompress a provided string.
 </summary>
 <param name="strIn">The string to decode and decompress.</param>
 <returns></returns>
 <seealso cref="M:EwEUtils.Utilities.cStringUtils.Compress(System.String,System.IO.Compression.CompressionLevel,System.String)"/>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cStringUtils.cAlphanumComparer">
 -------------------------------------------------------------------
 <summary>
 String comparer to perform natural sorting of strings.
 </summary>
 <remarks>
 Converted from http://www.dotnetperls.com/alphanumeric-sorting-vbnet
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cUriBuilder">
 ---------------------------------------------------------------------------
 <summary>
 <see cref="T:System.UriBuilder">System.UriBuilder</see> extension.
 </summary>
 <remarks>
 Original code by Lotuspro (http://www.codeproject.com/script/profile/whos_who.asp?vt=arts#amp;id=507953)
 obtained from "a useful UriBuilder class", http://www.codeproject.com/aspnet/UrlBuilder.asp
 </remarks>
 ---------------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cUriBuilder.IsValidURI(System.String)">
 -------------------------------------------------------------------
 <summary>
 Test if a string is a valid URI
 </summary>
 <param name="strUri"></param>
 <returns></returns>
 <remarks>
 http://stackoverflow.com/questions/4835269/how-to-check-that-a-uri-string-is-valid
 </remarks>
 -------------------------------------------------------------------
</member>
<member name="T:EwEUtils.Utilities.cXMLUtils">
 ---------------------------------------------------------------------------
 <summary>
 XML helper methods.
 </summary>
 ---------------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.cXMLUtils.NewDoc(System.String,System.Xml.XmlNode@,System.String)">
 <summary>
 
 </summary>
 <param name="strRootElement"></param>
 <param name="xnRoot"></param>
 <param name="strEncoding"></param>
 <returns></returns>
</member>
<member name="T:EwEUtils.Utilities.eDescriptorTypes">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type specifying the types of descriptors that an ITypeFormatter can return.
 </summary>
 ---------------------------------------------------------------------------
</member>
<member name="F:EwEUtils.Utilities.eDescriptorTypes.Symbol">
 <summary>A symbolic representation, if available; the shortest of representations.</summary>
</member>
<member name="F:EwEUtils.Utilities.eDescriptorTypes.Abbreviation">
 <summary>An abbreviation or acronym.</summary>
</member>
<member name="F:EwEUtils.Utilities.eDescriptorTypes.Name">
 <summary>A spelled-out name.</summary>
</member>
<member name="F:EwEUtils.Utilities.eDescriptorTypes.Description">
 <summary>A full description.</summary>
</member>
<member name="T:EwEUtils.Utilities.ITypeFormatter">
 -----------------------------------------------------------------------
 <summary>
 Interface for implementing classes that provide string representations
 for objects and enumerated types in EwE.
 </summary>
 -----------------------------------------------------------------------
</member>
<member name="M:EwEUtils.Utilities.ITypeFormatter.ToString(System.Object,EwEUtils.Utilities.eDescriptorTypes)">
 -------------------------------------------------------------------
 <summary>
 Obtains a textual representation for an object.
 </summary>
 <param name="value">The object to provide a textual representation for.</param>
 <param name="descriptor">The <see cref="T:EwEUtils.Utilities.eDescriptorTypes">representation</see> to provide.</param>
 <returns>A textual representation.</returns>
 -------------------------------------------------------------------
</member>
</members>
</doc>
